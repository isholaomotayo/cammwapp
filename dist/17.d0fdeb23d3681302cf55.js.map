{"version":3,"sources":["webpack:///./components/signup/signup_email/signup_email.jsx","webpack:///./components/signup/signup_email/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx"],"names":["SignupEmail","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","handleSubmit","bind","_assertThisInitialized","getInviteInfo","renderEmailSignup","isUserValid","state","React","Component","trackEvent","_this2","data","URLSearchParams","location","search","get","token","inviteId","email","teamDisplayName","teamName","teamId","loading","length","parsedData","JSON","parse","display_name","name","id","inviteData","setState","serverError","noOpenServerError","react_default","a","createElement","index_es","defaultMessage","user","_this3","loginById","password","actions","setGlobalItem","stringify","usedBefore","redirectTo","browserHistory","push","GlobalActions","err","encodeURIComponent","message","isSubmitting","providedEmail","refs","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","Utils","values","min","Constants","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","_Utils$isValidPasswor","passwordConfig","valid","error","e","_this4","preventDefault","username","allow_marketing","createUserWithInvite","handleSignupSuccess","emailHelpText","className","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","formatted_markdown_message","siteName","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","onClick","disabled","emailSignup","_this$props","customDescriptionText","enableSignUpWithEmail","privacyPolicyLink","termsOfServiceLink","loading_screen","terms","TermsOfServiceLink","PrivacyPolicyLink","back_button","src","logoImage","site_name_and_description","Link","to","PropTypes","object","bool","isRequired","string","shape","func","connect","config","getConfig","EnableSignUpWithEmail","SiteName","CustomDescriptionText","getPasswordConfig","dispatch","bindActionCreators","BackButton","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","url","title","localizeMessage","react_intl__WEBPACK_IMPORTED_MODULE_4__","module","exports","__webpack_require__","p","SiteNameAndDescription","description","Fragment"],"mappings":"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","file":"17.d0fdeb23d3681302cf55.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {getInviteInfo} from 'actions/team_actions.jsx';\nimport {createUserWithInvite, loginById} from 'actions/user_actions.jsx';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        termsOfServiceLink: PropTypes.string,\n        privacyPolicyLink: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        actions: PropTypes.shape({\n            setGlobalItem: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.getInviteInfo = this.getInviteInfo.bind(this);\n        this.renderEmailSignup = this.renderEmailSignup.bind(this);\n        this.isUserValid = this.isUserValid.bind(this);\n\n        this.state = this.getInviteInfo();\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n    }\n\n    getInviteInfo() {\n        let data = (new URLSearchParams(this.props.location.search)).get('d');\n        let token = (new URLSearchParams(this.props.location.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n        let email = '';\n        let teamDisplayName = '';\n        let teamName = '';\n        let teamId = '';\n        let loading = false;\n        const serverError = '';\n        const noOpenServerError = false;\n\n        if (token && token.length > 0) {\n            const parsedData = JSON.parse(data);\n            email = parsedData.email;\n            teamDisplayName = parsedData.display_name;\n            teamName = parsedData.name;\n            teamId = parsedData.id;\n        } else if (inviteId && inviteId.length > 0) {\n            loading = true;\n            getInviteInfo(\n                inviteId,\n                (inviteData) => {\n                    if (!inviteData) {\n                        this.setState({loading: false});\n                        return;\n                    }\n\n                    this.setState({\n                        loading: false,\n                        serverError: '',\n                        teamDisplayName: inviteData.display_name,\n                        teamName: inviteData.name,\n                        teamId: inviteData.id,\n                    });\n                },\n                () => {\n                    this.setState({\n                        loading: false,\n                        noOpenServerError: true,\n                        serverError: (\n                            <FormattedMessage\n                                id='signup_user_completed.invalid_invite'\n                                defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                            />\n                        ),\n                    });\n                }\n            );\n\n            data = null;\n            token = null;\n        }\n\n        return {\n            data,\n            token,\n            email,\n            teamDisplayName,\n            teamName,\n            teamId,\n            inviteId,\n            loading,\n            serverError,\n            noOpenServerError,\n        };\n    }\n\n    handleSignupSuccess(user, data) {\n        trackEvent('signup', 'signup_user_02_complete');\n        loginById(\n            data.id,\n            user.password,\n            '',\n            () => {\n                if (this.state.token > 0) {\n                    this.props.actions.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n                }\n\n                const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n                if (redirectTo) {\n                    browserHistory.push(redirectTo);\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false,\n                    });\n                }\n            }\n        );\n    }\n\n    isUserValid() {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true,\n            };\n\n            createUserWithInvite(user,\n                this.state.token,\n                this.state.inviteId,\n                this.handleSignupSuccess.bind(this, user),\n                (err) => {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false,\n                    });\n                }\n            );\n        }\n    }\n\n    renderEmailSignup() {\n        let emailError = null;\n        let emailHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage=\"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-' and '_'\"\n                    values={{\n                        min: Constants.MIN_USERNAME_LENGTH,\n                        max: Constants.MAX_USERNAME_LENGTH,\n                    }}\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.whatis'\n                                defaultMessage=\"What's your email address?\"\n                            />\n                        </strong></h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.chooseUser'\n                                defaultMessage='Choose your username'\n                            />\n                        </strong></h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.choosePwd'\n                                defaultMessage='Choose your password'\n                            />\n                        </strong></h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: termsOfServiceLink,\n                            PrivacyPolicyLink: privacyPolicyLink,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4 className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SignupEmail from './signup_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName;\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            setGlobalItem,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupEmail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/b4b638e8c6672039f00a5f07cfed24d4.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1>{siteName}</h1>\n                <h4 className='color--light'>\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}