{"version":3,"sources":["webpack:///./components/do_verify_email/do_verify_email.jsx","webpack:///./components/do_verify_email/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["DoVerifyEmail","props","_this","_classCallCheck","this","_defineProperty","_assertThisInitialized","_possibleConstructorReturn","_getPrototypeOf","call","_asyncToGenerator","regeneratorRuntime","mark","_callee","verifyUserEmail","verify","wrap","_context","prev","next","actions","URLSearchParams","location","search","get","sent","data","handleSuccess","error","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","stop","state","verifyStatus","serverError","React","PureComponent","verifyEmail","isLoggedIn","GlobalActions","browserHistory","push","encodeURIComponent","_this2","setState","ErrorStore","clearError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","storeLastError","notification","message","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","emitChange","user","Object","assign","email_verified","trackEvent","updateMe","then","_ref2","err","handleRedirect","FAILED_USER_STATE_UPDATE","react_default","a","createElement","index_es","id","defaultMessage","loading_screen","className","back_button","src","logoImage","siteName","PropTypes","object","isRequired","string","shape","func","bool","defaultProps","connect","getConfig","SiteName","Boolean","getCurrentUserId","getCurrentUser","dispatch","bindActionCreators","BackButton","react__WEBPACK_IMPORTED_MODULE_3___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","to","url","title","localizeMessage","react_intl__WEBPACK_IMPORTED_MODULE_4__","module","exports","__webpack_require__","p"],"mappings":"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","file":"20.531d28fe49be2f580780.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ErrorStore from 'stores/error_store.jsx';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants.jsx';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport default class DoVerifyEmail extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with validation parameters given in link\n         */\n        location: PropTypes.object.isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to verify the user's email\n             */\n            verifyUserEmail: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to update the user in the redux store\n             */\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Object reprenseting the current user\n         */\n        user: PropTypes.shape({\n            email_verified: PropTypes.bool,\n        }),\n\n        isLoggedIn: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email')));\n        }\n    }\n\n    handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        ErrorStore.clearError(AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED);\n        if (this.props.isLoggedIn) {\n            ErrorStore.storeLastError({\n                notification: true,\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            });\n            ErrorStore.emitChange();\n            const user = Object.assign({}, this.props.user);\n            user.email_verified = true;\n            trackEvent('settings', 'verify_email');\n            this.props.actions.updateMe(user).then(({data, error: err}) => {\n                if (data) {\n                    this.handleRedirect();\n                } else if (err) {\n                    this.handleError(VerifyEmailErrors.FAILED_USER_STATE_UPDATE);\n                }\n            });\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type) {\n        let serverError = '';\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_UPDATE) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token'));\n\n        if (verify && verify.data) {\n            this.handleSuccess();\n        } else if (verify && verify.error) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDoVerifyEmail.defaultProps = {\n    location: {},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport DoVerifyEmail from './do_verify_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            updateMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/dab14c86297d09799009bbaba4112d0e.png\";"],"sourceRoot":""}