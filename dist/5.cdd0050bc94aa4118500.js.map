{"version":3,"sources":["webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/code_block_ctrl_enter_section/code_block_ctrl_enter_section.jsx","webpack:///./components/user_settings/advanced/code_block_ctrl_enter_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.jsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_languages.jsx","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.jsx","webpack:///./components/access_history_modal/index.js","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js"],"names":["JoinLeaveSection","props","_this","_classCallCheck","this","_defineProperty","_assertThisInitialized","_possibleConstructorReturn","_getPrototypeOf","call","e","value","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","_this$props","actions","currentUserId","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","user_id","name","ADVANCED_FILTER_JOIN_LEAVE","state","savePreferences","React","PureComponent","activeSection","AdvancedSections","JOIN_LEAVE","react_default","a","createElement","setting_item_max","title","index_es","id","defaultMessage","inputs","key","className","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","setting_item_min","describe","renderOnOffLabel","focused","prevActiveSection","PropTypes","string","isRequired","func","shape","connect","getPreference","getCurrentUserId","dispatch","bindActionCreators","CodeBlockCtrlEnterSection","code_block_ctrl_enter_section_classCallCheck","code_block_ctrl_enter_section_defineProperty","code_block_ctrl_enter_section_assertThisInitialized","code_block_ctrl_enter_section_possibleConstructorReturn","code_block_ctrl_enter_section_getPrototypeOf","codeBlockOnCtrlEnterState","codeBlockOnCtrlEnter","codeBlockOnCtrlEnterPreference","sendMessageOnCtrlEnter","codeBlockOnCtrlEnterSection","CODE_BLOCK_ON_CTRL_ENTER","Fragment","bool","getBool","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","user_settings_advanced_classCallCheck","user_settings_advanced_defineProperty","user_settings_advanced_assertThisInitialized","user_settings_advanced_possibleConstructorReturn","user_settings_advanced_getPrototypeOf","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","as","_i","length","feature","FeatureTogglePrefix","label","err","return","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","lastIndexOf","features","push","preferences","userId","currentUser","Array","isArray","updateActive","message","revokeAllSessions","emitUserLoggedOutEvent","getStateFromProps","updateSetting","bind","prevSections","advancedCtrlSend","advancedPreviewFeatures","deactivateAccount","Component","enabled","ctrlSendSection","_this2","ctrlSendActive","previewFeaturesSection","previewFeaturesSectionDivider","formattingSection","renderFormattingSection","formattingSectionDivider","toggleFeature","target","renderFeatureLabel","saveEnabledFeatures","Utils","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","deactivateMemberButton","confirm_modal","show","confirmButtonClass","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","code_block_ctrl_enter_section","join_leave_section","object","array","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","getCurrentUser","ColorInput","color_input_classCallCheck","color_input_defineProperty","color_input_assertThisInitialized","color_input_possibleConstructorReturn","color_input_getPrototypeOf","colorPickerDOMNode","ReactDom","findDOMNode","colorPicker","contains","isOpened","newColorData","hex","handleChange","node","idOpened","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","color","readOnly","togglePicker","style","backgroundColor","getColorPicker","lib","ColorChooser","newColor","_this$props2","color_input","messages","defineMessages","sidebarBg","t","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","custom_theme_chooser_classCallCheck","custom_theme_chooser_defineProperty","custom_theme_chooser_assertThisInitialized","custom_theme_chooser_possibleConstructorReturn","custom_theme_chooser_getPrototypeOf","settingId","updateTheme","theme","newTheme","_objectSpread","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","stringify","stopPropagation","textarea","refs","focus","setSelectionRange","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","on","onCodeThemeChange","off","assign","image","UserAgent","slideToggle","formatMessage","intl","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","Popover","bsStyle","width","src","defaultValue","OverlayTrigger","trigger","placement","overlay","group","color_chooser","handleColorChange","pasteBox","onPaste","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","localizeMessage","toggleCenterChannelStyles","toggleLinkAndButtonStyles","propTypes","intlShape","injectIntl","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","indexOf","premadeTheme","extend","activeClass","arrayOf","defaultProps","AllowedThemes","split","ThemeSetting","user_settings_theme_classCallCheck","user_settings_theme_defineProperty","user_settings_theme_assertThisInitialized","user_settings_theme_possibleConstructorReturn","user_settings_theme_getPrototypeOf","teamId","applyToAllTeams","currentTeamId","UserActions","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","user_settings_theme_objectSpread","selected","ReactDOM","addClass","removeClass","nextProps","resetFields","arguments","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","custom","premade","themeUI","displayCustom","allowCustomThemes","custom_theme_chooser","premade_theme_chooser","updateType","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","timezone","item","isSelection","handleClick","baseProps","TimezoneProvider","Provider","suggestionId","timezonePrefix","displayAllTimezones","filterTimezones","setTimeout","handleServerAction","SUGGESTION_RECEIVED_SUGGESTIONS","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","ManageTimezones","manage_timezones_classCallCheck","manage_timezones_defineProperty","manage_timezones_assertThisInitialized","manage_timezones_possibleConstructorReturn","manage_timezones_getPrototypeOf","manualTimezoneInput","manualTimezone","_this$state","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","_this$state2","updatedUser","manage_timezones_objectSpread","toString","updateUser","getBrowserTimezone","timezones","_this$state3","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","suggestion_box","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","manage_languages_classCallCheck","manage_languages_defineProperty","manage_languages_assertThisInitialized","manage_languages_possibleConstructorReturn","manage_languages_getPrototypeOf","locale","manage_languages_objectSpread","options","locales","I18n","map","l","order","sort","b","lang","input","setLanguage","formatted_markdown_message","changeLanguage","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","user_settings_display_classCallCheck","user_settings_display_defineProperty","user_settings_display_assertThisInitialized","user_settings_display_possibleConstructorReturn","user_settings_display_getPrototypeOf","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","user_settings_display_objectSpread","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","display","moreColon","firstMessageMore","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","moreId","moreMessage","secondMessageMore","thirdMessage","secondMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","collapseSection","createSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","timezoneSelection","clockSection","teammateNameDisplaySection","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","userTimezone","manage_timezones_ManageTimezones","currentUserTimezone","languagesSection","themeSection","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","userLocale","defaultClientLocale","manage_languages_ManageLanguage","enableThemeSelection","user_settings_theme","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","ACCEPTED_PROFILE_IMAGE_TYPES","UserSettingsGeneralTab","user_settings_general_classCallCheck","user_settings_general_defineProperty","user_settings_general_assertThisInitialized","user_settings_general_possibleConstructorReturn","user_settings_general_getPrototypeOf","ErrorStore","storeLastError","notification","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","emitChange","email","resendStatus","showSpinner","handleEmailVerificationError","sendVerificationEmail","then","_ref","data","error","handleEmailResend","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","isEmail","emailError","emailUpdated","sectionIsSaving","getMe","sendEmailNotifications","requireEmailVerification","emailChangeInProgress","pictureFile","submitActive","file","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","email_verified","emailSection","emailEnabled","emailVerificationEnabled","helpText","newEmail","createEmailResendLink","autoFocus","updateEmail","updateConfirmEmail","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","nicknameSection","usernameSection","positionSection","extraInfo","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","onFocus","updateLastName","notifLink","updateTab","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","positionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","createEmailSection","setting_picture","onSubmit","submitPicture","onFileChange","updatePicture","minMessage","last_picture_update","date","Date","day","month","year","isRequred","number","SendEmailNotifications","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","PositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","soundSection","activityRadio","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","seconds","DEFAULT_NOTIFICATION_DURATION","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","EmailNotificationSetting","email_notification_setting_classCallCheck","email_notification_setting_defineProperty","email_notification_setting_assertThisInitialized","email_notification_setting_possibleConstructorReturn","email_notification_setting_getPrototypeOf","enableEmail","emailInterval","savePreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","INTERVAL_IMMEDIATE","INTERVAL_HOUR","batchingOptions","batchingInfo","enableEmailBatching","INTERVAL_FIFTEEN_MINUTES","data-enable-email","data-email-interval","INTERVAL_NEVER","siteName","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","autosize_textarea","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","concat","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","user_settings_notifications_classCallCheck","user_settings_notifications_defineProperty","user_settings_notifications_assertThisInitialized","user_settings_notifications_possibleConstructorReturn","user_settings_notifications_getPrototypeOf","mentionKeys","stringKeys","updateUserNotifyProps","handleCancel","wrapper","val","customcheck","custommentions","replace","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusSettings","pushStatusRadio","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","keysSection","commentsSection","autoResponderSection","updateFirstNameKey","updateUsernameKey","updateChannelKey","onCustomChange","i","substring","commentsActive","handleNotifyCommentsRadio","enableAutoResponder","manage_auto_responder_ManageAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","desktop_notification_settings_DesktopNotificationSettings","email_notification_setting_EmailNotificationSetting","activeTab","EnableEmailBatching","SiteName","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","access_history_modal_classCallCheck","access_history_modal_defineProperty","access_history_modal_assertThisInitialized","access_history_modal_possibleConstructorReturn","access_history_modal_getPrototypeOf","getUserAudits","isMobile","perfectScrollbar","onShow","content","userAudits","loading_screen","audit_table","audits","showIp","showSession","Modal","dialogClassName","onHide","onExited","bsSize","Header","closeButton","Title","Body","getCurrentUserAudits","MoreInfo","currentSession","moreInfo","handleMoreInfo","firstAccessTime","create_at","getMonthLong","time","hour","minute","os","browser","ActivityLog","activity_log_classCallCheck","activity_log_defineProperty","activity_log_assertThisInitialized","activity_log_possibleConstructorReturn","activity_log_getPrototypeOf","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","activity_log_modal_classCallCheck","activity_log_modal_defineProperty","activity_log_modal_assertThisInitialized","activity_log_modal_possibleConstructorReturn","activity_log_modal_getPrototypeOf","altId","modalContent","closest","revokeSession","getSessions","sessions","loading","activityList","reduce","activity_log_ActivityLog","role","oneOfType","getUserSessions","getCurrentLocale","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","user_access_token_section_classCallCheck","user_access_token_section_defineProperty","user_access_token_section_assertThisInitialized","user_access_token_section_possibleConstructorReturn","user_access_token_section_getPrototypeOf","tokenCreationState","user_access_token_section_asyncToGenerator","regeneratorRuntime","mark","_callee","_ref2","wrap","_context","prev","handleCancelConfirm","newtokendescription","tokenError","abrupt","confirmCopyToken","createUserAccessToken","sent","newToken","stop","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","KeyCodes","ENTER","confirmCreateToken","tokenId","userAccessTokens","revokeToken","_ref3","_callee2","_ref4","_context2","revokeUserAccessToken","_x","apply","_ref5","_callee3","_ref6","_context3","enableUserAccessToken","_x2","_ref7","_callee4","_ref8","_context4","disableUserAccessToken","_x3","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","noTokenText","newTokenSection","tokenList","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","onKeyPress","saveTokenKeyPress","save_button","btnClass","savingMessage","stopCreatingToken","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_MFA","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","user_settings_security_classCallCheck","user_settings_security_defineProperty","user_settings_security_assertThisInitialized","user_settings_security_possibleConstructorReturn","user_settings_security_getPrototypeOf","currentPassword","newPassword","confirmPassword","_Utils$isValidPasswor","passwordConfig","valid","savingPassword","updatePassword","getDefaultState","passwordError","defaultState","browserHistory","deactivateMfa","mfaLicensed","enableMultifactorAuthentication","enforceMultifactorAuthentication","appId","deauthorizeOAuthApp","authorizedApps","app","mfaRemoveHelp","mfaButtonText","mfa_active","removeMfa","setupMfa","submitPassword","updateCurrentPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","alt","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","getAuthorizedApps","signInSection","mfaSection","oauthSection","tokensSection","passwordSection","createPasswordSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","isLicensed","createMfaSection","createOAuthAppsSection","canUseAccessTokens","user_access_token_section","toggle_modal_button","dialogType","ownProps","license","getLicense","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","IsLicensed","MFA","EnableOAuthServiceProvider","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","UserSettingsSidebar","user_settings_sidebar_classCallCheck","user_settings_sidebar_defineProperty","user_settings_sidebar_assertThisInitialized","user_settings_sidebar_possibleConstructorReturn","user_settings_sidebar_getPrototypeOf","close_unused_direct_messages","closeUnusedDirectMessages","show_unread_section","displayUnreadSection","channel_switcher_section","channelSwitcherOption","CATEGORY_SIDEBAR_SETTINGS","renderAutoCloseDMLabel","renderUnreadLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","_this$props3","showUnusedOption","showUnreadOption","autoCloseDMSection","renderAutoCloseDMSection","unreadSection","renderUnreadSection","channelSwitcherSection","renderChannelSwitcherSection","ExperimentalGroupUnreadChannels","GroupUnreadChannels","DEFAULT_ON","CloseUnusedDirectMessages","DISABLED","UserSettings","components_user_settings_general","security","notifications","user_settings_display","sidebar","advanced","sessionRevoked","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","userIdContent","ipContent","sessionContent","accessList","audit","auditInfo","formatAuditInfo","getByName","getUser","uContent","showUserId","profile","iContent","ip","sContent","sessionId","descStyle","desc","timestamp","actionURL","action","auditDesc","channelObj","channelInfo","extra_info","channelNameField","channelURL","channelName","display_name","getDirectTeammate","userIdField","test","url","oauthInfo","clientIdField","oauthTokenFailure","userInfo","userRoles","updateField","actingUserInfo","actingUser","isSystemAdmin","webhookInfo","licenseInfo","toTitleCase","actionDesc","extraInfoDesc","ip_address","session_id","getChannelByName"],"mappings":"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","file":"5.cdd0050bc94aa4118500.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        prevActiveSection: PropTypes.string,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <div key='joinLeaveSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                focused={this.props.prevActiveSection === AdvancedSections.JOIN_LEAVE}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class CodeBlockCtrlEnterSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.string,\n        sendMessageOnCtrlEnter: PropTypes.bool,\n        onUpdateSection: PropTypes.func.isRequired,\n        prevActiveSection: PropTypes.string,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            codeBlockOnCtrlEnterState: props.codeBlockOnCtrlEnter,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({codeBlockOnCtrlEnterState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({codeBlockOnCtrlEnterState: this.props.codeBlockOnCtrlEnter});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const codeBlockOnCtrlEnterPreference = {\n            user_id: currentUserId,\n            category: Preferences.CATEGORY_ADVANCED_SETTINGS,\n            name: 'code_block_ctrl_enter',\n            value: this.state.codeBlockOnCtrlEnterState,\n        };\n\n        actions.savePreferences(currentUserId, [codeBlockOnCtrlEnterPreference]);\n        onUpdateSection();\n    }\n\n    render() {\n        if (this.props.sendMessageOnCtrlEnter) {\n            return null;\n        }\n\n        const {codeBlockOnCtrlEnterState} = this.state;\n\n        let codeBlockOnCtrlEnterSection = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.codeBlockOnCtrlEnterSendTitle'\n                        defaultMessage='Send code block messages on CTRL + ENTER'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(codeBlockOnCtrlEnterState)}\n                focused={this.props.prevActiveSection === AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                section={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n        if (this.props.activeSection === AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER) {\n            codeBlockOnCtrlEnterSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.codeBlockOnCtrlEnterSendTitle'\n                            defaultMessage='Send code block messages on CTRL + ENTER'\n                        />\n                    }\n                    inputs={[\n                        <div key='codeBlockOnCtrlEnterSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='codeBlockOnCtrlEnterOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                                        checked={codeBlockOnCtrlEnterState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='codeBlockOnCtrlEnterOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                                        checked={codeBlockOnCtrlEnterState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.codeBlockOnCtrlEnterSendDesc'\n                                    defaultMessage='If enabled, ENTER inserts a new line within messages formatted as code starting with ```. CTRL + ENTER submits the message.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <div className='divider-light'/>\n                {codeBlockOnCtrlEnterSection}\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport CodeBlockCtrlEnterSection from './code_block_ctrl_enter_section';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        codeBlockOnCtrlEnter: getPreference(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n        sendMessageOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CodeBlockCtrlEnterSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreferences, updateActive, revokeAllSessions} from 'actions/user_actions.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport JoinLeaveSection from './join_leave_section';\nimport CodeBlockCtrlEnterSection from './code_block_ctrl_enter_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.Component {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        prevActiveSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n\n        this.prevSections = {\n            advancedCtrlSend: 'dummySectionName', // dummy value that should never match any section name\n            formatting: 'advancedCtrlSend',\n            join_leave: 'formatting',\n            advancedPreviewFeatures: 'join_leave',\n            deactivateAccount: 'advancedPreviewFeatures',\n        };\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = (settings) => {\n        const preferences = [];\n        const userId = this.props.currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n\n        savePreferences(\n            preferences,\n            () => {\n                this.handleUpdateSection('');\n            }\n        );\n    }\n\n    handleDeactivateAccountSubmit = () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        updateActive(userId, false,\n            null,\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n\n        revokeAllSessions(userId,\n            () => {\n                emitUserLoggedOutEvent();\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <div key='formattingSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                focused={this.props.prevActiveSection === this.prevSections.formatting}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <div key='ctrlSendSetting'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'true')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.on'\n                                defaultMessage='On'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'false')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.sendDesc'\n                            defaultMessage='If enabled ENTER inserts a new line and CTRL+ENTER submits the message.'\n                        />\n                    </div>\n                </div>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'send_on_ctrl_enter'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    describe={this.renderOnOffLabel(this.state.settings.send_on_ctrl_enter)}\n                    focused={this.props.prevActiveSection === this.prevSections.advancedCtrlSend}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        focused={this.props.prevActiveSection === this.prevSections.advancedPreviewFeatures}\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        focused={this.props.prevActiveSection === this.prevSections.deactivateAccount}\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    <CodeBlockCtrlEnterSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport {ChromePicker} from 'react-color';\n\nclass ColorInput extends React.Component {\n    static propTypes = {\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed. Takes hex format of color Ex: #ffeec0\n         */\n        onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            idOpened: false,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    checkClick = (e) => {\n        const colorPickerDOMNode = ReactDom.findDOMNode(this.colorPicker);\n        if (!colorPickerDOMNode || !colorPickerDOMNode.contains(e.target)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    handleChange = (newColorData) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    getColorPicker = (node) => {\n        this.colorPicker = node;\n    };\n\n    render() {\n        const {color} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.getColorPicker}\n                        className='color-popover'\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nclass CustomThemeChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = this.props.theme;\n        theme.codeTheme = e.target.value;\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        bsStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                trigger={['hover', 'focus']}\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row form-group'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nCustomThemeChooser.propTypes = {\n    intl: intlShape.isRequired,\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserActions from 'actions/user_actions.jsx';\nimport {ActionTypes, Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        showAllTeamsCheckbox: PropTypes.bool,\n        applyToAllTeams: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        UserActions.saveTheme(\n            teamId,\n            this.state.theme,\n            () => {\n                this.props.setRequireConfirm(false);\n                this.originalTheme = Object.assign({}, this.state.theme);\n                this.scrollToTop();\n                this.props.updateSection('');\n                this.setState({isSaving: false});\n            }\n        );\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <a\n                            id='slackImportTheme'\n                            className='theme'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </a>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(suggestionId, timezonePrefix) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(suggestionId) {\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: '',\n                terms: getSupportedTimezones(),\n                items: getSupportedTimezones(),\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n\n    async filterTimezones(suggestionId, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: timezonePrefix,\n                terms: filteredTimezones,\n                items: filteredTimezones,\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {updateUser} from 'actions/user_actions.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        updateUser(\n            updatedUser,\n            () => this.props.updateSection(''),\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageTimezones.propTypes = {\n    user: PropTypes.object.isRequired,\n    updateSection: PropTypes.func.isRequired,\n    useAutomaticTimezone: PropTypes.bool.isRequired,\n    automaticTimezone: PropTypes.string.isRequired,\n    manualTimezone: PropTypes.string.isRequired,\n    timezones: PropTypes.array.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {updateUser} from 'actions/user_actions.jsx';\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ManageLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            locale: props.locale,\n            isSaving: false,\n        };\n    }\n\n    setLanguage = (e) => {\n        this.setState({locale: e.target.value});\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        updateUser(\n            user,\n            () => {\n                // Do nothing since changing the locale essentially refreshes the page\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                <option\n                    key={lang.value}\n                    value={lang.value}\n                >\n                    {lang.name}\n                </option>\n            );\n        });\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <select\n                        id='displayLanguage'\n                        ref='language'\n                        className='form-control'\n                        value={this.state.locale}\n                        onChange={this.setLanguage}\n                    >\n                        {options}\n                    </select>\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageLanguage.propTypes = {\n    user: PropTypes.object.isRequired,\n    locale: PropTypes.string.isRequired,\n    updateSection: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreferences} from 'actions/user_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\n\nimport ManageTimezones from './manage_timezones.jsx';\nimport ManageLanguages from './manage_languages.jsx';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        prevActiveSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    handleSubmit = () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        savePreferences(preferences, () => {\n            this.updateSection('');\n        });\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n        } = props;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [\n                <div key={key}>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </div>,\n            ];\n\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === this.prevSections[section]}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display Mode',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        focused={this.props.prevActiveSection === this.prevSections.languages}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedHTMLMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {updateUser, uploadProfileImage} from 'actions/user_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image.',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nconst prevSections = {\n    name: 'dummySectionName', // dummy value that should never match any section name\n    username: 'name',\n    nickname: 'username',\n    position: 'nickname',\n    email: 'position',\n    picture: 'email',\n};\n\nconst ACCEPTED_PROFILE_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        prevActiveSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequred,\n        }).isRequired,\n        sendEmailNotifications: PropTypes.bool,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        positionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailVerificationError = () => {\n        ErrorStore.storeLastError({\n            notification: true,\n            message: Constants.AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n        });\n        ErrorStore.emitChange();\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true}, () => {\n            this.handleEmailVerificationError();\n        });\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        let resendHTML;\n        if (this.state.showSpinner) {\n            resendHTML = (\n                <React.Fragment>\n                    <span className='fa-wrapper'>\n                        <span\n                            className='fa fa-spinner icon--rotate'\n                            title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                        />\n                    </span>\n                    <FormattedMessage\n                        id='user.settings.general.sending'\n                        defaultMessage='Sending'\n                    />\n                </React.Fragment>\n            );\n        } else {\n            resendHTML = (\n                <span className='resend-verification-wrapper'>\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                }, () => {\n                                    this.handleEmailVerificationError();\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </span>\n            );\n        }\n        return resendHTML;\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        this.setState({sectionIsSaving: true});\n        updateUser(\n            user,\n            () => {\n                this.updateSection('');\n                this.props.actions.getMe();\n                const verificationEnabled = this.props.sendEmailNotifications && this.props.requireEmailVerification && emailUpdated;\n                if (verificationEnabled) {\n                    this.handleEmailVerificationError();\n                    this.setState({emailChangeInProgress: true});\n                }\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n            }\n        );\n    }\n\n    submitPicture = (e) => {\n        e.preventDefault();\n\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!ACCEPTED_PROFILE_IMAGE_TYPES.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        uploadProfileImage(\n            file,\n            () => {\n                this.updateSection('');\n                this.submitActive = false;\n            },\n            (err) => {\n                var state = this.setupInitialState(this.props);\n                state.serverError = err.message;\n                this.setState(state);\n            }\n        );\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        const emailChangeInProgress = this.state.emailChangeInProgress;\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {emailChangeInProgress, clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            pictureFile: null,\n            loadingPicture: false,\n            emailChangeInProgress: props.sendEmailNotifications && props.requireEmailVerification && !user.email_verified,\n            sectionIsSaving: false,\n        };\n    }\n\n    createEmailSection() {\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailEnabled = this.props.sendEmailNotifications;\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailEnabled) {\n                helpText = (\n                    <div className='setting-list__hint col-sm-12 text-danger'>\n                        <FormattedMessage\n                            id='user.settings.general.emailHelp2'\n                            defaultMessage='Email has been disabled by your System Administrator. No notification emails will be sent until it is enabled.'\n                        />\n                    </div>\n                );\n            } else if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            } else if (this.state.emailChangeInProgress) {\n                const newEmail = this.props.user.email;\n                if (newEmail) {\n                    helpText = (\n                        <React.Fragment>\n                            <FormattedMarkdownMessage\n                                id='user.settings.general.emailHelp4'\n                                defaultMessage='A verification email was sent to {email}. \\nCannot find the email?'\n                                values={{\n                                    email: newEmail,\n                                }}\n                            />\n                            {this.createEmailResendLink(newEmail)}\n                        </React.Fragment>\n                    );\n                }\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                if (this.state.emailChangeInProgress) {\n                    const newEmail = this.props.user.email;\n                    if (newEmail) {\n                        describe = (\n                            <React.Fragment>\n                                <FormattedHTMLMessage\n                                    id='user.settings.general.newAddress'\n                                    defaultMessage='Check your email to verify {email}'\n                                    values={{\n                                        email: newEmail,\n                                    }}\n                                />\n                            </React.Fragment>\n                        );\n                    } else {\n                        describe = (\n                            <FormattedMessage\n                                id='user.settings.general.checkEmailNoAddress'\n                                defaultMessage='Check your email to verify your new address'\n                            />\n                        );\n                    }\n                } else {\n                    describe = this.props.user.email;\n                }\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.email}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.name}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.nickname}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    focused={this.props.prevActiveSection === prevSections.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.positionAttributeSet) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.position}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    src={Utils.imageURLForUser(user)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    focused={this.props.prevActiveSection === prevSections.picture}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, sendVerificationEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const positionAttributeSet = config.PositionAttributeSet === 'true';\n\n    return {\n        sendEmailNotifications,\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        positionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            sendVerificationEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </span>\n                    </div>\n                );\n            } else {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <label>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop'\n                        defaultMessage='Send desktop notifications'\n                    />\n                </label>\n                <br/>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationAllActivity'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[0]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.ALL}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.allActivity'\n                            defaultMessage='For all activity'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationMentions'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[1]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.MENTION}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.onlyMentions'\n                            defaultMessage='Only for mentions and direct messages'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationNever'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[2]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.NONE}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.never'\n                            defaultMessage='Never'\n                        />\n                    </label>\n                </div>\n                <br/>\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.info'\n                        defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                    />\n                </span>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let describe = '';\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundTimed'\n                        defaultMessage='For mentions and direct messages, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsNoSoundTimed'\n                        defaultMessage='For mentions and direct messages, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundHiddenTimed'\n                        defaultMessage='For mentions and direct messages, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundTimed'\n                        defaultMessage='For all activity, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allNoSoundTimed'\n                        defaultMessage='For all activity, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundHiddenTimed'\n                        defaultMessage='For all activity, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={describe}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreference} from 'actions/user_actions.jsx';\nimport {Preferences} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class EmailNotificationSetting extends React.Component {\n    static propTypes = {\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            enableEmail: props.enableEmail,\n            emailInterval: props.emailInterval,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.saving && (nextProps.enableEmail !== this.props.enableEmail || nextProps.emailInterval !== this.props.emailInterval)) {\n            this.setState({\n                enableEmail: nextProps.enableEmail,\n                emailInterval: nextProps.emailInterval,\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n        const emailInterval = parseInt(e.currentTarget.getAttribute('data-email-interval'), 10);\n        this.setState({\n            enableEmail,\n            emailInterval,\n        });\n    }\n\n    handleSubmit = () => {\n        const {enableEmail, emailInterval} = this.state;\n        if (this.props.enableEmail !== enableEmail || this.props.emailInterval !== emailInterval) {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            savePreference(Preferences.CATEGORY_NOTIFICATIONS, Preferences.EMAIL_INTERVAL, emailInterval.toString());\n\n            this.props.onSubmit(enableEmail);\n        } else {\n            this.props.updateSection('');\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                emailInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    render() {\n        if (!this.props.sendEmailNotifications && this.props.activeSection === 'email') {\n            const inputs = [];\n\n            inputs.push(\n                <div\n                    key='oauthEmailInfo'\n                    className='padding-top'\n                >\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled_long'\n                        defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                    />\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={inputs}\n                    server_error={this.state.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        if (this.props.activeSection !== 'email') {\n            let description;\n\n            if (!this.props.sendEmailNotifications) {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled'\n                        defaultMessage='Email notifications are not enabled'\n                    />\n                );\n            } else if (this.props.enableEmail) {\n                switch (this.state.emailInterval) {\n                case Preferences.INTERVAL_IMMEDIATE:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.immediately'\n                            defaultMessage='Immediately'\n                        />\n                    );\n                    break;\n                case Preferences.INTERVAL_HOUR:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyHour'\n                            defaultMessage='Every hour'\n                        />\n                    );\n                    break;\n                default:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyXMinutes'\n                            defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                            values={{count: this.state.emailInterval / 60}}\n                        />\n                    );\n                }\n            } else {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n\n            return (\n                <SettingItemMin\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    describe={description}\n                    focused={this.props.focused}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / 60}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <div key='userNotificationEmailOptions'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </label>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <div>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </div>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div key='autoResponderHint'>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {updateUserNotifyProps} from 'actions/user_actions.jsx';\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting.jsx';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nconst prevSections = {\n    desktop: 'dummySectionName', // dummy value that should never match any section name\n    email: 'desktop',\n    push: 'email',\n    keys: 'push',\n    comments: 'keys',\n};\n\nexport default class NotificationsTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        prevActiveSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        prevActiveSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = (enableEmail = this.state.enableEmail) => {\n        const data = {};\n        data.email = enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        updateUserNotifyProps(\n            data,\n            () => {\n                this.updateSection('');\n                this.setState(getNotificationsStateFromProps(this.props));\n            },\n            (err) => {\n                this.setState({serverError: err.message, isSaving: false});\n            }\n        );\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({isSaving: false});\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n            this.handleCancel();\n        }\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    updateSection = (section) => {\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n        this.refs.wrapper.focus();\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n        this.refs.wrapper.focus();\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <div>\n                            <hr/>\n                            <label>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </label>\n                            <br/>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </div>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div key='userNotificationLevelOption'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.push_notification.send'\n                                defaultMessage='Send mobile push notifications'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationAllActivity'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[0]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.allActivity'\n                                    defaultMessage='For all activity'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationMentions'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[1]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.onlyMentions'\n                                    defaultMessage='For mentions and direct messages'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationNever'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[2]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.info'\n                                defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                            />\n                        </span>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                focused={this.props.prevActiveSection === prevSections.push}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.keys}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <div key='userNotificationLevelOption'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Mention any comments in a thread you participated in (This will include both mentions to your root post and any comments after you commented on a post)'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Mention any comments on your post'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage='No mentions for comments'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.comments}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.updateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.notifications.autoResponder'\n                                    defaultMessage='Automatic Direct Message Replies'\n                                />\n                            }\n                            width='medium'\n                            describe={describe}\n                            section={'auto-responder'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n        const enableEmail = this.state.enableEmail === 'true';\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.updateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        focused={this.props.prevActiveSection === prevSections.desktop}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        enableEmail={enableEmail}\n                        emailInterval={Utils.getEmailInterval(this.props.enableEmailBatching, enableEmail)}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        focused={this.props.prevActiveSection === prevSections.email}\n                        sendEmailNotifications={this.props.sendEmailNotifications}\n                        enableEmailBatching={this.props.enableEmailBatching}\n                        siteName={this.props.siteName}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const enableEmailBatching = config.EnableEmailBatching === 'true';\n    const siteName = config.SiteName;\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendEmailNotifications,\n        enableEmailBatching,\n        siteName,\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class AccessHistoryModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch the user's audits\n             */\n            getUserAudits: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * The current user's audits\n         */\n        userAudits: PropTypes.array.isRequired,\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    onShow = () => {\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport AccessHistoryModal from './access_history_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Inactive)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-default'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning margin-right'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => {})} //eslint-disable-line no-empty-function\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {deactivateMfa, deauthorizeOAuthApp, getAuthorizedApps, updatePassword} from 'actions/user_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed.\n        isLicensed: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed to use multi-factor authentication.\n        mfaLicensed: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enabled.\n        enableMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enforced.\n        enforceMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            getAuthorizedApps(\n                (authorizedApps) => {\n                    this.setState({authorizedApps, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n                },\n                (err) => {\n                    this.setState({serverError: err.message}); //eslint-disable-line react/no-did-mount-set-state\n                }\n            );\n        }\n    }\n\n    submitPassword = () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        updatePassword(\n            user.id,\n            currentPassword,\n            newPassword,\n            () => {\n                this.props.updateSection('');\n                this.props.actions.getMe();\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                var state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                state.passwordError = '';\n                this.setState(state);\n            }\n        );\n    }\n\n    setupMfa = (e) => {\n        e.preventDefault();\n        browserHistory.push('/mfa/setup');\n    }\n\n    removeMfa = () => {\n        deactivateMfa(\n            () => {\n                if (this.props.mfaLicensed &&\n                        this.props.enableMultifactorAuthentication &&\n                        this.props.enforceMultifactorAuthentication) {\n                    browserHistory.push('/mfa/setup');\n                    return;\n                }\n\n                this.props.updateSection('');\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                const state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                this.setState(state);\n            }\n        );\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = (e) => {\n        e.preventDefault();\n        const appId = e.currentTarget.getAttribute('data-app');\n        deauthorizeOAuthApp(\n            appId,\n            () => {\n                const authorizedApps = this.state.authorizedApps.filter((app) => {\n                    return app.id !== appId;\n                });\n\n                this.setState({authorizedApps, serverError: null});\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createMfaSection = () => {\n        if (this.props.activeSection === SECTION_MFA) {\n            let content;\n            let extraInfo;\n            if (this.props.user.mfa_active) {\n                let mfaRemoveHelp;\n                let mfaButtonText;\n\n                if (this.props.enforceMultifactorAuthentication) {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.requiredHelp'\n                            defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.reset'\n                            defaultMessage='Reset MFA on your account'\n                        />\n                    );\n                } else {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.removeHelp'\n                            defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.remove'\n                            defaultMessage='Remove MFA from your account'\n                        />\n                    );\n                }\n\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.removeMfa}\n                        >\n                            {mfaButtonText}\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        {mfaRemoveHelp}\n                    </span>\n                );\n            } else {\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.setupMfa}\n                        >\n                            <FormattedMessage\n                                id='user.settings.mfa.add'\n                                defaultMessage='Add MFA to your account'\n                            />\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.mfa.addHelp'\n                            defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n                        />\n                    </span>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div\n                    key='mfaSetting'\n                    className='padding-top'\n                >\n                    {content}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='medium'\n                />\n            );\n        }\n\n        let describe;\n        if (this.props.user.mfa_active) {\n            describe = Utils.localizeMessage('user.settings.security.active', 'Active');\n        } else {\n            describe = Utils.localizeMessage('user.settings.security.inactive', 'Inactive');\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                describe={describe}\n                section={SECTION_MFA}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let mfaSection;\n        if (this.props.enableMultifactorAuthentication &&\n                this.props.isLicensed &&\n                (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE)) {\n            mfaSection = this.createMfaSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    {mfaSection}\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.viewHistory.icon', 'Access History Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.logoutActiveSessions.icon', 'Active Sessions Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityTab.defaultProps = {\n    user: {},\n    activeSection: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe} from 'mattermost-redux/actions/users';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const mfaLicensed = license && license.MFA === 'true';\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        isLicensed,\n        mfaLicensed,\n        enableOAuthServiceProvider,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage, isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * The preferences to show the unread channels section in the sidebar\n         */\n        displayUnreadSection: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         */\n        showUnreadOption: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {closeUnusedDirectMessages, displayUnreadSection, channelSwitcherOption} = this.props;\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                show_unread_section: displayUnreadSection,\n                channel_switcher_section: channelSwitcherOption,\n            },\n            isSaving: false,\n        };\n    };\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        preferences.push({\n            user_id: user.id,\n            category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: setting,\n            value: this.state.settings[setting],\n        });\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    updateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        if (this.props.activeSection === 'autoCloseDM') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <div key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.autoCloseDMTitle'\n                        defaultMessage='Automatically Close Direct Messages'\n                    />\n                }\n                describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                section={'autoCloseDM'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    renderUnreadLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.showUnreadSection'\n                    defaultMessage='At the top of the channel sidebar'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderUnreadSection = () => {\n        if (this.props.activeSection === 'unreadChannels') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadSectionTitle'\n                            defaultMessage='Group unread channels'\n                        />\n                    }\n                    inputs={[\n                        <div key='unreadSectionSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionEnabled'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.showUnreadSection'\n                                        defaultMessage='At the top of the channel sidebar'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionNever'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.unreadSectionDesc'\n                                    defaultMessage='Unread channels will be sorted at the top of the channel sidebar until read.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'show_unread_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.unreadSectionTitle'\n                        defaultMessage='Group unread channels'\n                    />\n                }\n                describe={this.renderUnreadLabel(this.state.settings.show_unread_section)}\n                section={'unreadChannels'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <div key='channelSwitcherSectionSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.state.settings.channel_switcher_section)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showUnreadOption} = this.props;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const unreadSection = showUnreadOption ? this.renderUnreadSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {unreadSection}\n                    {showUnreadOption && <div className='divider-light'/>}\n                    {channelSwitcherSection}\n                    {showUnusedOption && <div className='divider-light'/>}\n                    {autoCloseDMSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {GroupUnreadChannels} from 'utils/constants.jsx';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        closeUnusedDirectMessages: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'close_unused_direct_messages',\n            'after_seven_days'\n        ),\n        displayUnreadSection: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'show_unread_section',\n            (config.ExperimentalGroupUnreadChannels === GroupUnreadChannels.DEFAULT_ON).toString()\n        ),\n        channelSwitcherOption: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'channel_switcher_section',\n            'true'\n        ),\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        showUnreadOption: config.ExperimentalGroupUnreadChannels !== GroupUnreadChannels.DISABLED,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        prevActiveSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage, props.currentUser, props.getByName, props.getUser);\n\n        let uContent;\n        if (props.showUserId) {\n            const profile = props.getUser(auditInfo.userId);\n            const data = profile ? profile.email : auditInfo.userId;\n            uContent = <td className='word-break--all'>{data}</td>;\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n    currentUser: PropTypes.object.isRequired,\n    getUser: PropTypes.func.isRequired,\n    getByName: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage, currentUser, getByName, getUser) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = getUser(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = getUser(actingUserInfo[1]);\n                    const user = currentUser;\n                    if (user && actingUser && isSystemAdmin(user.roles)) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nexport default connect(mapStateToProps)(AuditTable);\n"],"sourceRoot":""}