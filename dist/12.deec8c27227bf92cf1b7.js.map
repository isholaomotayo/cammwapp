{"version":3,"sources":["webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx","webpack:///./components/login/login_mfa.jsx"],"names":["LoginController","props","_this","_classCallCheck","this","_defineProperty","_assertThisInitialized","_possibleConstructorReturn","_getPrototypeOf","call","state","sessionExpired","closeSessionExpiredNotification","showNotification","title","siteName","body","Utils","requireInteraction","silent","onClick","window","focus","then","closeNotification","catch","LocalStorageStore","setWasLoggedIn","setState","showMfa","preSubmit","bind","submit","finishSignin","handleLoginIdChange","handlePasswordChange","loginId","URLSearchParams","location","search","get","Constants","SIGNIN_VERIFIED","ldapEnabled","isLicensed","enableLdap","usernameSigninEnabled","enableSignInWithUsername","emailSigninEnabled","enableSignInWithEmail","samlEnabled","enableSaml","password","loading","React","Component","intl","intlShape","isRequired","PropTypes","object","bool","customBrandText","string","customDescriptionText","enableCustomBrand","enableOpenServer","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithGoogle","enableSignUpWithOffice365","experimentalPrimaryTeam","ldapLoginFieldName","samlLoginButtonText","initializing","configureTitle","UserStore","getCurrentUser","GlobalActions","extra","email","refs","getWasLoggedIn","SIGNIN_CHANGE","set","SESSION_EXPIRED","browserHistory","replace","concat","pathname","showSessionExpiredNotificationIfNeeded","document","formatMessage","id","defaultMessage","e","_this2","preventDefault","newQuery","hash","value","trim","toLowerCase","t","msgId","serverError","react_default","a","createElement","index_es","values","ldapUsername","checkMfa","requiresMfa","err","message","token","_this3","webLogin","params","inviteToken","inviteId","addUserToTeamFromInvite","team","push","encodeURIComponent","primaryTeam","TeamStore","getByName","redirectTo","match","name","DEFAULT_CHANNEL","target","text","formattedText","TextFormatting","src","Client4","getBrandImageUrl","messageHtmlToComponent","mentions","loginPlaceholders","length","slice","join","extraParam","extraBox","className","Link","to","onDismissSessionExpired","GET_TERMS_ERROR","TERMS_REJECTED","formatted_markdown_message","PASSWORD_CHANGE","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","errorClass","loginButton","key","onSubmit","form_error","error","margin","ref","onChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","autoFocus","type","checkSignUpEnabled","href","getOAuthRoute","getUrl","content","customContent","customClass","backButton","_this$props","loading_screen","login_mfa","back_button","hideMfa","createLoginOptions","createCustomLogin","announcement_bar","logoImage","site_name_and_description","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","ExperimentalPrimaryTeam","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","BackButton","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","url","localizeMessage","react_intl__WEBPACK_IMPORTED_MODULE_4__","func","module","exports","__webpack_require__","p","SiteNameAndDescription","description","Fragment","LoginMfa","saving","react__WEBPACK_IMPORTED_MODULE_4___default","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_5__","autoComplete","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_7__","disabled","savingMessage"],"mappings":"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","file":"12.deec8c27227bf92cf1b7.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite} from 'actions/team_actions.jsx';\nimport {checkMfa, webLogin} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport LoginMfa from '../login_mfa.jsx';\nclass LoginController extends React.Component {\n    static get propTypes() {\n        return {\n            intl: intlShape.isRequired,\n\n            location: PropTypes.object.isRequired,\n            isLicensed: PropTypes.bool.isRequired,\n\n            customBrandText: PropTypes.string,\n            customDescriptionText: PropTypes.string,\n            enableCustomBrand: PropTypes.bool.isRequired,\n            enableLdap: PropTypes.bool.isRequired,\n            enableOpenServer: PropTypes.bool.isRequired,\n            enableSaml: PropTypes.bool.isRequired,\n            enableSignInWithEmail: PropTypes.bool.isRequired,\n            enableSignInWithUsername: PropTypes.bool.isRequired,\n            enableSignUpWithEmail: PropTypes.bool.isRequired,\n            enableSignUpWithGitLab: PropTypes.bool.isRequired,\n            enableSignUpWithGoogle: PropTypes.bool.isRequired,\n            enableSignUpWithOffice365: PropTypes.bool.isRequired,\n            experimentalPrimaryTeam: PropTypes.string,\n            ldapLoginFieldName: PropTypes.string,\n            samlLoginButtonText: PropTypes.string,\n            siteName: PropTypes.string,\n            initializing: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.preSubmit = this.preSubmit.bind(this);\n        this.submit = this.submit.bind(this);\n        this.finishSignin = this.finishSignin.bind(this);\n\n        this.handleLoginIdChange = this.handleLoginIdChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n        };\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (UserStore.getCurrentUser()) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.refs.password.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn() && extra !== Constants.SIGNIN_CHANGE) {\n            // Although the authority remains the local sessionExpired bit on the state, set this\n            // extra field in the querystring to signal the desktop app. And although eslint\n            // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n            // eslint-disable-next-line react/no-did-mount-set-state\n            this.setState({sessionExpired: true});\n            search.set('extra', Constants.SESSION_EXPIRED);\n            browserHistory.replace(`${this.props.location.pathname}?${search}`);\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle() {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.refs.loginId.value;\n        if (loginId !== this.state.loginId) {\n            this.setState({loginId});\n        }\n\n        const password = this.refs.password.value;\n        if (password !== this.state.password) {\n            this.setState({password});\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        checkMfa(\n            loginId,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(loginId, password, '');\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        this.setState({serverError: null, loading: true});\n\n        webLogin(\n            loginId,\n            password,\n            token,\n            () => {\n                // check for query params brought over from signup_user_complete\n                const params = new URLSearchParams(this.props.location.search);\n                const inviteToken = params.get('t') || '';\n                const inviteId = params.get('id') || '';\n\n                if (inviteId || inviteToken) {\n                    addUserToTeamFromInvite(\n                        inviteToken,\n                        inviteId,\n                        (team) => {\n                            this.finishSignin(team);\n                        },\n                        () => {\n                            // there's not really a good way to deal with this, so just let the user log in like normal\n                            this.finishSignin();\n                        }\n                    );\n\n                    return;\n                }\n\n                this.finishSignin();\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (err.id === 'store.sql_user.get_for_login.app_error' ||\n                    err.id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (err.id === 'api.user.check_user_password.invalid.app_error' || err.id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else {\n                    this.setState({showMfa: false, serverError: err.message, loading: false});\n                }\n            }\n        );\n    }\n\n    finishSignin(team) {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const primaryTeam = TeamStore.getByName(experimentalPrimaryTeam);\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (primaryTeam) {\n            browserHistory.push(`/${primaryTeam.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange(e) {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange(e) {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    createCustomLogin() {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n\n            return (\n                <div>\n                    <img\n                        src={Client4.getBrandImageUrl(0)}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder() {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled() {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createLoginOptions() {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n        let extraBox = '';\n        if (this.state.sessionExpired) {\n            extraBox = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-exclamation-triangle'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        } else if (extraParam === Constants.GET_TERMS_ERROR) {\n            extraBox = (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            extraBox = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-exclamation-triangle'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        }\n\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            let loginButton = (\n                <FormattedMessage\n                    id='login.signIn'\n                    defaultMessage='Sign in'\n                />\n            );\n\n            if (this.state.loading) {\n                loginButton =\n                (<span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.signInLoading'\n                        defaultMessage='Signing in...'\n                    />\n                </span>);\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={Utils.localizeMessage('login.password', 'Password')}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                { loginButton }\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {extraBox}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div className='col-sm-12'>\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    return {\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nexport default connect(mapStateToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/b4b638e8c6672039f00a5f07cfed24d4.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1>{siteName}</h1>\n                <h4 className='color--light'>\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n"],"sourceRoot":""}