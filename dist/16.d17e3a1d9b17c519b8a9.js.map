{"version":3,"sources":["webpack:///./components/signup/signup_controller/signup_controller.jsx","webpack:///./components/signup/signup_controller/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["SignupController","props","_this","_classCallCheck","this","_defineProperty","_assertThisInitialized","_possibleConstructorReturn","_getPrototypeOf","call","err","serverError","server_error_id","message","react_default","a","createElement","index_es","id","defaultMessage","setState","noOpenServerError","loading","renderSignupControls","bind","usedBefore","location","search","params","URLSearchParams","token","get","inviteId","loggedIn","enableOpenServer","noAccounts","state","React","Component","_this2","actions","removeGlobalItem","userLoggedIn","addUserToTeamFromInvite","team","browserHistory","push","name","concat","Constants","DEFAULT_CHANNEL","handleInvalidInvite","getInviteInfo","inviteData","GlobalActions","signupControls","enableSignUpWithEmail","Link","className","key","to","window","title","localizeMessage","enableSignUpWithGitLab","href","Client4","getOAuthRoute","isLicensed","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLDAP","LDAPText","ldapLoginFieldName","enableSAML","query","samlLoginButtonText","length","signupDisabledError","form_error","error","margin","loading_screen","announcement_bar","back_button","src","logoImage","siteName","PropTypes","object","bool","isRequired","string","shape","func","connect","ownProps","license","getLicense","config","getConfig","IsLicensed","EnableOpenServer","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","getGlobalItem","Boolean","getCurrentUserId","dispatch","bindActionCreators","BackButton","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","module","exports","__webpack_require__","p"],"mappings":"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","file":"16.d17e3a1d9b17c519b8a9.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite, getInviteInfo} from 'actions/team_actions.jsx';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class SignupController extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        loggedIn: PropTypes.bool.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        noAccounts: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableLDAP: PropTypes.bool.isRequired,\n        enableSAML: PropTypes.bool.isRequired,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        usedBefore: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            removeGlobalItem: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.renderSignupControls = this.renderSignupControls.bind(this);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (!this.props.loggedIn) {\n                usedBefore = props.usedBefore;\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.removeGlobalItem('team');\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = this.props.loggedIn;\n\n            if ((inviteId || token) && userLoggedIn) {\n                addUserToTeamFromInvite(\n                    token,\n                    inviteId,\n                    (team) => {\n                        browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n                    },\n                    this.handleInvalidInvite\n                );\n\n                return;\n            }\n\n            if (inviteId) {\n                getInviteInfo(\n                    inviteId,\n                    (inviteData) => {\n                        if (!inviteData) {\n                            return;\n                        }\n\n                        this.setState({ // eslint-disable-line react/no-did-mount-set-state\n                            serverError: '',\n                            loading: false,\n                        });\n                    },\n                    this.handleInvalidInvite\n                );\n\n                return;\n            }\n\n            if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls() {\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-envelope'\n                            title={localizeMessage('signup.email.icon', 'Email Icon')}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            let LDAPText = (\n                <FormattedMessage\n                    id='signup.ldap'\n                    defaultMessage='AD/LDAP Credentials'\n                />\n            );\n            if (this.props.ldapLoginFieldName) {\n                LDAPText = this.props.ldapLoginFieldName;\n            }\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-folder-open fa--margin-top'\n                            title={localizeMessage('signup.ldap.icon', 'AD/LDAP Icon')}\n                        />\n                        <span>\n                            {LDAPText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title={localizeMessage('signup.saml.icon', 'SAML Icon')}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='margin--extra'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getGlobalItem} from 'selectors/storage';\nimport {removeGlobalItem} from 'actions/storage';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const siteName = config.SiteName;\n\n    let usedBefore;\n    if (ownProps.location.search) {\n        const params = new URLSearchParams(ownProps.location.search);\n        let token = params.get('t');\n        if (token == null) {\n            token = '';\n        }\n        usedBefore = getGlobalItem(state, token, null);\n    }\n\n    return {\n        loggedIn: Boolean(getCurrentUserId(state)),\n        isLicensed,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        ldapLoginFieldName,\n        siteName,\n        usedBefore,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeGlobalItem,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/b4b638e8c6672039f00a5f07cfed24d4.png\";"],"sourceRoot":""}