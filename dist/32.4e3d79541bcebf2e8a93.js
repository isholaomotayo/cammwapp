(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[32],{

/***/ "./node_modules/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Bootstrap Colorpicker v2.5.2\n * https://itsjavi.com/bootstrap-colorpicker/\n *\n * Originally written by (c) 2012 Stefan Petre\n * Licensed under the Apache License v2.0\n * http://www.apache.org/licenses/LICENSE-2.0.txt\n *\n */\n\n(function(root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/src/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(jq) {\n      return (factory(jq));\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function($) {\n  'use strict';\n  /**\n   * Color manipulation helper class\n   *\n   * @param {Object|String} [val]\n   * @param {Object} [predefinedColors]\n   * @param {String|null} [fallbackColor]\n   * @param {String|null} [fallbackFormat]\n   * @param {Boolean} [hexNumberSignPrefix]\n   * @constructor\n   */\n  var Color = function(\n    val, predefinedColors, fallbackColor, fallbackFormat, hexNumberSignPrefix) {\n    this.fallbackValue = fallbackColor ?\n      (\n        fallbackColor && (typeof fallbackColor.h !== 'undefined') ?\n        fallbackColor :\n        this.value = {\n          h: 0,\n          s: 0,\n          b: 0,\n          a: 1\n        }\n      ) :\n      null;\n\n    this.fallbackFormat = fallbackFormat ? fallbackFormat : 'rgba';\n\n    this.hexNumberSignPrefix = hexNumberSignPrefix === true;\n\n    this.value = this.fallbackValue;\n\n    this.origFormat = null; // original string format\n\n    this.predefinedColors = predefinedColors ? predefinedColors : {};\n\n    // We don't want to share aliases across instances so we extend new object\n    this.colors = $.extend({}, Color.webColors, this.predefinedColors);\n\n    if (val) {\n      if (typeof val.h !== 'undefined') {\n        this.value = val;\n      } else {\n        this.setColor(String(val));\n      }\n    }\n\n    if (!this.value) {\n      // Initial value is always black if no arguments are passed or val is empty\n      this.value = {\n        h: 0,\n        s: 0,\n        b: 0,\n        a: 1\n      };\n    }\n  };\n\n  Color.webColors = { // 140 predefined colors from the HTML Colors spec\n    \"aliceblue\": \"f0f8ff\",\n    \"antiquewhite\": \"faebd7\",\n    \"aqua\": \"00ffff\",\n    \"aquamarine\": \"7fffd4\",\n    \"azure\": \"f0ffff\",\n    \"beige\": \"f5f5dc\",\n    \"bisque\": \"ffe4c4\",\n    \"black\": \"000000\",\n    \"blanchedalmond\": \"ffebcd\",\n    \"blue\": \"0000ff\",\n    \"blueviolet\": \"8a2be2\",\n    \"brown\": \"a52a2a\",\n    \"burlywood\": \"deb887\",\n    \"cadetblue\": \"5f9ea0\",\n    \"chartreuse\": \"7fff00\",\n    \"chocolate\": \"d2691e\",\n    \"coral\": \"ff7f50\",\n    \"cornflowerblue\": \"6495ed\",\n    \"cornsilk\": \"fff8dc\",\n    \"crimson\": \"dc143c\",\n    \"cyan\": \"00ffff\",\n    \"darkblue\": \"00008b\",\n    \"darkcyan\": \"008b8b\",\n    \"darkgoldenrod\": \"b8860b\",\n    \"darkgray\": \"a9a9a9\",\n    \"darkgreen\": \"006400\",\n    \"darkkhaki\": \"bdb76b\",\n    \"darkmagenta\": \"8b008b\",\n    \"darkolivegreen\": \"556b2f\",\n    \"darkorange\": \"ff8c00\",\n    \"darkorchid\": \"9932cc\",\n    \"darkred\": \"8b0000\",\n    \"darksalmon\": \"e9967a\",\n    \"darkseagreen\": \"8fbc8f\",\n    \"darkslateblue\": \"483d8b\",\n    \"darkslategray\": \"2f4f4f\",\n    \"darkturquoise\": \"00ced1\",\n    \"darkviolet\": \"9400d3\",\n    \"deeppink\": \"ff1493\",\n    \"deepskyblue\": \"00bfff\",\n    \"dimgray\": \"696969\",\n    \"dodgerblue\": \"1e90ff\",\n    \"firebrick\": \"b22222\",\n    \"floralwhite\": \"fffaf0\",\n    \"forestgreen\": \"228b22\",\n    \"fuchsia\": \"ff00ff\",\n    \"gainsboro\": \"dcdcdc\",\n    \"ghostwhite\": \"f8f8ff\",\n    \"gold\": \"ffd700\",\n    \"goldenrod\": \"daa520\",\n    \"gray\": \"808080\",\n    \"green\": \"008000\",\n    \"greenyellow\": \"adff2f\",\n    \"honeydew\": \"f0fff0\",\n    \"hotpink\": \"ff69b4\",\n    \"indianred\": \"cd5c5c\",\n    \"indigo\": \"4b0082\",\n    \"ivory\": \"fffff0\",\n    \"khaki\": \"f0e68c\",\n    \"lavender\": \"e6e6fa\",\n    \"lavenderblush\": \"fff0f5\",\n    \"lawngreen\": \"7cfc00\",\n    \"lemonchiffon\": \"fffacd\",\n    \"lightblue\": \"add8e6\",\n    \"lightcoral\": \"f08080\",\n    \"lightcyan\": \"e0ffff\",\n    \"lightgoldenrodyellow\": \"fafad2\",\n    \"lightgrey\": \"d3d3d3\",\n    \"lightgreen\": \"90ee90\",\n    \"lightpink\": \"ffb6c1\",\n    \"lightsalmon\": \"ffa07a\",\n    \"lightseagreen\": \"20b2aa\",\n    \"lightskyblue\": \"87cefa\",\n    \"lightslategray\": \"778899\",\n    \"lightsteelblue\": \"b0c4de\",\n    \"lightyellow\": \"ffffe0\",\n    \"lime\": \"00ff00\",\n    \"limegreen\": \"32cd32\",\n    \"linen\": \"faf0e6\",\n    \"magenta\": \"ff00ff\",\n    \"maroon\": \"800000\",\n    \"mediumaquamarine\": \"66cdaa\",\n    \"mediumblue\": \"0000cd\",\n    \"mediumorchid\": \"ba55d3\",\n    \"mediumpurple\": \"9370d8\",\n    \"mediumseagreen\": \"3cb371\",\n    \"mediumslateblue\": \"7b68ee\",\n    \"mediumspringgreen\": \"00fa9a\",\n    \"mediumturquoise\": \"48d1cc\",\n    \"mediumvioletred\": \"c71585\",\n    \"midnightblue\": \"191970\",\n    \"mintcream\": \"f5fffa\",\n    \"mistyrose\": \"ffe4e1\",\n    \"moccasin\": \"ffe4b5\",\n    \"navajowhite\": \"ffdead\",\n    \"navy\": \"000080\",\n    \"oldlace\": \"fdf5e6\",\n    \"olive\": \"808000\",\n    \"olivedrab\": \"6b8e23\",\n    \"orange\": \"ffa500\",\n    \"orangered\": \"ff4500\",\n    \"orchid\": \"da70d6\",\n    \"palegoldenrod\": \"eee8aa\",\n    \"palegreen\": \"98fb98\",\n    \"paleturquoise\": \"afeeee\",\n    \"palevioletred\": \"d87093\",\n    \"papayawhip\": \"ffefd5\",\n    \"peachpuff\": \"ffdab9\",\n    \"peru\": \"cd853f\",\n    \"pink\": \"ffc0cb\",\n    \"plum\": \"dda0dd\",\n    \"powderblue\": \"b0e0e6\",\n    \"purple\": \"800080\",\n    \"red\": \"ff0000\",\n    \"rosybrown\": \"bc8f8f\",\n    \"royalblue\": \"4169e1\",\n    \"saddlebrown\": \"8b4513\",\n    \"salmon\": \"fa8072\",\n    \"sandybrown\": \"f4a460\",\n    \"seagreen\": \"2e8b57\",\n    \"seashell\": \"fff5ee\",\n    \"sienna\": \"a0522d\",\n    \"silver\": \"c0c0c0\",\n    \"skyblue\": \"87ceeb\",\n    \"slateblue\": \"6a5acd\",\n    \"slategray\": \"708090\",\n    \"snow\": \"fffafa\",\n    \"springgreen\": \"00ff7f\",\n    \"steelblue\": \"4682b4\",\n    \"tan\": \"d2b48c\",\n    \"teal\": \"008080\",\n    \"thistle\": \"d8bfd8\",\n    \"tomato\": \"ff6347\",\n    \"turquoise\": \"40e0d0\",\n    \"violet\": \"ee82ee\",\n    \"wheat\": \"f5deb3\",\n    \"white\": \"ffffff\",\n    \"whitesmoke\": \"f5f5f5\",\n    \"yellow\": \"ffff00\",\n    \"yellowgreen\": \"9acd32\",\n    \"transparent\": \"transparent\"\n  };\n\n  Color.prototype = {\n    constructor: Color,\n    colors: {}, // merged web and predefined colors\n    predefinedColors: {},\n    /**\n     * @return {Object}\n     */\n    getValue: function() {\n      return this.value;\n    },\n    /**\n     * @param {Object} val\n     */\n    setValue: function(val) {\n      this.value = val;\n    },\n    _sanitizeNumber: function(val) {\n      if (typeof val === 'number') {\n        return val;\n      }\n      if (isNaN(val) || (val === null) || (val === '') || (val === undefined)) {\n        return 1;\n      }\n      if (val === '') {\n        return 0;\n      }\n      if (typeof val.toLowerCase !== 'undefined') {\n        if (val.match(/^\\./)) {\n          val = \"0\" + val;\n        }\n        return Math.ceil(parseFloat(val) * 100) / 100;\n      }\n      return 1;\n    },\n    isTransparent: function(strVal) {\n      if (!strVal || !(typeof strVal === 'string' || strVal instanceof String)) {\n        return false;\n      }\n      strVal = strVal.toLowerCase().trim();\n      return (strVal === 'transparent') || (strVal.match(/#?00000000/)) || (strVal.match(/(rgba|hsla)\\(0,0,0,0?\\.?0\\)/));\n    },\n    rgbaIsTransparent: function(rgba) {\n      return ((rgba.r === 0) && (rgba.g === 0) && (rgba.b === 0) && (rgba.a === 0));\n    },\n    // parse a string to HSB\n    /**\n     * @protected\n     * @param {String} strVal\n     * @returns {boolean} Returns true if it could be parsed, false otherwise\n     */\n    setColor: function(strVal) {\n      strVal = strVal.toLowerCase().trim();\n      if (strVal) {\n        if (this.isTransparent(strVal)) {\n          this.value = {\n            h: 0,\n            s: 0,\n            b: 0,\n            a: 0\n          };\n          return true;\n        } else {\n          var parsedColor = this.parse(strVal);\n          if (parsedColor) {\n            this.value = this.value = {\n              h: parsedColor.h,\n              s: parsedColor.s,\n              b: parsedColor.b,\n              a: parsedColor.a\n            };\n            if (!this.origFormat) {\n              this.origFormat = parsedColor.format;\n            }\n          } else if (this.fallbackValue) {\n            // if parser fails, defaults to fallbackValue if defined, otherwise the value won't be changed\n            this.value = this.fallbackValue;\n          }\n        }\n      }\n      return false;\n    },\n    setHue: function(h) {\n      this.value.h = 1 - h;\n    },\n    setSaturation: function(s) {\n      this.value.s = s;\n    },\n    setBrightness: function(b) {\n      this.value.b = 1 - b;\n    },\n    setAlpha: function(a) {\n      this.value.a = Math.round((parseInt((1 - a) * 100, 10) / 100) * 100) / 100;\n    },\n    toRGB: function(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      h *= 360;\n      var R, G, B, X, C;\n      h = (h % 360) / 60;\n      C = b * s;\n      X = C * (1 - Math.abs(h % 2 - 1));\n      R = G = B = b - C;\n\n      h = ~~h;\n      R += [C, X, 0, 0, X, C][h];\n      G += [X, C, C, X, 0, 0][h];\n      B += [0, 0, X, C, C, X][h];\n\n      return {\n        r: Math.round(R * 255),\n        g: Math.round(G * 255),\n        b: Math.round(B * 255),\n        a: a\n      };\n    },\n    toHex: function(ignoreFormat, h, s, b, a) {\n      if (arguments.length <= 1) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var prefix = '#';\n      var rgb = this.toRGB(h, s, b, a);\n\n      if (this.rgbaIsTransparent(rgb)) {\n        return 'transparent';\n      }\n\n      if (!ignoreFormat) {\n        prefix = (this.hexNumberSignPrefix ? '#' : '');\n      }\n\n      var hexStr = prefix + (\n          (1 << 24) +\n          (parseInt(rgb.r) << 16) +\n          (parseInt(rgb.g) << 8) +\n          parseInt(rgb.b))\n        .toString(16)\n        .slice(1);\n\n      return hexStr;\n    },\n    toHSL: function(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var H = h,\n        L = (2 - s) * b,\n        S = s * b;\n      if (L > 0 && L <= 1) {\n        S /= L;\n      } else {\n        S /= 2 - L;\n      }\n      L /= 2;\n      if (S > 1) {\n        S = 1;\n      }\n      return {\n        h: isNaN(H) ? 0 : H,\n        s: isNaN(S) ? 0 : S,\n        l: isNaN(L) ? 0 : L,\n        a: isNaN(a) ? 0 : a\n      };\n    },\n    toAlias: function(r, g, b, a) {\n      var c, rgb = (arguments.length === 0) ? this.toHex(true) : this.toHex(true, r, g, b, a);\n\n      // support predef. colors in non-hex format too, as defined in the alias itself\n      var original = this.origFormat === 'alias' ? rgb : this.toString(false, this.origFormat);\n\n      for (var alias in this.colors) {\n        c = this.colors[alias].toLowerCase().trim();\n        if ((c === rgb) || (c === original)) {\n          return alias;\n        }\n      }\n      return false;\n    },\n    RGBtoHSB: function(r, g, b, a) {\n      r /= 255;\n      g /= 255;\n      b /= 255;\n\n      var H, S, V, C;\n      V = Math.max(r, g, b);\n      C = V - Math.min(r, g, b);\n      H = (C === 0 ? null :\n        V === r ? (g - b) / C :\n        V === g ? (b - r) / C + 2 :\n        (r - g) / C + 4\n      );\n      H = ((H + 360) % 6) * 60 / 360;\n      S = C === 0 ? 0 : C / V;\n      return {\n        h: this._sanitizeNumber(H),\n        s: S,\n        b: V,\n        a: this._sanitizeNumber(a)\n      };\n    },\n    HueToRGB: function(p, q, h) {\n      if (h < 0) {\n        h += 1;\n      } else if (h > 1) {\n        h -= 1;\n      }\n      if ((h * 6) < 1) {\n        return p + (q - p) * h * 6;\n      } else if ((h * 2) < 1) {\n        return q;\n      } else if ((h * 3) < 2) {\n        return p + (q - p) * ((2 / 3) - h) * 6;\n      } else {\n        return p;\n      }\n    },\n    HSLtoRGB: function(h, s, l, a) {\n      if (s < 0) {\n        s = 0;\n      }\n      var q;\n      if (l <= 0.5) {\n        q = l * (1 + s);\n      } else {\n        q = l + s - (l * s);\n      }\n\n      var p = 2 * l - q;\n\n      var tr = h + (1 / 3);\n      var tg = h;\n      var tb = h - (1 / 3);\n\n      var r = Math.round(this.HueToRGB(p, q, tr) * 255);\n      var g = Math.round(this.HueToRGB(p, q, tg) * 255);\n      var b = Math.round(this.HueToRGB(p, q, tb) * 255);\n      return [r, g, b, this._sanitizeNumber(a)];\n    },\n    /**\n     * @param {String} strVal\n     * @returns {Object} Object containing h,s,b,a,format properties or FALSE if failed to parse\n     */\n    parse: function(strVal) {\n      if (arguments.length === 0) {\n        return false;\n      }\n\n      var that = this,\n        result = false,\n        isAlias = (typeof this.colors[strVal] !== 'undefined'),\n        values, format;\n\n      if (isAlias) {\n        strVal = this.colors[strVal].toLowerCase().trim();\n      }\n\n      $.each(this.stringParsers, function(i, parser) {\n        var match = parser.re.exec(strVal);\n        values = match && parser.parse.apply(that, [match]);\n        if (values) {\n          result = {};\n          format = (isAlias ? 'alias' : (parser.format ? parser.format : that.getValidFallbackFormat()));\n          if (format.match(/hsla?/)) {\n            result = that.RGBtoHSB.apply(that, that.HSLtoRGB.apply(that, values));\n          } else {\n            result = that.RGBtoHSB.apply(that, values);\n          }\n          if (result instanceof Object) {\n            result.format = format;\n          }\n          return false; // stop iterating\n        }\n        return true;\n      });\n      return result;\n    },\n    getValidFallbackFormat: function() {\n      var formats = [\n        'rgba', 'rgb', 'hex', 'hsla', 'hsl'\n      ];\n      if (this.origFormat && (formats.indexOf(this.origFormat) !== -1)) {\n        return this.origFormat;\n      }\n      if (this.fallbackFormat && (formats.indexOf(this.fallbackFormat) !== -1)) {\n        return this.fallbackFormat;\n      }\n\n      return 'rgba'; // By default, return a format that will not lose the alpha info\n    },\n    /**\n     *\n     * @param {string} [format] (default: rgba)\n     * @param {boolean} [translateAlias] Return real color for pre-defined (non-standard) aliases (default: false)\n     * @param {boolean} [forceRawValue] Forces hashtag prefix when getting hex color (default: false)\n     * @returns {String}\n     */\n    toString: function(forceRawValue, format, translateAlias) {\n      format = format || this.origFormat || this.fallbackFormat;\n      translateAlias = translateAlias || false;\n\n      var c = false;\n\n      switch (format) {\n        case 'rgb':\n          {\n            c = this.toRGB();\n            if (this.rgbaIsTransparent(c)) {\n              return 'transparent';\n            }\n            return 'rgb(' + c.r + ',' + c.g + ',' + c.b + ')';\n          }\n          break;\n        case 'rgba':\n          {\n            c = this.toRGB();\n            return 'rgba(' + c.r + ',' + c.g + ',' + c.b + ',' + c.a + ')';\n          }\n          break;\n        case 'hsl':\n          {\n            c = this.toHSL();\n            return 'hsl(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%)';\n          }\n          break;\n        case 'hsla':\n          {\n            c = this.toHSL();\n            return 'hsla(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%,' + c.a + ')';\n          }\n          break;\n        case 'hex':\n          {\n            return this.toHex(forceRawValue);\n          }\n          break;\n        case 'alias':\n          {\n            c = this.toAlias();\n\n            if (c === false) {\n              return this.toString(forceRawValue, this.getValidFallbackFormat());\n            }\n\n            if (translateAlias && !(c in Color.webColors) && (c in this.predefinedColors)) {\n              return this.predefinedColors[c];\n            }\n\n            return c;\n          }\n        default:\n          {\n            return c;\n          }\n          break;\n      }\n    },\n    // a set of RE's that can match strings and generate color tuples.\n    // from John Resig color plugin\n    // https://github.com/jquery/jquery-color/\n    stringParsers: [{\n      re: /rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*?\\)/,\n      format: 'rgb',\n      parse: function(execResult) {\n        return [\n          execResult[1],\n          execResult[2],\n          execResult[3],\n          1\n        ];\n      }\n    }, {\n      re: /rgb\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'rgb',\n      parse: function(execResult) {\n        return [\n          2.55 * execResult[1],\n          2.55 * execResult[2],\n          2.55 * execResult[3],\n          1\n        ];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function(execResult) {\n        return [\n          execResult[1],\n          execResult[2],\n          execResult[3],\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function(execResult) {\n        return [\n          2.55 * execResult[1],\n          2.55 * execResult[2],\n          2.55 * execResult[3],\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /hsl\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'hsl',\n      parse: function(execResult) {\n        return [\n          execResult[1] / 360,\n          execResult[2] / 100,\n          execResult[3] / 100,\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /hsla\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'hsla',\n      parse: function(execResult) {\n        return [\n          execResult[1] / 360,\n          execResult[2] / 100,\n          execResult[3] / 100,\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /#?([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\n      format: 'hex',\n      parse: function(execResult) {\n        return [\n          parseInt(execResult[1], 16),\n          parseInt(execResult[2], 16),\n          parseInt(execResult[3], 16),\n          1\n        ];\n      }\n    }, {\n      re: /#?([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,\n      format: 'hex',\n      parse: function(execResult) {\n        return [\n          parseInt(execResult[1] + execResult[1], 16),\n          parseInt(execResult[2] + execResult[2], 16),\n          parseInt(execResult[3] + execResult[3], 16),\n          1\n        ];\n      }\n    }],\n    colorNameToHex: function(name) {\n      if (typeof this.colors[name.toLowerCase()] !== 'undefined') {\n        return this.colors[name.toLowerCase()];\n      }\n      return false;\n    }\n  };\n\n  /*\n   * Default plugin options\n   */\n  var defaults = {\n    horizontal: false, // horizontal mode layout ?\n    inline: false, //forces to show the colorpicker as an inline element\n    color: false, //forces a color\n    format: false, //forces a format\n    input: 'input', // children input selector\n    container: false, // container selector\n    component: '.add-on, .input-group-addon', // children component selector\n    fallbackColor: false, // fallback color value. null = keeps current color.\n    fallbackFormat: 'hex', // fallback color format\n    hexNumberSignPrefix: true, // put a '#' (number sign) before hex strings\n    sliders: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setHue'\n      },\n      alpha: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setAlpha'\n      }\n    },\n    slidersHorz: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setHue',\n        callTop: false\n      },\n      alpha: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setAlpha',\n        callTop: false\n      }\n    },\n    template: '<div class=\"colorpicker dropdown-menu\">' +\n      '<div class=\"colorpicker-saturation\"><i><b></b></i></div>' +\n      '<div class=\"colorpicker-hue\"><i></i></div>' +\n      '<div class=\"colorpicker-alpha\"><i></i></div>' +\n      '<div class=\"colorpicker-color\"><div /></div>' +\n      '<div class=\"colorpicker-selectors\"></div>' +\n      '</div>',\n    align: 'right',\n    customClass: null, // custom class added to the colorpicker element\n    colorSelectors: null // custom color aliases\n  };\n\n  /**\n   * Colorpicker component class\n   *\n   * @param {Object|String} element\n   * @param {Object} options\n   * @constructor\n   */\n  var Colorpicker = function(element, options) {\n    this.element = $(element).addClass('colorpicker-element');\n    this.options = $.extend(true, {}, defaults, this.element.data(), options);\n    this.component = this.options.component;\n    this.component = (this.component !== false) ? this.element.find(this.component) : false;\n    if (this.component && (this.component.length === 0)) {\n      this.component = false;\n    }\n    this.container = (this.options.container === true) ? this.element : this.options.container;\n    this.container = (this.container !== false) ? $(this.container) : false;\n\n    // Is the element an input? Should we search inside for any input?\n    this.input = this.element.is('input') ? this.element : (this.options.input ?\n      this.element.find(this.options.input) : false);\n    if (this.input && (this.input.length === 0)) {\n      this.input = false;\n    }\n    // Set HSB color\n    this.color = this.createColor(this.options.color !== false ? this.options.color : this.getValue());\n\n    this.format = this.options.format !== false ? this.options.format : this.color.origFormat;\n\n    if (this.options.color !== false) {\n      this.updateInput(this.color);\n      this.updateData(this.color);\n    }\n\n    this.disabled = false;\n\n    // Setup picker\n    var $picker = this.picker = $(this.options.template);\n    if (this.options.customClass) {\n      $picker.addClass(this.options.customClass);\n    }\n    if (this.options.inline) {\n      $picker.addClass('colorpicker-inline colorpicker-visible');\n    } else {\n      $picker.addClass('colorpicker-hidden');\n    }\n    if (this.options.horizontal) {\n      $picker.addClass('colorpicker-horizontal');\n    }\n    if (\n      (['rgba', 'hsla', 'alias'].indexOf(this.format) !== -1) ||\n      this.options.format === false ||\n      this.getValue() === 'transparent'\n    ) {\n      $picker.addClass('colorpicker-with-alpha');\n    }\n    if (this.options.align === 'right') {\n      $picker.addClass('colorpicker-right');\n    }\n    if (this.options.inline === true) {\n      $picker.addClass('colorpicker-no-arrow');\n    }\n    if (this.options.colorSelectors) {\n      var colorpicker = this,\n        selectorsContainer = colorpicker.picker.find('.colorpicker-selectors');\n\n      if (selectorsContainer.length > 0) {\n        $.each(this.options.colorSelectors, function(name, color) {\n          var $btn = $('<i />')\n            .addClass('colorpicker-selectors-color')\n            .css('background-color', color)\n            .data('class', name).data('alias', name);\n\n          $btn.on('mousedown.colorpicker touchstart.colorpicker', function(event) {\n            event.preventDefault();\n            colorpicker.setValue(\n              colorpicker.format === 'alias' ? $(this).data('alias') : $(this).css('background-color')\n            );\n          });\n          selectorsContainer.append($btn);\n        });\n        selectorsContainer.show().addClass('colorpicker-visible');\n      }\n    }\n\n    // Prevent closing the colorpicker when clicking on itself\n    $picker.on('mousedown.colorpicker touchstart.colorpicker', $.proxy(function(e) {\n      if (e.target === e.currentTarget) {\n        e.preventDefault();\n      }\n    }, this));\n\n    // Bind click/tap events on the sliders\n    $picker.find('.colorpicker-saturation, .colorpicker-hue, .colorpicker-alpha')\n      .on('mousedown.colorpicker touchstart.colorpicker', $.proxy(this.mousedown, this));\n\n    $picker.appendTo(this.container ? this.container : $('body'));\n\n    // Bind other events\n    if (this.input !== false) {\n      this.input.on({\n        'keyup.colorpicker': $.proxy(this.keyup, this)\n      });\n      this.input.on({\n        'change.colorpicker': $.proxy(this.change, this)\n      });\n      if (this.component === false) {\n        this.element.on({\n          'focus.colorpicker': $.proxy(this.show, this)\n        });\n      }\n      if (this.options.inline === false) {\n        this.element.on({\n          'focusout.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n    }\n\n    if (this.component !== false) {\n      this.component.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    if ((this.input === false) && (this.component === false)) {\n      this.element.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    // for HTML5 input[type='color']\n    if ((this.input !== false) && (this.component !== false) && (this.input.attr('type') === 'color')) {\n\n      this.input.on({\n        'click.colorpicker': $.proxy(this.show, this),\n        'focus.colorpicker': $.proxy(this.show, this)\n      });\n    }\n    this.update();\n\n    $($.proxy(function() {\n      this.element.trigger('create');\n    }, this));\n  };\n\n  Colorpicker.Color = Color;\n\n  Colorpicker.prototype = {\n    constructor: Colorpicker,\n    destroy: function() {\n      this.picker.remove();\n      this.element.removeData('colorpicker', 'color').off('.colorpicker');\n      if (this.input !== false) {\n        this.input.off('.colorpicker');\n      }\n      if (this.component !== false) {\n        this.component.off('.colorpicker');\n      }\n      this.element.removeClass('colorpicker-element');\n      this.element.trigger({\n        type: 'destroy'\n      });\n    },\n    reposition: function() {\n      if (this.options.inline !== false || this.options.container) {\n        return false;\n      }\n      var type = this.container && this.container[0] !== window.document.body ? 'position' : 'offset';\n      var element = this.component || this.element;\n      var offset = element[type]();\n      if (this.options.align === 'right') {\n        offset.left -= this.picker.outerWidth() - element.outerWidth();\n      }\n      this.picker.css({\n        top: offset.top + element.outerHeight(),\n        left: offset.left\n      });\n    },\n    show: function(e) {\n      if (this.isDisabled()) {\n        // Don't show the widget if it's disabled (the input)\n        return;\n      }\n      this.picker.addClass('colorpicker-visible').removeClass('colorpicker-hidden');\n      this.reposition();\n      $(window).on('resize.colorpicker', $.proxy(this.reposition, this));\n      if (e && (!this.hasInput() || this.input.attr('type') === 'color')) {\n        if (e.stopPropagation && e.preventDefault) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n      if ((this.component || !this.input) && (this.options.inline === false)) {\n        $(window.document).on({\n          'mousedown.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n      this.element.trigger({\n        type: 'showPicker',\n        color: this.color\n      });\n    },\n    hide: function(e) {\n      if ((typeof e !== 'undefined') && e.target) {\n        // Prevent hide if triggered by an event and an element inside the colorpicker has been clicked/touched\n        if (\n          $(e.currentTarget).parents('.colorpicker').length > 0 ||\n          $(e.target).parents('.colorpicker').length > 0\n        ) {\n          return false;\n        }\n      }\n      this.picker.addClass('colorpicker-hidden').removeClass('colorpicker-visible');\n      $(window).off('resize.colorpicker', this.reposition);\n      $(window.document).off({\n        'mousedown.colorpicker': this.hide\n      });\n      this.update();\n      this.element.trigger({\n        type: 'hidePicker',\n        color: this.color\n      });\n    },\n    updateData: function(val) {\n      val = val || this.color.toString(false, this.format);\n      this.element.data('color', val);\n      return val;\n    },\n    updateInput: function(val) {\n      val = val || this.color.toString(false, this.format);\n      if (this.input !== false) {\n        this.input.prop('value', val);\n        this.input.trigger('change');\n      }\n      return val;\n    },\n    updatePicker: function(val) {\n      if (typeof val !== 'undefined') {\n        this.color = this.createColor(val);\n      }\n      var sl = (this.options.horizontal === false) ? this.options.sliders : this.options.slidersHorz;\n      var icns = this.picker.find('i');\n      if (icns.length === 0) {\n        return;\n      }\n      if (this.options.horizontal === false) {\n        sl = this.options.sliders;\n        icns.eq(1).css('top', sl.hue.maxTop * (1 - this.color.value.h)).end()\n          .eq(2).css('top', sl.alpha.maxTop * (1 - this.color.value.a));\n      } else {\n        sl = this.options.slidersHorz;\n        icns.eq(1).css('left', sl.hue.maxLeft * (1 - this.color.value.h)).end()\n          .eq(2).css('left', sl.alpha.maxLeft * (1 - this.color.value.a));\n      }\n      icns.eq(0).css({\n        'top': sl.saturation.maxTop - this.color.value.b * sl.saturation.maxTop,\n        'left': this.color.value.s * sl.saturation.maxLeft\n      });\n\n      this.picker.find('.colorpicker-saturation')\n        .css('backgroundColor', this.color.toHex(true, this.color.value.h, 1, 1, 1));\n\n      this.picker.find('.colorpicker-alpha')\n        .css('backgroundColor', this.color.toHex(true));\n\n      this.picker.find('.colorpicker-color, .colorpicker-color div')\n        .css('backgroundColor', this.color.toString(true, this.format));\n\n      return val;\n    },\n    updateComponent: function(val) {\n      var color;\n\n      if (typeof val !== 'undefined') {\n        color = this.createColor(val);\n      } else {\n        color = this.color;\n      }\n\n      if (this.component !== false) {\n        var icn = this.component.find('i').eq(0);\n        if (icn.length > 0) {\n          icn.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        } else {\n          this.component.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        }\n      }\n\n      return color.toString(false, this.format);\n    },\n    update: function(force) {\n      var val;\n      if ((this.getValue(false) !== false) || (force === true)) {\n        // Update input/data only if the current value is not empty\n        val = this.updateComponent();\n        this.updateInput(val);\n        this.updateData(val);\n        this.updatePicker(); // only update picker if value is not empty\n      }\n      return val;\n\n    },\n    setValue: function(val) { // set color manually\n      this.color = this.createColor(val);\n      this.update(true);\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: val\n      });\n    },\n    /**\n     * Creates a new color using the instance options\n     * @protected\n     * @param {String} val\n     * @returns {Color}\n     */\n    createColor: function(val) {\n      return new Color(\n        val ? val : null,\n        this.options.colorSelectors,\n        this.options.fallbackColor ? this.options.fallbackColor : this.color,\n        this.options.fallbackFormat,\n        this.options.hexNumberSignPrefix\n      );\n    },\n    getValue: function(defaultValue) {\n      defaultValue = (typeof defaultValue === 'undefined') ? this.options.fallbackColor : defaultValue;\n      var val;\n      if (this.hasInput()) {\n        val = this.input.val();\n      } else {\n        val = this.element.data('color');\n      }\n      if ((val === undefined) || (val === '') || (val === null)) {\n        // if not defined or empty, return default\n        val = defaultValue;\n      }\n      return val;\n    },\n    hasInput: function() {\n      return (this.input !== false);\n    },\n    isDisabled: function() {\n      return this.disabled;\n    },\n    disable: function() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', true);\n      }\n      this.disabled = true;\n      this.element.trigger({\n        type: 'disable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    enable: function() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', false);\n      }\n      this.disabled = false;\n      this.element.trigger({\n        type: 'enable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    currentSlider: null,\n    mousePointer: {\n      left: 0,\n      top: 0\n    },\n    mousedown: function(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n\n      var target = $(e.target);\n\n      //detect the slider and set the limits and callbacks\n      var zone = target.closest('div');\n      var sl = this.options.horizontal ? this.options.slidersHorz : this.options.sliders;\n      if (!zone.is('.colorpicker')) {\n        if (zone.is('.colorpicker-saturation')) {\n          this.currentSlider = $.extend({}, sl.saturation);\n        } else if (zone.is('.colorpicker-hue')) {\n          this.currentSlider = $.extend({}, sl.hue);\n        } else if (zone.is('.colorpicker-alpha')) {\n          this.currentSlider = $.extend({}, sl.alpha);\n        } else {\n          return false;\n        }\n        var offset = zone.offset();\n        //reference to guide's style\n        this.currentSlider.guide = zone.find('i')[0].style;\n        this.currentSlider.left = e.pageX - offset.left;\n        this.currentSlider.top = e.pageY - offset.top;\n        this.mousePointer = {\n          left: e.pageX,\n          top: e.pageY\n        };\n        //trigger mousemove to move the guide to the current position\n        $(window.document).on({\n          'mousemove.colorpicker': $.proxy(this.mousemove, this),\n          'touchmove.colorpicker': $.proxy(this.mousemove, this),\n          'mouseup.colorpicker': $.proxy(this.mouseup, this),\n          'touchend.colorpicker': $.proxy(this.mouseup, this)\n        }).trigger('mousemove');\n      }\n      return false;\n    },\n    mousemove: function(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      var left = Math.max(\n        0,\n        Math.min(\n          this.currentSlider.maxLeft,\n          this.currentSlider.left + ((e.pageX || this.mousePointer.left) - this.mousePointer.left)\n        )\n      );\n      var top = Math.max(\n        0,\n        Math.min(\n          this.currentSlider.maxTop,\n          this.currentSlider.top + ((e.pageY || this.mousePointer.top) - this.mousePointer.top)\n        )\n      );\n      this.currentSlider.guide.left = left + 'px';\n      this.currentSlider.guide.top = top + 'px';\n      if (this.currentSlider.callLeft) {\n        this.color[this.currentSlider.callLeft].call(this.color, left / this.currentSlider.maxLeft);\n      }\n      if (this.currentSlider.callTop) {\n        this.color[this.currentSlider.callTop].call(this.color, top / this.currentSlider.maxTop);\n      }\n      // Change format dynamically\n      // Only occurs if user choose the dynamic format by\n      // setting option format to false\n      if (\n        this.options.format === false &&\n        (this.currentSlider.callTop === 'setAlpha' ||\n          this.currentSlider.callLeft === 'setAlpha')\n      ) {\n\n        // Converting from hex / rgb to rgba\n        if (this.color.value.a !== 1) {\n          this.format = 'rgba';\n          this.color.origFormat = 'rgba';\n        }\n\n        // Converting from rgba to hex\n        else {\n          this.format = 'hex';\n          this.color.origFormat = 'hex';\n        }\n      }\n      this.update(true);\n\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color\n      });\n      return false;\n    },\n    mouseup: function(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      $(window.document).off({\n        'mousemove.colorpicker': this.mousemove,\n        'touchmove.colorpicker': this.mousemove,\n        'mouseup.colorpicker': this.mouseup,\n        'touchend.colorpicker': this.mouseup\n      });\n      return false;\n    },\n    change: function(e) {\n      this.keyup(e);\n    },\n    keyup: function(e) {\n      if ((e.keyCode === 38)) {\n        if (this.color.value.a < 1) {\n          this.color.value.a = Math.round((this.color.value.a + 0.01) * 100) / 100;\n        }\n        this.update(true);\n      } else if ((e.keyCode === 40)) {\n        if (this.color.value.a > 0) {\n          this.color.value.a = Math.round((this.color.value.a - 0.01) * 100) / 100;\n        }\n        this.update(true);\n      } else {\n        this.color = this.createColor(this.input.val());\n        // Change format dynamically\n        // Only occurs if user choose the dynamic format by\n        // setting option format to false\n        if (this.color.origFormat && this.options.format === false) {\n          this.format = this.color.origFormat;\n        }\n        if (this.getValue(false) !== false) {\n          this.updateData();\n          this.updateComponent();\n          this.updatePicker();\n        }\n      }\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: this.input.val()\n      });\n    }\n  };\n\n  $.colorpicker = Colorpicker;\n\n  $.fn.colorpicker = function(option) {\n    var apiArgs = Array.prototype.slice.call(arguments, 1),\n      isSingleElement = (this.length === 1),\n      returnValue = null;\n\n    var $jq = this.each(function() {\n      var $this = $(this),\n        inst = $this.data('colorpicker'),\n        options = ((typeof option === 'object') ? option : {});\n\n      if (!inst) {\n        inst = new Colorpicker(this, options);\n        $this.data('colorpicker', inst);\n      }\n\n      if (typeof option === 'string') {\n        if ($.isFunction(inst[option])) {\n          returnValue = inst[option].apply(inst, apiArgs);\n        } else { // its a property ?\n          if (apiArgs.length) {\n            // set property\n            inst[option] = apiArgs[0];\n          }\n          returnValue = inst[option];\n        }\n      } else {\n        returnValue = $this;\n      }\n    });\n    return isSingleElement ? returnValue : $jq;\n  };\n\n  $.fn.colorpicker.constructor = Colorpicker;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js\n");

/***/ }),

/***/ "./node_modules/mattermost-redux/actions/timezone.js":
/*!***********************************************************!*\
  !*** ./node_modules/mattermost-redux/actions/timezone.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.autoUpdateTimezone = autoUpdateTimezone;\n\nvar _users = __webpack_require__(/*! ../selectors/entities/users */ \"./node_modules/mattermost-redux/selectors/entities/users.js\");\n\nvar _timezone = __webpack_require__(/*! ../selectors/entities/timezone */ \"./node_modules/mattermost-redux/selectors/entities/timezone.js\");\n\nvar _users2 = __webpack_require__(/*! ./users */ \"./node_modules/mattermost-redux/actions/users.js\");\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n\nfunction autoUpdateTimezone(deviceTimezone) {\n    var _this = this;\n\n    return function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {\n            var currentUer, currentTimezone, newTimezoneExists, timezone, updatedUser;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                    switch (_context.prev = _context.next) {\n                        case 0:\n                            currentUer = (0, _users.getCurrentUser)(getState());\n                            currentTimezone = (0, _timezone.getUserTimezone)(getState(), currentUer.id);\n                            newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n\n                            if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n                                timezone = {\n                                    useAutomaticTimezone: 'true',\n                                    automaticTimezone: deviceTimezone,\n                                    manualTimezone: currentTimezone.manualTimezone\n                                };\n                                updatedUser = _extends({}, currentUer, {\n                                    timezone: timezone\n                                });\n\n\n                                (0, _users2.updateMe)(updatedUser)(dispatch, getState);\n                            }\n\n                        case 4:\n                        case 'end':\n                            return _context.stop();\n                    }\n                }\n            }, _callee, _this);\n        }));\n\n        return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWF0dGVybW9zdC1yZWR1eC9hY3Rpb25zL3RpbWV6b25lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdHRlcm1vc3QtcmVkdXgvYWN0aW9ucy90aW1lem9uZS5qcz8xYjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmF1dG9VcGRhdGVUaW1lem9uZSA9IGF1dG9VcGRhdGVUaW1lem9uZTtcblxudmFyIF91c2VycyA9IHJlcXVpcmUoJy4uL3NlbGVjdG9ycy9lbnRpdGllcy91c2VycycpO1xuXG52YXIgX3RpbWV6b25lID0gcmVxdWlyZSgnLi4vc2VsZWN0b3JzL2VudGl0aWVzL3RpbWV6b25lJyk7XG5cbnZhciBfdXNlcnMyID0gcmVxdWlyZSgnLi91c2VycycpO1xuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgZnVuY3Rpb24gc3RlcChrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgeyBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgc3RlcChcInRocm93XCIsIGVycik7IH0pOyB9IH0gcmV0dXJuIHN0ZXAoXCJuZXh0XCIpOyB9KTsgfTsgfSAvLyBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCBNYXR0ZXJtb3N0LCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTZWUgTElDRU5TRS50eHQgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cblxuZnVuY3Rpb24gYXV0b1VwZGF0ZVRpbWV6b25lKGRldmljZVRpbWV6b25lKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRVZXIsIGN1cnJlbnRUaW1lem9uZSwgbmV3VGltZXpvbmVFeGlzdHMsIHRpbWV6b25lLCB1cGRhdGVkVXNlcjtcbiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VWVyID0gKDAsIF91c2Vycy5nZXRDdXJyZW50VXNlcikoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRpbWV6b25lID0gKDAsIF90aW1lem9uZS5nZXRVc2VyVGltZXpvbmUpKGdldFN0YXRlKCksIGN1cnJlbnRVZXIuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RpbWV6b25lRXhpc3RzID0gY3VycmVudFRpbWV6b25lLmF1dG9tYXRpY1RpbWV6b25lICE9PSBkZXZpY2VUaW1lem9uZTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lem9uZS51c2VBdXRvbWF0aWNUaW1lem9uZSAmJiBuZXdUaW1lem9uZUV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lem9uZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZUF1dG9tYXRpY1RpbWV6b25lOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvbWF0aWNUaW1lem9uZTogZGV2aWNlVGltZXpvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51YWxUaW1lem9uZTogY3VycmVudFRpbWV6b25lLm1hbnVhbFRpbWV6b25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRVc2VyID0gX2V4dGVuZHMoe30sIGN1cnJlbnRVZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lem9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXNlcnMyLnVwZGF0ZU1lKSh1cGRhdGVkVXNlcikoZGlzcGF0Y2gsIGdldFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIF9jYWxsZWUsIF90aGlzKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gsIF94Mikge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICB9KCk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mattermost-redux/actions/timezone.js\n");

/***/ })

}]);