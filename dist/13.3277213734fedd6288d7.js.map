{"version":3,"sources":["webpack:///./images/status_green.png","webpack:///./images/status_yellow.png","webpack:///./components/admin_console/admin_settings.jsx","webpack:///./components/admin_console/set_by_env.jsx","webpack:///./components/admin_console/setting.jsx","webpack:///./components/admin_console/boolean_setting.jsx","webpack:///./components/admin_console/cluster_table.jsx","webpack:///./components/admin_console/cluster_table_container.jsx","webpack:///./components/admin_console/settings_group.jsx","webpack:///./components/admin_console/text_setting.jsx","webpack:///./components/admin_console/cluster_settings.jsx","webpack:///./components/admin_console/dropdown_setting.jsx","webpack:///./actions/job_actions.jsx","webpack:///./components/admin_console/jobs/table.jsx","webpack:///./components/admin_console/jobs/index.jsx","webpack:///./components/admin_console/data_retention_settings.jsx","webpack:///./components/admin_console/request_button/request_button.jsx","webpack:///./components/admin_console/database_settings.jsx","webpack:///./components/admin_console/elasticsearch_settings.jsx","webpack:///./components/admin_console/email_connection_test/email_connection_test.jsx","webpack:///./components/admin_console/email_connection_test/index.js","webpack:///./components/admin_console/admin_definition_constants.jsx","webpack:///./components/admin_console/connection_security_dropdown_setting.jsx","webpack:///./components/admin_console/email_settings.jsx","webpack:///./components/admin_console/radio_setting.jsx","webpack:///./components/admin_console/message_export_settings.jsx","webpack:///./components/admin_console/password_settings.jsx","webpack:///./components/admin_console/multiselect_settings.jsx","webpack:///./components/admin_console/color_setting.jsx","webpack:///./components/admin_console/generated_setting.jsx","webpack:///./components/admin_console/user_autocomplete_setting.jsx","webpack:///./components/admin_console/file_upload_setting.jsx","webpack:///./components/admin_console/remove_file_setting.jsx","webpack:///./components/admin_console/schema_admin_settings.jsx","webpack:///./components/admin_console/push_settings.jsx","webpack:///./components/discard_changes_modal.jsx","webpack:///./components/admin_console/admin_sidebar_category.jsx","webpack:///./components/admin_console/blockable_link/blockable_link.jsx","webpack:///./components/admin_console/blockable_link/index.js","webpack:///./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/index.js","webpack:///./components/admin_console/admin_sidebar_header/admin_sidebar_header.jsx","webpack:///./components/admin_console/admin_sidebar_header/index.js","webpack:///./components/admin_console/admin_sidebar_section.jsx","webpack:///./components/admin_console/admin_sidebar/admin_sidebar.jsx","webpack:///./components/admin_console/admin_sidebar/index.js","webpack:///./components/analytics/doughnut_chart.jsx","webpack:///./components/analytics/line_chart.jsx","webpack:///./components/analytics/statistic_count.jsx","webpack:///./components/analytics/format.jsx","webpack:///./components/analytics/system_analytics/system_analytics.jsx","webpack:///./components/analytics/system_analytics/index.js","webpack:///./components/admin_console/banner.jsx","webpack:///./components/analytics/table_chart.jsx","webpack:///./components/analytics/team_analytics/team_analytics.jsx","webpack:///./components/analytics/team_analytics/index.js","webpack:///./components/admin_console/plugin_management/plugin_management.jsx","webpack:///./components/admin_console/plugin_management/index.js","webpack:///./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx","webpack:///./components/admin_console/custom_plugin_settings/index.js","webpack:///./components/admin_console/compliance_reports/compliance_reports.jsx","webpack:///./components/admin_console/compliance_reports/index.js","webpack:///./components/admin_console/audits/audits.jsx","webpack:///./components/admin_console/audits/index.js","webpack:///./components/admin_console/custom_url_schemes_setting.jsx","webpack:///./components/admin_console/license_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/index.jsx","webpack:///./components/svg/accordion_toggle_icon.jsx","webpack:///./components/svg/checkbox_checked_icon.jsx","webpack:///./components/svg/checkbox_partial_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_checkbox.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_description.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_row.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_group.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/permissions_tree.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx","webpack:///./components/team_info.jsx","webpack:///./components/team_selector_modal/team_selector_modal.jsx","webpack:///./components/team_selector_modal/index.js","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx","webpack:///./components/admin_console/manage_roles_modal/manage_roles_modal.jsx","webpack:///./components/admin_console/manage_roles_modal/index.js","webpack:///./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx","webpack:///./components/admin_console/manage_teams_modal/remove_from_team_button.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/index.jsx","webpack:///./components/admin_console/revoke_token_button/revoke_token_button.jsx","webpack:///./components/admin_console/revoke_token_button/index.js","webpack:///./components/admin_console/manage_tokens_modal/manage_tokens_modal.jsx","webpack:///./components/admin_console/manage_tokens_modal/index.js","webpack:///./components/admin_console/reset_password_modal/reset_password_modal.jsx","webpack:///./components/admin_console/reset_password_modal/index.js","webpack:///./components/admin_console/reset_email_modal/reset_email_modal.jsx","webpack:///./components/user_list_row_with_error/user_list_row_with_error.jsx","webpack:///./components/user_list_row_with_error/index.js","webpack:///./components/admin_console/system_users/system_users_dropdown/system_users_dropdown.jsx","webpack:///./components/admin_console/system_users/system_users_dropdown/index.js","webpack:///./components/admin_console/system_users/list/system_users_list.jsx","webpack:///./components/admin_console/system_users/list/selectors.jsx","webpack:///./components/admin_console/system_users/list/index.js","webpack:///./components/admin_console/system_users/system_users.jsx","webpack:///./components/admin_console/system_users/index.js","webpack:///./components/admin_console/server_logs/log_list.jsx","webpack:///./components/admin_console/server_logs/logs.jsx","webpack:///./components/admin_console/server_logs/index.js","webpack:///./components/admin_console/brand_image_setting/upload_button.jsx","webpack:///./components/admin_console/brand_image_setting/brand_image_setting.jsx","webpack:///./components/admin_console/admin_definition.jsx","webpack:///./components/admin_console/admin_console.jsx","webpack:///./components/admin_console/index.js","webpack:///./utils/policy_roles_adapter.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js"],"names":["module","exports","__webpack_require__","p","AdminSettings","props","_this","_classCallCheck","this","_defineProperty","_assertThisInitialized","_possibleConstructorReturn","_getPrototypeOf","call","setState","errorTooltip","e","elm","currentTarget","querySelector","isElipsis","offsetWidth","scrollWidth","id","value","saveNeeded","setNavigationBlocked","preventDefault","doSubmit","callback","saving","serverError","config","JSON","parse","stringify","getConfigFromState","saveConfig","savedConfig","getStateFromConfig","handleSaved","err","message","serverErrorId","str","defaultValue","n","parseInt","isNaN","path","Boolean","getConfigValue","environmentConfig","state","Object","assign","React","Component","split","reduce","obj","pathPart","setValue","pathParts","part","length","slice","react_default","a","createElement","className","renderTitle","role","onSubmit","handleSubmit","renderSettings","save_button","disabled","canSave","onClick","savingMessage","localizeMessage","ref","onMouseOver","openTooltip","onMouseOut","closeTooltip","form_error","error","Overlay","show","delayShow","Constants","OVERLAY_TIME_DELAY","placement","target","refs","errorMessage","Tooltip","PropTypes","object","func","set_by_env","index_es","defaultMessage","Settings","PureComponent","_this$props","children","setByEnv","helpText","inputId","label","htmlFor","string","node","isRequired","bool","BooleanSetting","boolean_setting_classCallCheck","boolean_setting_possibleConstructorReturn","boolean_setting_getPrototypeOf","handleChange","bind","boolean_setting_assertThisInitialized","onChange","disabledText","setting_Settings","name","type","Utils","checked","trueText","falseText","ClusterTable","versionMismatch","src","statusGreen","configMismatch","version","configHash","singleItem","clusterInfos","config_hash","map","clusterInfo","statusYellow","items","status","hostname","key","ipaddress","style","clusterCell","clusterTable","reload","title","array","margin","marginBottom","whiteSpace","ClusterTableContainer","cluster_table_container_classCallCheck","cluster_table_container_possibleConstructorReturn","cluster_table_container_getPrototypeOf","load","cluster_table_container_assertThisInitialized","interval","_this2","getClusterStatus","data","setInterval","clearInterval","loading_screen","cluster_table_ClusterTable","SettingsGroup","header","TextSetting","input","placeholder","maxLength","rows","oneOfType","number","oneOf","ClusterSettings","cluster_settings_classCallCheck","cluster_settings_possibleConstructorReturn","cluster_settings_getPrototypeOf","cluster_settings_assertThisInitialized","overrideHandleChange","Enable","ClusterName","OverrideHostname","UseIpAddress","UseExperimentalGossip","ReadOnlyConfig","GossipPort","parseIntNonZero","StreamingPort","settings","showWarning","license","IsLicensed","Cluster","configLoadedFromCluster","Client4","clusterId","formatted_markdown_message","values","warning","clusterTableContainer","cluster_table_container_ClusterTableContainer","settings_group_SettingsGroup","boolean_setting_BooleanSetting","isSetByEnv","text_setting_TextSetting","DropdownSetting","options","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_step$value","text","push","return","isDisabled","dispatch","store","getState","_callee","job","success","_ref","regeneratorRuntime","wrap","_context","prev","JobsActions","sent","_objectSpread","server_error_id","stop","_callee2","jobId","_ref2","_context2","JobTable","table_classCallCheck","table_defineProperty","table_assertThisInitialized","table_possibleConstructorReturn","table_getPrototypeOf","JobStatuses","PENDING","IN_PROGRESS","SUCCESS","ERROR","CANCEL_REQUESTED","CANCELED","getExtraInfoText","millis","last_activity_at","start_at","runningMillis","Date","now","lastActivity","intl","formatDate","year","month","day","formatTime","hour","minute","second","seconds","Math","round","minutes","date","loading","actions","getJobsByType","jobType","then","_x4","_x5","_x6","_cancelJob","apply","arguments","cancelJob","getAttribute","ErrorStore","storeLastError","emitChange","_x","_x2","_x3","_createJob","createJob","cancelButton","data-job-id","handleCancelJob","_this3","jobs","width","getCancelButton","getStatus","getFinishAt","getRunLength","colSpan","handleCreateJob","createJobButtonText","createJobHelpText","intlShape","arrayOf","shape","element","injectIntl","connect","ownProps","Selectors","bindActionCreators","Table","DataRetentionSettings","data_retention_settings_classCallCheck","data_retention_settings_defineProperty","data_retention_settings_assertThisInitialized","data_retention_settings_possibleConstructorReturn","data_retention_settings_getPrototypeOf","showConfirmModal","renderConfirmModal","EnableMessageDeletion","enableMessageDeletion","EnableFileDeletion","enableFileDeletion","MessageRetentionDays","messageRetentionDays","FileRetentionDays","fileRetentionDays","DeletionJobStartTime","deletionJobStartTime","String","messageList","days","item","index","confirmButton","confirm_modal","confirmButtonText","onConfirm","handleSaveConfirmed","onCancel","handleSaveCanceled","enableMessageDeletionOptions","enableFileDeletionOptions","messageRetentionDaysSetting","fileRetentionDaysSetting","confirmModal","documentationLink","href","rel","dropdown_setting_DropdownSetting","admin_console_jobs","JobTypes","DATA_RETENTION","RequestButton","request_button_classCallCheck","request_button_possibleConstructorReturn","request_button_getPrototypeOf","handleRequest","request_button_assertThisInitialized","busy","fail","doRequest","requestAction","errMsg","includeDetailedError","detailed_error","saveConfigAction","showSuccessMessage","successMessage","contents","loadingText","buttonText","widgetClassNames","alternativeActionElement","t","DatabaseSettings","database_settings_classCallCheck","database_settings_possibleConstructorReturn","database_settings_getPrototypeOf","database_settings_assertThisInitialized","SqlSettings","MaxIdleConns","maxIdleConns","MaxOpenConns","maxOpenConns","Trace","trace","QueryTimeout","queryTimeout","ConnMaxLifetimeMilliseconds","parseIntNonNegative","connMaxLifetimeMilliseconds","driverName","DriverName","dataSource","DataSource","substring","indexOf","recycleDbButton","request_button_RequestButton","recycleDatabaseConnection","featureName","reloadConfiguration","ElasticsearchSettings","elasticsearch_settings_classCallCheck","elasticsearch_settings_possibleConstructorReturn","elasticsearch_settings_getPrototypeOf","elasticsearch_settings_assertThisInitialized","doTestConfig","handleSettingChanged","ConnectionUrl","connectionUrl","Username","username","Password","password","Sniff","sniff","EnableIndexing","enableIndexing","EnableSearching","enableSearching","configTested","canPurgeAndIndex","elasticsearchTest","percent","Number","progress","ELASTICSEARCH_POST_INDEXING","getExtraInfo","elasticsearchPurgeIndexes","EmailConnectionTestButton","email_connection_test_classCallCheck","email_connection_test_defineProperty","email_connection_test_assertThisInitialized","email_connection_test_possibleConstructorReturn","email_connection_test_getPrototypeOf","testing","testEmail","testMessage","handleTestConnection","SECTION_NONE","SECTION_TLS","SECTION_STARTTLS","CONNECTION_SECURITY_HELP_TEXT_EMAIL","cellPadding","CONNECTION_SECURITY_HELP_TEXT_LDAP","CONNECTION_SECURITY_HELP_TEXT_WEBSERVER","WEBSERVER_MODE_HELP_TEXT","LOG_LEVEL_OPTIONS","display_name","display_name_default","ConnectionSecurityDropdownSettingEmail","defaultProps","propTypes","EmailSettings","email_settings_classCallCheck","email_settings_possibleConstructorReturn","email_settings_getPrototypeOf","email_settings_assertThisInitialized","SendEmailNotifications","sendEmailNotifications","EnablePreviewModeBanner","enablePreviewModeBanner","FeedbackName","feedbackName","FeedbackEmail","feedbackEmail","FeedbackOrganization","feedbackOrganization","EnableSMTPAuth","enableSMTPAuth","SMTPUsername","smtpUsername","SMTPPassword","smtpPassword","SMTPServer","smtpServer","SMTPPort","smtpPort","ConnectionSecurity","connectionSecurity","EnableEmailBatching","enableEmailBatching","ServiceSettings","EnableSecurityFixAlert","enableSecurityFixAlert","SkipServerCertificateVerification","skipServerCertificateVerification","EmailNotificationContentsType","emailNotificationContentsType","newConfig","clearError","AnnouncementBarMessages","PREVIEW_MODE","enableEmailBatchingDisabledText","SiteURL","emailNotificationContentsTypeDropdown","emailNotificationContentsHelpText","EmailNotificationContents","emailNotificationContentsTypes","email_connection_test","RadioSetting","radio_setting_classCallCheck","radio_setting_possibleConstructorReturn","radio_setting_getPrototypeOf","radio_setting_assertThisInitialized","exportFormats","MessageExportSettings","message_export_settings_classCallCheck","message_export_settings_defineProperty","message_export_settings_assertThisInitialized","message_export_settings_possibleConstructorReturn","message_export_settings_getPrototypeOf","messages_exported","count","EnableExport","enableComplianceExport","ExportFormat","exportFormat","DailyRunTime","exportJobStartTime","GlobalRelaySettings","CustomerType","globalRelayCustomerType","SmtpUsername","globalRelaySmtpUsername","SmtpPassword","globalRelaySmtpPassword","EmailAddress","globalRelayEmailAddress","globalRelaySettings","exportFormatOptions","radio_setting_RadioSetting","globalRelayEmail","dropdownHelpText","siteURL","getSiteURL","MESSAGE_EXPORT","getJobDetails","PasswordSettings","password_settings_classCallCheck","password_settings_possibleConstructorReturn","password_settings_getPrototypeOf","password_settings_assertThisInitialized","getSampleErrorMsg","handlePasswordLengthChange","handleCheckboxChange","passwordMinimumLength","MinimumLength","passwordLowercase","Lowercase","passwordNumber","passwordUppercase","Uppercase","passwordSymbol","maximumLoginAttempts","MaximumLoginAttempts","sampleErrorMsgId","sampleErrorMsg","default","min","MIN_PASSWORD_LENGTH","max","MAX_PASSWORD_LENGTH","lowercase","uppercase","symbol","minLength","defaultChecked","MultiSelectSetting","multiselect_settings_classCallCheck","multiselect_settings_possibleConstructorReturn","multiselect_settings_getPrototypeOf","multiselect_settings_assertThisInitialized","newValue","selected","mustBePresent","join","notPresent","newProps","react_select_esm","multi","labelKey","joinValues","clearable","noResultsText","noResultText","errorText","ColorSetting","color_setting_classCallCheck","color_setting_defineProperty","color_setting_assertThisInitialized","color_setting_possibleConstructorReturn","color_setting_getPrototypeOf","color","hex","showPicker","closest","getPickerClass","replace","document","addEventListener","closePicker","removeEventListener","picker","lib","onTextInput","togglePicker","backgroundColor","GeneratedSetting","generated_setting_classCallCheck","generated_setting_possibleConstructorReturn","generated_setting_getPrototypeOf","regenerate","generated_setting_assertThisInitialized","regenerateText","regenerateHelpText","crypto","randomBytes","toString","UserAutocompleteSetting","user_autocomplete_setting_classCallCheck","user_autocomplete_setting_defineProperty","user_autocomplete_setting_assertThisInitialized","user_autocomplete_setting_possibleConstructorReturn","user_autocomplete_setting_getPrototypeOf","user","userSuggestionProviders","GenericUserProvider","suggestion_box","onItemSelected","handleUserSelected","listComponent","SuggestionList","listStyle","providers","requiredCharacters","openOnFocus","FileUploadSetting","file_upload_setting_classCallCheck","file_upload_setting_defineProperty","file_upload_setting_assertThisInitialized","file_upload_setting_possibleConstructorReturn","file_upload_setting_getPrototypeOf","files","fileInput","fileSelected","fileName","$","upload_button","button","Setting","uploadingText","fileType","btnClass","accept","data-loading-text","concat","RemoveFileSetting","remove_button","handleRemove","removingText","removeButtonText","SchemaAdminSettings","_this$buildSettingFun","schema_admin_settings_classCallCheck","schema_admin_settings_defineProperty","schema_admin_settings_assertThisInitialized","schema_admin_settings_possibleConstructorReturn","schema_admin_settings_getPrototypeOf","schema_admin_settings_asyncToGenerator","mark","rolesBinding","updatedRoles","schema","acc","val","SettingsTypes","TYPE_PERMISSION","permissions_mapping_name","rolesFromMapping","roles","Promise","all","editRole","t0","abrupt","translate","setting","label_markdown","label_values","label_default","help_text","disabled_help_text","isMarkdown","disabled_help_text_markdown","helpTextValues","disabled_help_text_values","helpTextDefault","disabled_help_text_default","help_text_markdown","help_text_values","help_text_default","isHidden","action","renderHelpText","loading_default","renderLabel","success_message","error_message","error_message_default","success_message_default","inputType","TYPE_NUMBER","TYPE_LONG_TEXT","dynamic_value","placeholder_default","max_length","color_setting_ColorSetting","handlePermissionChange","o","selectedValue","selectedOptionForHelpText","option","locales","I18n","keys","l","order","sort","b","multiple","no_result","no_result_default","not_present","not_present_default","multiselect_settings_MultiSelectSetting","changedId","banner_type","renderBanner","generated_setting_GeneratedSetting","regenerate_help_text","handleGeneratedChange","s","user_autocomplete_setting_UserAutocompleteSetting","job_type","render_job","remove_file_setting_RemoveFileSetting","remove_help_text","remove_help_text_default","remove_button_text","remove_button_text_default","removing_text","removing_text_default","remove_action","_this$setState3","_this$setState4","file_upload_setting_FileUploadSetting","uploading_text","uploading_text_default","file","upload_action","_this$setState5","idpCertificateFileError","CustomComponent","component","footer","settingsList","forEach","buildSettingFunctions","isPlugin","schema_admin_settings_objectSpread","toLowerCase","dangerouslySetInnerHTML","__html","formatText","mentionHighlight","TYPE_TEXT","buildTextSetting","TYPE_COLOR","buildColorSetting","TYPE_BOOL","buildBoolSetting","buildPermissionSetting","TYPE_DROPDOWN","buildDropdownSetting","TYPE_RADIO","buildRadioSetting","TYPE_BANNER","buildBannerSetting","TYPE_GENERATED","buildGeneratedSetting","TYPE_USERNAME","buildUsernameSetting","TYPE_BUTTON","buildButtonSetting","TYPE_LANGUAGE","buildLanguageSetting","TYPE_JOBSTABLE","buildJobsTableSetting","TYPE_FILE_UPLOAD","buildFileUploadSetting","TYPE_CUSTOM","buildCustomSetting","getSettingValue","previousValue","onConfigSave","setConfigValue","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","prevSchemaId","onConfigLoad","mappingValueFromRoles","PushSettings","push_settings_classCallCheck","push_settings_defineProperty","push_settings_assertThisInitialized","push_settings_possibleConstructorReturn","push_settings_getPrototypeOf","handleAgreeChange","handleDropdownChange","pushNotificationServerType","agree","pushNotificationServer","MHPNS","MTPNS","SendPushNotifications","PushNotificationServer","trim","PushNotificationContents","pushNotificationContents","pushNotificationServerTypes","tosCheckbox","sendHelpText","pushServerHelpText","isPushNotificationServerSetByEnv","DiscardChangesModal","modalClass","confirmButtonClass","AdminSidebarCategory","link","parentLink","icon","NavLink","to","activeClassName","clonedChildren","Route","render","sectionClass","Children","child","cloneElement","router","BlockableLink","blocked","deferNavigation","browserHistory","blockable_link_objectSpread","Reflect","deleteProperty","handleClick","getNavigationBlocked","AdminNavbarDropdown","admin_navbar_dropdown_classCallCheck","admin_navbar_dropdown_defineProperty","admin_navbar_dropdown_assertThisInitialized","admin_navbar_dropdown_possibleConstructorReturn","admin_navbar_dropdown_getPrototypeOf","showAboutModal","navigationBlocked","GlobalActions","ReactDOM","findDOMNode","dropdown","on","blockToggle","setTimeout","off","switchTeams","locale","teams","teamToRender","teamsArray","filterAndSortTeamsByDisplayName","team","blockable_link","DEFAULT_CHANNEL","data-toggle","aria-expanded","menu_icon","handleAboutModal","handleLogout","about_build_modal","onModalDismissed","aboutModalDismissed","getCurrentLocale","getMyTeams","SidebarHeader","find","me","currentUser","profilePicture","last_picture_update","getProfilePictureUrl","toggleDropdown","admin_navbar_dropdown","getCurrentUser","AdminSidebarHeader","AdminSidebarSection","getLink","subsection","sidebarItem","AdminSidebar","currentSiteName","siteName","PluginSettings","getPlugins","updateTitle","perfectScrollbar","suppressScrollX","oauthSettings","ldapSettings","samlSettings","clusterSettings","metricsSettings","complianceSettings","mfaSettings","messageExportSettings","complianceSection","audits","announcement","buildEnterpriseReady","admin_sidebar_section_AdminSidebarSection","LDAP","Metrics","SAML","Compliance","MFA","MessageExport","otherCategory","admin_sidebar_category_AdminSidebarCategory","elasticSearchSettings","Elasticsearch","dataRetentionSettings","DataRetention","clientVersions","customPlugins","plugins","settings_schema","admin_sidebar_header","CustomPermissionsSchemes","getLicense","getConfig","BuildEnterpriseReady","SiteName","entities","admin","pure","DoughnutChart","update","canvas","ctx","getContext","chart","Chart","initChart","prevProps","destroy","content","height","LineChart","legend","display","chartOptions","nextProps","willHaveData","labels","hasChart","hasData","StatisticCount","formatPostsPerDayData","chartData","datasets","fillColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","row","formatUsersWithPostsPerDayData","StatTypes","SystemAnalytics","system_analytics_classCallCheck","system_analytics_defineProperty","system_analytics_assertThisInitialized","system_analytics_possibleConstructorReturn","system_analytics_getPrototypeOf","stats","AnalyticsStore","getAllSystem","addChangeListener","AdminActions","isLicensed","removeChangeListener","nextState","banner","postCount","postTotalGraph","activeUserGraph","advancedStats","advancedGraphs","sessionCount","commandCount","incomingCount","outgoingCount","skippedIntensiveQueries","TOTAL_POSTS","postCountsDay","POST_PER_DAY","userCountsWithPostsDay","USERS_WITH_POSTS_PER_DAY","statistic_count_StatisticCount","line_chart_LineChart","TOTAL_SESSIONS","TOTAL_COMMANDS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","postTypeGraph","channelTypeData","totalPublic","totalPrivate","hoverBackgroundColor","formatChannelDoughtnutData","TOTAL_PUBLIC_CHANNELS","TOTAL_PRIVATE_GROUPS","postTypeData","filePosts","hashtagPosts","totalPosts","formatPostDoughtnutData","TOTAL_FILE_POSTS","TOTAL_HASHTAG_POSTS","doughnut_chart_DoughnutChart","firstRow","secondRow","userCount","TOTAL_USERS","teamCount","TOTAL_TEAMS","channelCount","dailyActiveUsers","DAILY_ACTIVE_USERS","monthlyActiveUsers","MONTHLY_ACTIVE_USERS","thirdRow","Banner","description","TableChart","tooltip","tip","OverlayTrigger","trigger","overlay","LAST_ANALYTICS_TEAM","TeamAnalytics","team_analytics_classCallCheck","team_analytics_defineProperty","team_analytics_assertThisInitialized","team_analytics_possibleConstructorReturn","team_analytics_getPrototypeOf","team_analytics_asyncToGenerator","recentlyActiveUsers","_ref3","newUsers","getProfilesInTeam","General","PROFILE_CHUNK_SIZE","teamId","getAllTeam","BrowserStore","setGlobalItem","initialTeam","getData","getTeams","totalPostsCount","userActiveGraph","recentActiveUsers","getMonthLong","hour12","email","formatRecentUsersData","newlyCreatedUsers","create_at","formatNewUsersData","aName","toUpperCase","bName","handleTeamChange","table_chart_TableChart","getTeamsList","getGlobalItem","PluginItemState","PluginState","PLUGIN_STATE_NOT_RUNNING","PLUGIN_STATE_STARTING","PLUGIN_STATE_RUNNING","PLUGIN_STATE_FAILED_TO_START","PLUGIN_STATE_FAILED_TO_STAY_RUNNING","PLUGIN_STATE_STOPPING","PluginItemStateDescription","PluginItem","activateButton","pluginStatus","removing","handleEnable","handleDisable","showInstances","hasSettings","activating","deactivating","active","data-plugin-id","removeButton","prepackagedLabel","settingsButton","Link","is_prepackaged","notices","instances","some","instance","plugin_management_PluginItemStateDescription","clusterSummary","cluster_id","plugin_management_PluginItemState","PluginManagement","plugin_management_classCallCheck","plugin_management_defineProperty","plugin_management_assertThisInitialized","plugin_management_possibleConstructorReturn","plugin_management_getPrototypeOf","_ref4","plugin_management_asyncToGenerator","_ref5","uploading","uploadPlugin","_ref6","pluginId","_ref7","removePlugin","_ref8","_callee3","_ref9","_context3","enablePlugin","_ref10","_callee4","_ref11","_context4","disablePlugin","getPluginStatuses","uploadButtonText","pluginsList","pluginsContainer","pluginStatuses","plugin_management_PluginItem","uploadHelpText","enableUploads","EnableUploads","uploadBtnClass","CustomPluginSettings","custom_plugin_settings_classCallCheck","custom_plugin_settings_possibleConstructorReturn","custom_plugin_settings_getPrototypeOf","Plugins","configSettings","lowerKey","custom_plugin_settings_objectSpread","match","params","plugin_id","plugin","admin_console_custom_plugin_settings_objectSpread","getRoles","ComplianceReports","compliance_reports_classCallCheck","compliance_reports_defineProperty","compliance_reports_assertThisInitialized","compliance_reports_possibleConstructorReturn","compliance_reports_getPrototypeOf","loadingReports","getComplianceReports","runningReport","desc","emails","keywords","from","end_at","createComplianceReport","enabled","list","i","reports","report","getDateTime","download","getBaseRoute","greenStatus","redStatus","user_id","profile","users","dataCell","runReport","marginTop","getUsersForReports","createSelector","profiles","complianceReports","usersMap","r","u","ComplianceSettings","requests","createCompliance","selectComplianceReports","Audits","audits_classCallCheck","audits_defineProperty","audits_assertThisInitialized","audits_possibleConstructorReturn","audits_getPrototypeOf","loadingAudits","getAudits","auditTable","audit_table","showUserId","showIp","showSession","compliance_reports","CustomUrlSchemesSetting","custom_url_schemes_setting_classCallCheck","custom_url_schemes_setting_defineProperty","custom_url_schemes_setting_assertThisInitialized","custom_url_schemes_setting_possibleConstructorReturn","custom_url_schemes_setting_getPrototypeOf","filter","arr","valueAsArray","stringToArray","arrayToString","holders","defineMessages","LicenseSettings","license_settings_classCallCheck","license_settings_possibleConstructorReturn","license_settings_getPrototypeOf","license_settings_assertThisInitialized","prop","uploadLicenseFile","window","location","removeLicenseFile","clearLastError","edition","licenseType","licenseKey","issued","IssuedAt","startsAt","StartsAt","expiresAt","ExpiresAt","Name","Company","Users","formatMessage","MAX_TEAMS_PER_SCHEME_SUMMARY","PermissionsSchemeSummary","permissions_scheme_summary_classCallCheck","permissions_scheme_summary_defineProperty","permissions_scheme_summary_assertThisInitialized","permissions_scheme_summary_possibleConstructorReturn","permissions_scheme_summary_getPrototypeOf","scheme","schemeName","deleting","handleDeleteConfirmed","handleDeleteCanceled","stopPropagation","permissions_scheme_summary_asyncToGenerator","deleteScheme","history","extraTeams","goToEdit","delete","getSchemeTeams","makeGetSchemeTeams","schemeId","PAGE_SIZE","PermissionSchemesSettings","permission_schemes_settings_classCallCheck","permission_schemes_settings_defineProperty","permission_schemes_settings_assertThisInitialized","permission_schemes_settings_possibleConstructorReturn","permission_schemes_settings_getPrototypeOf","loadingMore","loadSchemes","page","schemes","promises","loadSchemeTeams","phase2MigrationIsComplete","docLink","jobsAreEnabled","clusterIsEnabled","teamOverrideUnavalableView","defaultMsg","permissions_scheme_summary","teamOverrideView","teamOverrideSchemesMigrationView","loadMoreSchemes","status_code","getSchemes","RunJobs","EnableCluster","AccordionToggleIcon","viewBox","stroke","strokeWidth","fill","fillRule","transform","d","cx","cy","CheckboxCheckedIcon","CheckboxPartialIcon","PermissionCheckbox","extraClass","checkbox_checked_icon_CheckboxCheckedIcon","checkbox_partial_icon_CheckboxPartialIcon","PermissionDescription","_React$Component","permission_description_classCallCheck","permission_description_defineProperty","permission_description_assertThisInitialized","permission_description_possibleConstructorReturn","permission_description_getPrototypeOf","open","isInheritLink","parentElement","selectRow","generateId","permission_description_inherits","permission_description_createClass","inherited","rowType","additionalValues","parentPermissionClicked","PermissionRow","readOnly","uniqId","classes","toggleSelect","permission_checkbox_PermissionCheckbox","permission_description","PermissionGroup","permission_group_classCallCheck","permission_group_defineProperty","permission_group_assertThisInitialized","permission_group_possibleConstructorReturn","permission_group_getPrototypeOf","expanded","permissions","result","permission","getRecursivePermissions","ids","permissionsToToggle","fromParent","prevPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","scope","PermissionsScope","isInScope","comesFromParent","permission_row_PermissionRow","parentRole","toggleSelectRow","g","toggleSelectSubGroup","combined","root","anyChecked","anyUnchecked","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","allPermissionsFromParent","_this$props2","hasPermissionsOnScope","permissionsRows","group","addVals","renderPermission","renderGroup","toggleSelectGroup","toggleExpanded","EditPostTimeLimitButton","messageID","timeLimit","UNSET_POST_EDIT_TIME_LIMIT","PostEditTimeLimit","INT32_MAX","EditPostTimeLimitModal","edit_post_time_limit_modal_classCallCheck","edit_post_time_limit_modal_defineProperty","edit_post_time_limit_modal_assertThisInitialized","edit_post_time_limit_modal_possibleConstructorReturn","edit_post_time_limit_modal_getPrototypeOf","edit_post_time_limit_modal_asyncToGenerator","postEditTimeLimit","updateConfig","onClose","ALLOW_EDIT_POST_ALWAYS","Modal","dialogClassName","Header","closeButton","Body","handleOptionChange","ALLOW_EDIT_POST_TIME_LIMIT","step","handleSecondsChange","Footer","save","PermissionsTree","permissions_tree_classCallCheck","permissions_tree_defineProperty","permissions_tree_assertThisInitialized","permissions_tree_possibleConstructorReturn","permissions_tree_getPrototypeOf","integrationsGroup","groups","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableOAuthServiceProvider","EnableCommands","EnableCustomEmoji","editTimeLimitModalIsVisible","onToggle","permission_group_PermissionGroup","ADDITIONAL_VALUES","toggleGroup","edit_post_time_limit_modal","closePostTimeLimitModal","edit_post","editTimeLimitButton","edit_post_time_limit_button","openPostTimeLimitModal","updateGroups","PermissionSystemSchemeSettings","permission_system_scheme_settings_classCallCheck","permission_system_scheme_settings_defineProperty","permission_system_scheme_settings_assertThisInitialized","permission_system_scheme_settings_possibleConstructorReturn","permission_system_scheme_settings_getPrototypeOf","openRoles","all_users","scrollIntoView","behavior","block","toggleRole","selectedPermission","goToSelectedRow","system_user","permission_system_scheme_settings_objectSpread","team_user","channel_user","permission_system_scheme_settings_asyncToGenerator","teamAdminPromise","channelAdminPromise","systemUserPromise","teamUserPromise","channelUserPromise","team_admin","channel_admin","deriveRolesFromAllUsers","results","roleId","newOpenRoles","newPermissions","_toConsumableArray","splice","newRolesState","entries","DefaultRolePermissions","_slicedToArray","roleName","hasCustomSchemes","loaded","accordion_toggle_icon_AccordionToggleIcon","permissions_tree","togglePermission","system_admin","showResetDefaultModal","onHide","resetDefaults","rolesNeeded","loadRolesIfNeeded","every","loadRolesIntoState","_props$roles","displayName","rolesRequest","getRolesByNames","TeamInList","teamIconUrl","imageURLForTeam","backgroundImage","TEAMS_PER_PAGE","TeamSelectorModal","team_selector_modal_classCallCheck","team_selector_modal_defineProperty","team_selector_modal_assertThisInitialized","team_selector_modal_possibleConstructorReturn","team_selector_modal_getPrototypeOf","setModalSearchTerm","onTeamsSelected","handleHide","confirmed","scheme_id","teamIds","v","confirmAddModal","confirmAddTeam","loadingState","loadingTeams","prevPage","setTeamsLoadingState","loadTeams","term","searchTimeoutId","search","searchTerm","clearTimeout","team_selector_modal_asyncToGenerator","searchTeams","SEARCH_TIMEOUT_MILLISECONDS","isSelected","onAdd","rowSelected","team_info_TeamInList","_this4","addValue","_this5","numRemainingText","buttonSubmitText","delete_at","currentSchemeId","alreadySelected","onExited","handleExit","Title","multiselect","optionRenderer","renderOption","valueKey","valueRenderer","renderValue","perPage","handlePageChange","handleInput","handleDelete","handleAdd","views","modalSearch","startsWith","onRemoveTeam","getTeamStats","loadTeamStats","PermissionTeamSchemeSettings","permission_team_scheme_settings_classCallCheck","permission_team_scheme_settings_defineProperty","permission_team_scheme_settings_assertThisInitialized","permission_team_scheme_settings_possibleConstructorReturn","permission_team_scheme_settings_getPrototypeOf","default_team_user_role","default_team_admin_role","default_channel_user_role","default_channel_admin_role","teamUser","teamAdmin","channelUser","channelAdmin","isLoaded","baseTeam","baseChannel","permission_team_scheme_settings_objectSpread","schemeDescription","permission_team_scheme_settings_asyncToGenerator","allUsers","derived","_derived","newScheme","teamEditPromises","currentTeams","serverTeams","addedTeams","removedTeams","_teamId","_result","getStateRoles","patchScheme","createScheme","Set","permission_team_scheme_settings_toConsumableArray","has","updateTeamScheme","finish","t1","t2","addTeamOpen","team_selector_modal","closeAddTeam","addTeams","handleNameChange","handleDescriptionChange","openAddTeam","team_in_list","removeTeam","loadScheme","getScheme","getStateFromProps","hasPostAllRole","UserUtils","hasPostAllPublicRole","hasUserAccessTokenRole","isSystemAdmin","ManageRolesModal","manage_roles_modal_classCallCheck","manage_roles_modal_defineProperty","manage_roles_modal_assertThisInitialized","manage_roles_modal_possibleConstructorReturn","manage_roles_modal_getPrototypeOf","oldRoles","trackEvent","SYSTEM_USER_ACCESS_TOKEN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","manage_roles_modal_asyncToGenerator","SYSTEM_USER_ROLE","SYSTEM_ADMIN_ROLE","updateUserRoles","trackRoleChanges","handleError","additionalRoles","userAccessTokenContent","handlePostAllChange","handlePostAllPublicChange","userAccessTokensEnabled","handleUserAccessTokenChange","handleSystemAdminChange","nextUser","renderContents","handleSave","EnableUserAccessTokens","ManageTeamsDropdown","manage_teams_dropdown_classCallCheck","manage_teams_dropdown_defineProperty","manage_teams_dropdown_assertThisInitialized","manage_teams_dropdown_possibleConstructorReturn","manage_teams_dropdown_getPrototypeOf","manage_teams_dropdown_asyncToGenerator","updateTeamMemberSchemeRoles","teamMember","team_id","onError","handleMemberChange","removeFromTeam","handleMemberRemove","prevState","removeUserFromTeam","onMemberChange","onMemberRemove","isTeamAdmin","scheme_admin","makeTeamAdmin","MenuItem","onSelect","makeMember","Dropdown","Toggle","useAnchor","Menu","RemoveFromTeamButton","remove_from_team_button_classCallCheck","remove_from_team_button_possibleConstructorReturn","remove_from_team_button_getPrototypeOf","remove_from_team_button_assertThisInitialized","ManageTeamsModal","manage_teams_modal_classCallCheck","manage_teams_modal_defineProperty","manage_teams_modal_assertThisInitialized","manage_teams_modal_possibleConstructorReturn","manage_teams_modal_getPrototypeOf","manage_teams_modal_asyncToGenerator","_args","getTeamMembers","getTeamsForUser","userId","_args2","getTeamMembersForUser","teamMembers","_this$state","teamList","member","remove_from_team_button_RemoveFromTeamButton","manage_teams_dropdown_ManageTeamsDropdown","systemAdminIndicator","loadTeamsAndTeamMembers","RevokeTokenButton","revokeUserAccessToken","tokenId","ManageTokensModal","manage_tokens_modal_classCallCheck","manage_tokens_modal_defineProperty","manage_tokens_modal_assertThisInitialized","manage_tokens_modal_possibleConstructorReturn","manage_tokens_modal_getPrototypeOf","userAccessTokens","tokenList","userAccessTokensList","token","revoke_token_button","nextUserId","getUserAccessTokensForUser","userAccessTokensByUser","ResetPasswordModal","reset_password_modal_classCallCheck","reset_password_modal_possibleConstructorReturn","reset_password_modal_getPrototypeOf","reset_password_modal_assertThisInitialized","doCancel","serverErrorNewPass","serverErrorCurrentPass","currentPassword","errorMsg","_Utils$isValidPasswor","passwordConfig","valid","adminResetPassword","onModalSubmit","urlClass","auth_service","newPasswordFocus","currentUserId","urlClassCurrentPass","autoFocus","tabIndex","getCurrentUserId","getPasswordConfig","ResetEmailModal","reset_email_modal_classCallCheck","reset_email_modal_defineProperty","reset_email_modal_assertThisInitialized","reset_email_modal_possibleConstructorReturn","reset_email_modal_getPrototypeOf","isEmail","adminResetEmail","UserListRowWithError","user_list_row_with_error_classCallCheck","user_list_row_with_error_possibleConstructorReturn","user_list_row_with_error_getPrototypeOf","user_list_row_with_error_assertThisInitialized","errorObj","buttons","Action","actionProps","actionUserProps","emailStyle","extraInfo","userCountID","userCountEmail","profile_picture","getStatusForUserId","UserListRow","SystemUsersDropdown","system_users_dropdown_classCallCheck","system_users_dropdown_defineProperty","system_users_dropdown_assertThisInitialized","system_users_dropdown_possibleConstructorReturn","system_users_dropdown_getPrototypeOf","updateActive","doManageTeams","doManageRoles","doManageTokens","doPasswordReset","doEmailReset","adminResetMfa","showDemoteModal","doMakeMember","teamUrl","showDeactivateMemberModal","EMAIL_SERVICE","deactivateMemberButton","handleDeactivateMember","handleDeactivateCancel","showRevokeSessionsModal","revokeAllSessions","emitUserLoggedOutEvent","revokeUserButtonButton","handleRevokeSessions","handleRevokeSessionsCancel","enableUserAccessTokens","messageId","currentRoles","showMakeActive","showMakeNotActive","showManageTeams","showRevokeSessions","showMfaReset","mfaEnabled","mfa_active","disableActivationToggle","LDAP_SERVICE","menuClass","makeActive","handleMakeActive","makeNotActive","handleShowDeactivateMemberModal","manageTeams","handleManageTeams","passwordReset","emailReset","revokeSessions","manageTokens","mfaReset","handleResetMfa","experimentalEnableAuthenticationTransfer","handleResetPassword","handleResetEmail","system_permission_gate","Permissions","REVOKE_USER_ACCESS_TOKEN","handleShowRevokeSessionsModal","handleManageTokens","makeDemoteModal","handleDemoteSubmit","handleDemoteCancel","deactivateMemberModal","renderDeactivateMemberModal","revokeSessionsModal","renderRevokeSessionsModal","renderAccessToken","handleManageRoles","getCurrentRelativeTeamUrl","SystemUsersList","system_users_list_classCallCheck","system_users_list_defineProperty","system_users_list_assertThisInitialized","system_users_list_possibleConstructorReturn","system_users_list_getPrototypeOf","nextPage","showManageTeamsModal","showManageRolesModal","showManageTokensModal","showPasswordModal","getUser","showEmailModal","service","info","SAML_SERVICE","total","startCount","endCount","isSearch","getInfoForUser","searchable_user_list","renderCount","previousPage","onTermChange","rowComponentType","manage_teams_modal","doManageTeamsDismiss","manage_roles_modal","doManageRolesDismiss","manage_tokens_modal","doManageTokensDismiss","reset_password_modal","doPasswordResetSubmit","doPasswordResetDismiss","reset_email_modal_ResetEmailModal","doEmailResetSubmit","doEmailResetDismiss","usersPerPage","focusOnMount","renderFilterRow","ALL_USERS","NO_TEAM","USER_ID_LENGTH","searchProfilesInTeam","searchProfiles","getProfiles","getProfilesWithoutTeam","getUsers","SystemUsers","system_users_classCallCheck","system_users_defineProperty","system_users_assertThisInitialized","system_users_possibleConstructorReturn","system_users_getPrototypeOf","system_users_asyncToGenerator","getUserAccessToken","getUserById","loadDataForTeam","loadComplete","handleTermChange","doSearch","searching","reloadIfServerVersionChanged","setSystemUsersSearch","SearchUserTeamFilter","loadProfiles","getStandardAnalytics","loadProfilesWithoutTeam","loadProfilesAndTeamMembers","UserSearchOptions","ALLOW_INACTIVE","WITHOUT_TEAM","searchUsers","getUserByTokenOrId","onInput","system_users_list","totalUsers","EnableMultifactorAuthentication","ExperimentalEnableAuthenticationTransfer","systemUsersSearch","total_member_count","analytics","admin_console_system_users_defineProperty","Stats","TOTAL_INACTIVE_USERS","Logs","log_list_classCallCheck","log_list_possibleConstructorReturn","log_list_getPrototypeOf","log_list_assertThisInitialized","nextDisabled","logPanel","scrollTop","scrollHeight","focus","nextTimeoutId","nextButton","previousButton","logs","fontFamily","logs_classCallCheck","logs_defineProperty","logs_assertThisInitialized","logs_possibleConstructorReturn","logs_getPrototypeOf","loadingLogs","getLogs","log_list_Logs","UploadButton","buttonIcon","primaryClass","UploadStatuses","LOADING","COMPLETE","BrandImageSetting","brand_image_setting_classCallCheck","brand_image_setting_possibleConstructorReturn","brand_image_setting_getPrototypeOf","handleImageChange","brand_image_setting_assertThisInitialized","handleImageSubmit","brandImage","brandImageExists","brandImageTimestamp","DEFAULT","fetch","getBrandImageUrl","resp","image","reader","FileReader","img","onload","attr","readAsDataURL","uploadBrandImage","btnPrimaryClass","letbtnDefaultClass","upload_button_UploadButton","MEBIBYTE","pow","needsUtils","not","and","_len","funcs","Array","_key","_i","or","_len2","_key2","_i2","stateValueMatch","regex","stateValueEqual","stateValueTrue","stateValueFalse","hasLicense","hasLicenseFeature","feature","admin_definition","reporting","system_analytics","team_analytics","system_users","server_logs","ServerLogs","general","configuration","name_default","DefinitionConstants","reloadConfig","recycleDatabaseConnections","invalidateAllCaches","localization","users_and_teams","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","privacy","compliance","logging","boldedLogLevel","displayVal","previousVal","systemScheme","teamScheme","authentication","gitlab","newState","GitLabSettings","UserApiEndpoint","admin_definition_objectSpread","Url","oauth","oauthType","GITLAB_SERVICE","Office365Settings","OFFICE365_SERVICE","GoogleSettings","GOOGLE_SERVICE","ldap","ldapTest","LDAP_SYNC","mattermostUsers","ldapUsers","deleteCount","updateCount","mattermost_users_count","ldap_users_count","delete_count","update_count","saml","uploadIdpSamlCertificate","removeIdpSamlCertificate","siteUrl","addSlashIfNeeded","uploadPrivateSamlCertificate","removePrivateSamlCertificate","uploadPublicSamlCertificate","removePublicSamlCertificate","mfa","security","signup","public_links","sessions","connections","notifications","integrations","custom_integrations","external","management","custom","storage","testS3Connection","configVal","customization","customBrand","MAX_SITENAME_LENGTH","MAX_CUSTOM_BRAND_TEXT_LENGTH","emoji","gif","posts","legal_and_support","native_app_links","advanced","rate","developer","metrics","other","SCRoute","extraProps","rest","_objectWithoutProperties","AdminConsole","getEnvironmentConfig","showNavigationPrompt","_this$props$actions","cancelNavigation","confirmNavigation","isCurrentUserSystemAdmin","Redirect","mainRolesLoaded","constructor","announcement_bar","discardChangesModal","discard_changes_modal_DiscardChangesModal","system_notice","admin_sidebar","Switch","admin_console_SCRoute","url","admin_console_objectSpread","AdminDefinition","withRouter","mappingPartIterator","MAPPING","enableTeamCreation","true","CREATE_TEAM","shouldHave","false","editOthersPosts","EDIT_OTHERS_POSTS","enableOnlyAdminIntegrations","MANAGE_WEBHOOKS","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","mappingValues","rolesClone","pertinentRoleNames","roleNames","v1","v2","names","roleNamesInMapping","includes","purgeNonPertinentRoles","mappingKey","roleRules","Error","addPermissionToRole","permissionIndex","removePermissionFromRole","mutateRolesBasedOnMapping","roleClone","originalPermissionSet","newPermissionSet","difference","x","size","allConditionsAreMet","mappingPart","hasUnmetCondition","hasOwnProperty","_marked","sessionRevoked","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","userIdContent","ipContent","sessionContent","accessList","audit","auditInfo","formatAuditInfo","getByName","uContent","iContent","ip","sContent","sessionId","descStyle","timestamp","actionURL","auditDesc","channelObj","channelInfo","extra_info","channelNameField","channelURL","channelName","getDirectTeammate","userIdField","test","oauthInfo","clientIdField","oauthTokenFailure","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","extraInfoDesc","ip_address","session_id","getChannelByName"],"mappings":"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","file":"13.3277213734fedd6288d7.js","sourcesContent":["module.exports = __webpack_public_path__ + \"files/8ad185cd28385436713d3c7e17df5d67.png\";","module.exports = __webpack_public_path__ + \"files/580f84fc81f240daf5b9635341fe4fa0.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {saveConfig} from 'actions/admin_actions.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport default class AdminSettings extends React.Component {\n    static propTypes = {\n\n        /*\n         * Object representing the config file\n         */\n        config: PropTypes.object,\n\n        /*\n         * Object containing config fields that have been set through environment variables\n         */\n        environmentConfig: PropTypes.object,\n\n        /*\n         * Action for whether a save is needed\n         */\n        setNavigationBlocked: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.getStateFromConfig(props.config), {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        });\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    handleChange = (id, value) => {\n        this.setState({\n            saveNeeded: true,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.doSubmit();\n    }\n\n    doSubmit = (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(this.getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                    serverErrorId: err.id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    parseInt = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n)) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonNegative = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonZero = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 1) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 1;\n        }\n\n        return n;\n    };\n\n    getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[pathPart];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = pathParts[0];\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(this.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    {this.renderTitle()}\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function() {\n    return (\n        <div className='alert alert-warning'>\n            <FormattedMessage\n                id='admin.set_by_env'\n                defaultMessage='This setting has been set through an environment variable. It cannot be changed through the System Console.'\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nimport SetByEnv from './set_by_env';\n\nexport default class Settings extends PureComponent {\n    static propTypes = {\n        inputId: PropTypes.string,\n        label: PropTypes.node.isRequired,\n        children: PropTypes.node.isRequired,\n        helpText: PropTypes.node,\n        setByEnv: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            children,\n            setByEnv,\n            helpText,\n            inputId,\n            label,\n        } = this.props;\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <div className='col-sm-8'>\n                    {children}\n                    <div className='help-text'>\n                        {helpText}\n                    </div>\n                    {setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class BooleanSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.bool.isRequired,\n        onChange: PropTypes.func.isRequired,\n        trueText: PropTypes.node,\n        falseText: PropTypes.node,\n        disabled: PropTypes.bool.isRequired,\n        setByEnv: PropTypes.bool.isRequired,\n        disabledText: PropTypes.node,\n        helpText: PropTypes.node.isRequired,\n    };\n\n    static defaultProps = {\n        trueText: (\n            <FormattedMessage\n                id='admin.true'\n                defaultMessage='true'\n            />\n        ),\n        falseText: (\n            <FormattedMessage\n                id='admin.false'\n                defaultMessage='false'\n            />\n        ),\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value === 'true');\n    }\n\n    render() {\n        let helpText;\n        if (this.props.disabled && this.props.disabledText) {\n            helpText = (\n                <div>\n                    <span className='admin-console__disabled-text'>\n                        {this.props.disabledText}\n                    </span>\n                    {this.props.helpText}\n                </div>\n            );\n        } else {\n            helpText = this.props.helpText;\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <a name={this.props.id}/>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='true'\n                        id={Utils.createSafeId(this.props.id) + 'true'}\n                        name={this.props.id}\n                        checked={this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.trueText}\n                </label>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='false'\n                        id={Utils.createSafeId(this.props.id) + 'false'}\n                        name={this.props.id}\n                        checked={!this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.falseText}\n                </label>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport statusGreen from 'images/status_green.png';\nimport statusYellow from 'images/status_yellow.png';\n\nexport default class ClusterTable extends React.Component {\n    static propTypes = {\n        clusterInfos: PropTypes.array.isRequired,\n        reload: PropTypes.func.isRequired,\n    }\n\n    render() {\n        var versionMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var configMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var version = '';\n        var configHash = '';\n        var singleItem = false;\n\n        if (this.props.clusterInfos.length) {\n            version = this.props.clusterInfos[0].version;\n            configHash = this.props.clusterInfos[0].config_hash;\n            singleItem = this.props.clusterInfos.length === 1;\n        }\n\n        this.props.clusterInfos.map((clusterInfo) => {\n            if (clusterInfo.version !== version) {\n                versionMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            if (clusterInfo.config_hash !== configHash) {\n                configMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            return null;\n        });\n\n        var items = this.props.clusterInfos.map((clusterInfo) => {\n            var status = null;\n\n            if (clusterInfo.hostname === '') {\n                clusterInfo.hostname = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.version === '') {\n                clusterInfo.version = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.config_hash === '') {\n                clusterInfo.config_hash = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (singleItem) {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            } else {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusGreen}\n                    />\n                );\n            }\n\n            return (\n                <tr key={clusterInfo.ipaddress}>\n                    <td style={style.clusterCell}>{status}</td>\n                    <td style={style.clusterCell}>{clusterInfo.hostname}</td>\n                    <td style={style.clusterCell}>{versionMismatch} {clusterInfo.version}</td>\n                    <td style={style.clusterCell}><div className='config-hash'>{configMismatch} {clusterInfo.config_hash}</div></td>\n                    <td style={style.clusterCell}>{clusterInfo.ipaddress}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div\n                className='cluster-panel__table'\n                style={style.clusterTable}\n            >\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        onClick={this.props.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.cluster.status_table.reload'\n                            defaultMessage=' Reload Cluster Status'\n                        />\n                    </button>\n                </div>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.status'\n                                    defaultMessage='Status'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.hostname'\n                                    defaultMessage='Hostname'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.version'\n                                    defaultMessage='Version'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.config_hash'\n                                    defaultMessage='Config File MD5'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.url'\n                                    defaultMessage='Gossip Address'\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    clusterTable: {margin: 10, marginBottom: 30},\n    clusterCell: {whiteSpace: 'nowrap'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getClusterStatus} from 'actions/admin_actions.jsx';\nimport LoadingScreen from '../loading_screen.jsx';\n\nimport ClusterTable from './cluster_table.jsx';\n\nexport default class ClusterTableContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.load = this.load.bind(this);\n        this.reload = this.reload.bind(this);\n\n        this.interval = null;\n\n        this.state = {\n            clusterInfos: null,\n        };\n    }\n\n    load() {\n        getClusterStatus(\n            (data) => {\n                this.setState({\n                    clusterInfos: data,\n                });\n            },\n            null\n        );\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.load();\n\n        // reload the cluster status every 15 seconds\n        this.interval = setInterval(this.load, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reload(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            clusterInfos: null,\n        });\n\n        this.load();\n    }\n\n    render() {\n        if (this.state.clusterInfos == null) {\n            return (<LoadingScreen/>);\n        }\n\n        return (\n            <ClusterTable\n                clusterInfos={this.state.clusterInfos}\n                reload={this.reload}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SettingsGroup extends React.Component {\n    static get propTypes() {\n        return {\n            show: PropTypes.bool.isRequired,\n            header: PropTypes.node,\n            children: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            show: true,\n        };\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n\n        let header = null;\n        if (this.props.header) {\n            header = (\n                <h4>\n                    {this.props.header}\n                </h4>\n            );\n        }\n\n        return (\n            <div className='admin-settings__group'>\n                {header}\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class TextSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number,\n            ]).isRequired,\n            maxLength: PropTypes.number,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n            type: PropTypes.oneOf([\n                'number',\n                'input',\n                'textarea',\n            ]),\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            type: 'input',\n            maxLength: null,\n        };\n    }\n\n    handleChange = (e) => {\n        if (this.props.type === 'number') {\n            this.props.onChange(this.props.id, parseInt(e.target.value, 10));\n        } else {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    render() {\n        let input = null;\n        if (this.props.type === 'input') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'number') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='number'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'textarea') {\n            input = (\n                <textarea\n                    id={this.props.id}\n                    className='form-control'\n                    rows='5'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                {input}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport ClusterTableContainer from './cluster_table_container.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ClusterSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.overrideHandleChange = this.overrideHandleChange.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ClusterSettings.Enable = this.state.Enable;\n        config.ClusterSettings.ClusterName = this.state.ClusterName;\n        config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;\n        config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;\n        config.ClusterSettings.UseExperimentalGossip = this.state.UseExperimentalGossip;\n        config.ClusterSettings.ReadOnlyConfig = this.state.ReadOnlyConfig;\n        config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);\n        config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.ClusterSettings;\n\n        return {\n            Enable: settings.Enable,\n            ClusterName: settings.ClusterName,\n            OverrideHostname: settings.OverrideHostname,\n            UseIpAddress: settings.UseIpAddress,\n            UseExperimentalGossip: settings.UseExperimentalGossip,\n            ReadOnlyConfig: settings.ReadOnlyConfig,\n            GossipPort: settings.GossipPort,\n            StreamingPort: settings.StreamingPort,\n            showWarning: false,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.advance.cluster'\n                defaultMessage='High Availability'\n            />\n        );\n    }\n\n    overrideHandleChange(id, value) {\n        this.setState({\n            showWarning: true,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    renderSettings() {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        var configLoadedFromCluster = null;\n\n        if (Client4.clusterId) {\n            configLoadedFromCluster = (\n                <div\n                    style={style.configLoadedFromCluster}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.loadedFrom'\n                        defaultMessage='This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html) if you are accessing the System Console through a load balancer and experiencing issues.'\n                        values={{\n                            clusterId: Client4.clusterId,\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        var warning = null;\n        if (this.state.showWarning) {\n            warning = (\n                <div\n                    style={style.warning}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.should_not_change'\n                        defaultMessage='WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart Mattermost. Please see the [documentation](!http://docs.mattermost.com/deployment/cluster.html) on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html).'\n                    />\n                </div>\n            );\n        }\n\n        var clusterTableContainer = null;\n        if (this.state.Enable) {\n            clusterTableContainer = (<ClusterTableContainer/>);\n        }\n\n        return (\n            <SettingsGroup>\n                {configLoadedFromCluster}\n                {clusterTableContainer}\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.cluster.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect. When High Availability mode is enabled, the System Console is set to read-only and can only be changed from the configuration file unless ReadOnlyConfig is disabled in the configuration file.'\n                    />\n                </div>\n                {warning}\n                <BooleanSetting\n                    id='Enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.enableTitle'\n                            defaultMessage='Enable High Availability Mode:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.cluster.enableDescription'\n                            defaultMessage='When true, Mattermost will run in High Availability mode. Please see [documentation](!http://docs.mattermost.com/deployment/cluster.html) to learn more about configuring High Availability for Mattermost.'\n                        />\n                    }\n                    value={this.state.Enable}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.Enable')}\n                />\n                <TextSetting\n                    id='ClusterName'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterName'\n                            defaultMessage='Cluster Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.ClusterNameEx', 'E.g.: \"Production\" or \"Staging\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterNameDesc'\n                            defaultMessage='The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database.'\n                        />\n                    }\n                    value={this.state.ClusterName}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ClusterName')}\n                />\n                <TextSetting\n                    id='OverrideHostname'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostname'\n                            defaultMessage='Override Hostname:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.OverrideHostnameEx', 'E.g.: \"app-server-01\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostnameDesc'\n                            defaultMessage='The default value of <blank> will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed.'\n                        />\n                    }\n                    value={this.state.OverrideHostname}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.OverrideHostname')}\n                />\n                <BooleanSetting\n                    id='UseIpAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddress'\n                            defaultMessage='Use IP Address:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseIpAddressDesc'\n                            defaultMessage='When true, the cluster will attempt to communicate via IP Address vs using the hostname.'\n                        />\n                    }\n                    value={this.state.UseIpAddress}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseIpAddress')}\n                />\n                <BooleanSetting\n                    id='UseExperimentalGossip'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseExperimentalGossip'\n                            defaultMessage='Use Experimental Gossip:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseExperimentalGossipDesc'\n                            defaultMessage='When true, the server will attempt to communicate via the gossip protocol over the gossip port.  When false the server will attempt to communicate over the streaming port. When false the gossip port and protocol are still used to determine cluster health.'\n                        />\n                    }\n                    value={this.state.UseExperimentalGossip}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseExperimentalGossip')}\n                />\n                <BooleanSetting\n                    id='ReadOnlyConfig'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ReadOnlyConfig'\n                            defaultMessage='Read Only Config:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.ReadOnlyConfigDesc'\n                            defaultMessage='When true, the server will reject changes made to the configuration file from the system console. When running in production it is recommened to set this to true.'\n                        />\n                    }\n                    value={this.state.ReadOnlyConfig}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ReadOnlyConfig')}\n                />\n                <TextSetting\n                    id='GossipPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPort'\n                            defaultMessage='Gossip Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.GossipPortEx', 'E.g.: \"8074\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPortDesc'\n                            defaultMessage='The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port.'\n                        />\n                    }\n                    value={this.state.GossipPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.GossipPort')}\n                />\n                <TextSetting\n                    id='StreamingPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPort'\n                            defaultMessage='Streaming Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.StreamingPortEx', 'E.g.: \"8075\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPortDesc'\n                            defaultMessage='The port used for streaming data between servers.'\n                        />\n                    }\n                    value={this.state.StreamingPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.StreamingPort')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n\nconst style = {\n    configLoadedFromCluster: {marginBottom: 10},\n    warning: {marginBottom: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class DropdownSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    }\n\n    static defaultProps = {\n        isDisabled: false,\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <option\n                    value={value}\n                    key={value}\n                >\n                    {text}\n                </option>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <select\n                    className='form-control'\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                >\n                    {options}\n                </select>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as JobsActions from 'mattermost-redux/actions/jobs';\n\nimport store from 'stores/redux_store.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport async function createJob(job, success, error) {\n    const {data, error: err} = await JobsActions.createJob(job)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function cancelJob(jobId, success, error) {\n    const {data, error: err} = await JobsActions.cancelJob(jobId)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {cancelJob, createJob} from 'actions/job_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport {JobStatuses} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nclass JobTable extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Used for formatting dates\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Array of jobs\n         */\n        jobs: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch jobs\n             */\n            getJobsByType: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Function called when displaying extra text.\n         */\n        getExtraInfoText: PropTypes.func,\n\n        /**\n         * Grey buttons out when disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Help text under the create job button\n         */\n        createJobHelpText: PropTypes.element.isRequired,\n\n        /**\n         * Button text to create a new job\n         */\n        createJobButtonText: PropTypes.element.isRequired,\n\n        /**\n         * The type of jobs to include in this table.\n         */\n        jobType: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.interval = null;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.interval = setInterval(this.reload, 15000);\n    }\n\n    componentDidMount() {\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => this.setState({loading: false})\n        );\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    getStatus = (job) => {\n        if (job.status === JobStatuses.PENDING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusPending'\n                        defaultMessage='Pending'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusInProgress'\n                        defaultMessage='In Progress'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.SUCCESS) {\n            return (\n                <span\n                    className='status-icon-success'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusSuccess'\n                        defaultMessage='Success'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.ERROR) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusError'\n                        defaultMessage='Error'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceling'\n                        defaultMessage='Canceling...'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCELED) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceled'\n                        defaultMessage='Canceled'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <span title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}>{job.status}</span>\n        );\n    }\n\n    getExtraInfoText = (job) => {\n        if (job.data && job.data.error && job.data.error.length > 0) {\n            return <span title={job.data.error}>{job.data.error}</span>;\n        }\n\n        if (this.props.getExtraInfoText) {\n            return this.props.getExtraInfoText(job);\n        }\n\n        return <span/>;\n    }\n\n    getRunLength = (job) => {\n        let millis = job.last_activity_at - job.start_at;\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            const runningMillis = Date.now() - job.start_at;\n            if (runningMillis > millis) {\n                millis = runningMillis;\n            }\n        }\n\n        let lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';\n\n        if (job.last_activity_at > 0) {\n            lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') +\n                this.props.intl.formatDate(new Date(job.last_activity_at), {\n                    year: 'numeric',\n                    month: 'short',\n                    day: '2-digit',\n                }) + ' - ' +\n                this.props.intl.formatTime(new Date(job.last_activity_at), {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                });\n        }\n\n        var seconds = Math.round(millis / 1000);\n        var minutes = Math.round(millis / (1000 * 60));\n\n        if (millis <= 0 || job.status === JobStatuses.CANCELED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        if (seconds <= 120) {\n            return (\n                <span\n                    className='whitespace--nowrap'\n                    title={lastActivity}\n                >\n                    {seconds + Utils.localizeMessage('admin.jobTable.runLengthSeconds', ' seconds')}\n                </span>\n            );\n        }\n\n        return (\n            <span\n                className='whitespace--nowrap'\n                title={lastActivity}\n            >\n                {minutes + Utils.localizeMessage('admin.jobTable.runLengthMinutes', ' minutes')}\n            </span>\n        );\n    }\n\n    getFinishAt = (status, millis) => {\n        if (millis === 0 || status === JobStatuses.PENDING || status === JobStatuses.IN_PROGRESS || status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        const date = new Date(millis);\n        return (\n            <span className='whitespace--nowrap'>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    reload = () => {\n        this.setState({loading: true});\n\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    };\n\n    handleCancelJob = (e) => {\n        e.preventDefault();\n        const jobId = e.currentTarget.getAttribute('data-job-id');\n\n        cancelJob(\n            jobId,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    handleCreateJob = (e) => {\n        e.preventDefault();\n\n        const job = {\n            type: this.props.jobType,\n        };\n\n        createJob(\n            job,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    getCancelButton = (job) => {\n        let cancelButton = null;\n\n        if (!this.props.disabled && (job.status === JobStatuses.PENDING || job.status === JobStatuses.IN_PROGRESS)) {\n            cancelButton = (\n                <span\n                    data-job-id={job.id}\n                    onClick={this.handleCancelJob}\n                    className='job-table__cancel-button'\n                    title={Utils.localizeMessage('admin.jobTable.cancelButton', 'Cancel')}\n                >\n                    {'×'}\n                </span>\n            );\n        }\n\n        return cancelButton;\n    }\n\n    render() {\n        var items = this.props.jobs.map((job) => {\n            return (\n                <tr key={job.id}>\n                    <td\n                        width='30px'\n                        className='whitespace--nowrap text-center'\n                    >\n                        {this.getCancelButton(job)}\n                    </td>\n                    <td className='whitespace--nowrap'>{this.getStatus(job)}</td>\n                    <td className='whitespace--nowrap'>{this.getFinishAt(job.status, job.last_activity_at)}</td>\n                    <td className='whitespace--nowrap'>{this.getRunLength(job)}</td>\n                    <td colSpan='3'>{this.getExtraInfoText(job)}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className='job-table__panel'>\n                <div className='job-table__create-button'>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleCreateJob}\n                            disabled={this.props.disabled}\n                        >\n                            {this.props.createJobButtonText}\n                        </button>\n                    </div>\n                    <div className='help-text'>\n                        {this.props.createJobHelpText}\n                    </div>\n                </div>\n                <div className='job-table__table'>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th width='30px'/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerStatus'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerFinishAt'\n                                        defaultMessage='Finish Time'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerRunTime'\n                                        defaultMessage='Run Time'\n                                    />\n                                </th>\n                                <th colSpan='3'>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerExtraInfo'\n                                        defaultMessage='Details'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(JobTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getJobsByType} from 'mattermost-redux/actions/jobs';\nimport * as Selectors from 'mattermost-redux/selectors/entities/jobs';\n\nimport Table from './table.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        jobs: Selectors.makeGetJobsByType(ownProps.jobType)(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getJobsByType,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DataRetentionSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n        this.renderConfirmModal = this.renderConfirmModal.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';\n        config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';\n        config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);\n        config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);\n        config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),\n            enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),\n            messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,\n            fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,\n            deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,\n            showConfirmModal: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.setState({showConfirmModal: true});\n    };\n\n    handleSaveConfirmed = () => {\n        this.setState({showConfirmModal: false});\n\n        this.doSubmit();\n    };\n\n    handleSaveCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    renderConfirmModal() {\n        const title = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.title'\n                defaultMessage='Confirm data retention policy'\n            />\n        );\n\n        const messageList = [];\n\n        if (this.state.enableMessageDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageDeletion'\n                    defaultMessage='All messages will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.messageRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageIndefinite'\n                    defaultMessage='All messages will be retained indefinitely.'\n                />\n            );\n        }\n\n        if (this.state.enableFileDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileDeletion'\n                    defaultMessage='All files will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.fileRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileIndefinite'\n                    defaultMessage='All files will be retained indefinitely.'\n                />\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.description'\n                        defaultMessage='Are you sure you want to apply the following data retention policy:'\n                    />\n                </p>\n                <ul>\n                    {messageList.map((item, index) => {\n                        return <li key={index}>{item}</li>;\n                    })}\n                </ul>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.clarification'\n                        defaultMessage='Once deleted, messages and files cannot be retrieved.'\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.confirm'\n                defaultMessage='Confirm Settings'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleSaveConfirmed}\n                onCancel={this.handleSaveCanceled}\n            />\n        );\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.data_retention.title'\n                defaultMessage='Data Retention Policy (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const enableMessageDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')},\n        ];\n\n        const enableFileDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')},\n        ];\n\n        let messageRetentionDaysSetting = '';\n        if (this.state.enableMessageDeletion === 'true') {\n            messageRetentionDaysSetting = (\n                <TextSetting\n                    id='messageRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.messageRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.messageRetentionDays.description'\n                            defaultMessage='Set how many days messages are kept in Mattermost. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.messageRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')}\n                />\n            );\n        }\n\n        let fileRetentionDaysSetting = '';\n        if (this.state.enableFileDeletion === 'true') {\n            fileRetentionDaysSetting = (\n                <TextSetting\n                    id='fileRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.fileRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.fileRetentionDays.description'\n                            defaultMessage='Set how many days file uploads are kept in Mattermost. Files older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.fileRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.FileRetentionDays')}\n                />\n            );\n        }\n\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <SettingsGroup>\n                {confirmModal}\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.data_retention.note.description'\n                            defaultMessage='Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-dataretention-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.data_retention.note.description.documentationLinkText'\n                                            defaultMessage='documentation'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n                <DropdownSetting\n                    id='enableMessageDeletion'\n                    values={enableMessageDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.title'\n                            defaultMessage='Message Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps messages in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableMessageDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')}\n                />\n                {messageRetentionDaysSetting}\n                <DropdownSetting\n                    id='enableFileDeletion'\n                    values={enableFileDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.title'\n                            defaultMessage='File Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps file uploads in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableFileDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')}\n                />\n                {fileRetentionDaysSetting}\n                <TextSetting\n                    id='deletionJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.title'\n                            defaultMessage='Data Deletion Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.data_retention.deletionJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.deletionJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')}\n                />\n                <JobsTable\n                    jobType={JobTypes.DATA_RETENTION}\n                    disabled={this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true'}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.title'\n                            defaultMessage='Run Deletion Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.help'\n                            defaultMessage='Initiates a Data Retention deletion job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\n/**\n * A button which, when clicked, performs an action and displays\n * its outcome as either success, or failure accompanied by the\n * `message` property of the `err` object.\n */\nexport default class RequestButton extends React.Component {\n    static propTypes = {\n\n        /**\n         * The action to be called to carry out the request.\n         */\n        requestAction: PropTypes.func.isRequired,\n\n        /**\n         * A component that displays help text for the request button.\n         *\n         * Typically, this will be a <FormattedMessage/>.\n         */\n        helpText: PropTypes.element,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        loadingText: PropTypes.string,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        buttonText: PropTypes.element.isRequired,\n\n        /**\n         * The element to display as the field label.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        label: PropTypes.element,\n\n        /**\n         * True if the button form control should be disabled, otherwise false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * True if the config needs to be saved before running the request, otherwise false.\n         *\n         * If set to true, the action provided in the `saveConfigAction` property will be\n         * called before the action provided in the `requestAction` property, with the later\n         * only being called if the former is successful.\n         */\n        saveNeeded: PropTypes.bool,\n\n        /**\n         * Action to be called to save the config, if saveNeeded is set to true.\n         */\n        saveConfigAction: PropTypes.func,\n\n        /**\n         * True if the success message should be show when the request completes successfully,\n         * otherwise false.\n         */\n        showSuccessMessage: PropTypes.bool,\n\n        /**\n         * The message to show when the request completes successfully.\n         */\n        successMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the success message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the success message.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * The message to show when the request returns an error.\n         */\n        errorMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the error message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the error message.\n             *\n             * The placeholder {error} may be used to include the error message returned\n             * by the server in response to the failed request.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * True if the {error} placeholder for the `errorMessage` property should include both\n         * the `message` and `detailed_error` properties of the error returned from the server,\n         * otherwise false to include only the `message` property.\n         */\n        includeDetailedError: PropTypes.bool,\n\n        /**\n         * An element to display adjacent to the request button.\n         */\n        alternativeActionElement: PropTypes.element,\n    }\n\n    static defaultProps = {\n        disabled: false,\n        saveNeeded: false,\n        showSuccessMessage: true,\n        includeDetailedError: false,\n        successMessage: {\n            id: t('admin.requestButton.requestSuccess'),\n            defaultMessage: 'Test Successful',\n        },\n        errorMessage: {\n            id: t('admin.requestButton.requestFailure'),\n            defaultMessage: 'Test Failure: {error}',\n        },\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleRequest = this.handleRequest.bind(this);\n\n        this.state = {\n            busy: false,\n            fail: null,\n            success: false,\n        };\n    }\n\n    handleRequest(e) {\n        e.preventDefault();\n\n        this.setState({\n            busy: true,\n            fail: null,\n            success: false,\n        });\n\n        const doRequest = () => { //eslint-disable-line func-style\n            this.props.requestAction(\n                () => {\n                    this.setState({\n                        busy: false,\n                        success: true,\n                    });\n                },\n                (err) => {\n                    let errMsg = err.message;\n                    if (this.props.includeDetailedError) {\n                        errMsg += ' - ' + err.detailed_error;\n                    }\n\n                    this.setState({\n                        busy: false,\n                        fail: errMsg,\n                    });\n                }\n            );\n        };\n\n        if (this.props.saveNeeded) {\n            this.props.saveConfigAction(doRequest);\n        } else {\n            doRequest();\n        }\n    }\n\n    render() {\n        let message = null;\n        if (this.state.fail) {\n            message = (\n                <div>\n                    <div className='alert alert-warning'>\n                        <i\n                            className='fa fa-warning'\n                            title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.errorMessage.id}\n                            defaultMessage={this.props.errorMessage.defaultMessage}\n                            values={{\n                                error: this.state.fail,\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        } else if (this.state.success && this.props.showSuccessMessage) {\n            message = (\n                <div>\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-success'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.successMessage.id}\n                            defaultMessage={this.props.successMessage.defaultMessage}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.busy) {\n            let loadingText = Utils.localizeMessage('admin.requestButton.loading', ' Loading...');\n            if (this.props.loadingText) {\n                loadingText = this.props.loadingText;\n            }\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    {loadingText}\n                </span>\n            );\n        } else {\n            contents = this.props.buttonText;\n        }\n\n        let widgetClassNames = 'col-sm-8';\n        let label = null;\n        if (this.props.label) {\n            label = (\n                <label\n                    className='control-label col-sm-4'\n                >\n                    {this.props.label}\n                </label>\n            );\n        } else {\n            widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;\n        }\n\n        return (\n            <div className='form-group'>\n                {label}\n                <div className={widgetClassNames}>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleRequest}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        {this.props.alternativeActionElement}\n                        {message}\n                    </div>\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {recycleDatabaseConnection} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DatabaseSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        // driverName and dataSource are read-only from the UI\n\n        config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);\n        config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);\n        config.SqlSettings.Trace = this.state.trace;\n        config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);\n        config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            driverName: config.SqlSettings.DriverName,\n            dataSource: config.SqlSettings.DataSource,\n            maxIdleConns: config.SqlSettings.MaxIdleConns,\n            maxOpenConns: config.SqlSettings.MaxOpenConns,\n            trace: config.SqlSettings.Trace,\n            queryTimeout: config.SqlSettings.QueryTimeout,\n            connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.database.title'\n                defaultMessage='Database Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));\n\n        let recycleDbButton = <div/>;\n        if (this.props.license.IsLicensed === 'true') {\n            recycleDbButton = (\n                <RequestButton\n                    requestAction={recycleDatabaseConnection}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.recycle.recycleDescription'\n                            defaultMessage='Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.'\n                            values={{\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.recycle.recycleDescription.featureName'\n                                            defaultMessage='Recycle Database Connections'\n                                        />\n                                    </b>\n                                ),\n                                reloadConfiguration: (\n                                    <a href='../general/configuration'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.recycle.recycleDescription.reloadConfiguration'\n                                                defaultMessage='Configuration > Reload Configuration from Disk'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.recycle.button'\n                            defaultMessage='Recycle Database Connections'\n                        />\n                    }\n                    showSuccessMessage={false}\n                    errorMessage={{\n                        id: t('admin.recycle.reloadFail'),\n                        defaultMessage: 'Recycling unsuccessful: {error}',\n                    }}\n                    includeDetailedError={true}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.sql.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DriverName'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.driverName'\n                            defaultMessage='Driver Name:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={this.state.driverName}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.driverNameDescription'\n                                defaultMessage='Set the database driver in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DataSource'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.dataSource'\n                            defaultMessage='Data Source:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={dataSource}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.dataSourceDescription'\n                                defaultMessage='Set the database source in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <TextSetting\n                    id='maxIdleConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsTitle'\n                            defaultMessage='Maximum Idle Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxConnectionsExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsDescription'\n                            defaultMessage='Maximum number of idle connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxIdleConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxIdleConns')}\n                />\n                <TextSetting\n                    id='maxOpenConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenTitle'\n                            defaultMessage='Maximum Open Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxOpenExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenDescription'\n                            defaultMessage='Maximum number of open connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxOpenConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxOpenConns')}\n                />\n                <TextSetting\n                    id='queryTimeout'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutTitle'\n                            defaultMessage='Query Timeout:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.queryTimeoutExample', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutDescription'\n                            defaultMessage='The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query.'\n                        />\n                    }\n                    value={this.state.queryTimeout}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.QueryTimeout')}\n                />\n                <TextSetting\n                    id='connMaxLifetimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeTitle'\n                            defaultMessage='Maximum Connection Lifetime:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxLifetimeExample', 'E.g.: \"3600000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeDescription'\n                            defaultMessage='Maximum lifetime for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxLifetimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')}\n                />\n                <BooleanSetting\n                    id='trace'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.traceTitle'\n                            defaultMessage='SQL Statement Logging: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.traceDescription'\n                            defaultMessage='(Development Mode) When true, executing SQL statements are written to the log.'\n                        />\n                    }\n                    value={this.state.trace}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.Trace')}\n                />\n                {recycleDbButton}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {elasticsearchPurgeIndexes, elasticsearchTest} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ElasticsearchSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.doTestConfig = this.doTestConfig.bind(this);\n        this.handleSettingChanged = this.handleSettingChanged.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;\n        config.ElasticsearchSettings.Username = this.state.username;\n        config.ElasticsearchSettings.Password = this.state.password;\n        config.ElasticsearchSettings.Sniff = this.state.sniff;\n        config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;\n        config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            connectionUrl: config.ElasticsearchSettings.ConnectionUrl,\n            username: config.ElasticsearchSettings.Username,\n            password: config.ElasticsearchSettings.Password,\n            sniff: config.ElasticsearchSettings.Sniff,\n            enableIndexing: config.ElasticsearchSettings.EnableIndexing,\n            enableSearching: config.ElasticsearchSettings.EnableSearching,\n            configTested: true,\n            canSave: true,\n            canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing,\n        };\n    }\n\n    handleSettingChanged(id, value) {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                });\n            } else {\n                this.setState({\n                    canSave: false,\n                    configTested: false,\n                });\n            }\n        }\n\n        if (id === 'connectionUrl' || id === 'username' || id === 'password' || id === 'sniff') {\n            this.setState({\n                configTested: false,\n                canSave: false,\n            });\n        }\n\n        if (id !== 'enableSearching') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        this.handleChange(id, value);\n    }\n\n    handleSaved() {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing,\n        });\n    }\n\n    canSave() {\n        return this.state.canSave;\n    }\n\n    doTestConfig(success, error) {\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.getConfigFromState(config);\n\n        elasticsearchTest(\n            config,\n            () => {\n                this.setState({\n                    configTested: true,\n                    canSave: true,\n                });\n                success();\n                this.doSubmit();\n            },\n            (err) => {\n                this.setState({\n                    configTested: false,\n                    canSave: false,\n                });\n                error(err);\n            }\n        );\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.elasticsearch.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.elasticsearch.title'\n                defaultMessage='Elasticsearch'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingTitle'\n                            defaultMessage='Enable Elasticsearch Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Elasticsearch in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableIndexing')}\n                />\n                <TextSetting\n                    id='connectionUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlTitle'\n                            defaultMessage='Server Connection Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.connectionUrlExample', 'E.g.: \"https://elasticsearch.example.org:9200\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlDescription'\n                            defaultMessage='The address of the Elasticsearch server. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-server-setup/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.connectionUrlExample.documentationLinkText'\n                                            defaultMessage='Please see documentation with server setup instructions.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.connectionUrl}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')}\n                />\n                <TextSetting\n                    id='username'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameTitle'\n                            defaultMessage='Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.usernameExample', 'E.g.: \"elastic\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameDescription'\n                            defaultMessage='(Optional) The username to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.username}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Username')}\n                />\n                <TextSetting\n                    id='password'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordTitle'\n                            defaultMessage='Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.password', 'E.g.: \"yourpassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordDescription'\n                            defaultMessage='(Optional) The password to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.password}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Password')}\n                />\n                <BooleanSetting\n                    id='sniff'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffTitle'\n                            defaultMessage='Enable Cluster Sniffing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffDescription'\n                            defaultMessage='When true, sniffing finds and connects to all data nodes in your cluster automatically.'\n                        />\n                    }\n                    value={this.state.sniff}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Sniff')}\n                />\n                <RequestButton\n                    requestAction={this.doTestConfig}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.testHelpText'\n                            defaultMessage='Tests if the Mattermost server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.elasticsearch_test_button'\n                            defaultMessage='Test Connection'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.testConfigSuccess'),\n                        defaultMessage: 'Test successful. Configuration saved.',\n                    }}\n                    disabled={!this.state.enableIndexing}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.elasticsearch.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.ELASTICSEARCH_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.help'\n                                        defaultMessage='All posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    requestAction={elasticsearchPurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the index on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing post database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.success'),\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.error'),\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={!this.state.canPurgeAndIndex}\n                    label={(\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingTitle'\n                            defaultMessage='Enable Elasticsearch for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={!this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableSearching')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class EmailConnectionTestButton extends React.Component {\n    static get propTypes() {\n        return {\n            config: PropTypes.object.isRequired,\n            getConfigFromState: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            actions: PropTypes.shape({\n                testEmail: PropTypes.func.isRequired,\n            }).isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            testing: false,\n            success: false,\n            fail: null,\n        };\n    }\n\n    handleTestConnection = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            testing: true,\n            success: false,\n            fail: null,\n        });\n\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.props.getConfigFromState(config);\n\n        this.props.actions.testEmail(config).then(\n            (data) => {\n                if (data.error) {\n                    let fail = data.error.message;\n                    if (data.error.detailed_error) {\n                        fail += ' - ' + data.error.detailed_error;\n                    }\n                    this.setState({\n                        testing: false,\n                        fail,\n                    });\n                } else {\n                    this.setState({\n                        testing: false,\n                        success: true,\n                    });\n                }\n            }\n        );\n    }\n\n    render() {\n        let testMessage = null;\n        if (this.state.success) {\n            testMessage = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.email.emailSuccess'\n                        defaultMessage='No errors were reported while sending an email.  Please check your inbox to make sure.'\n                    />\n                </div>\n            );\n        } else if (this.state.fail) {\n            testMessage = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    {this.state.fail}\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.testing) {\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.testing', 'Testing Icon')}\n                    />\n                    {Utils.localizeMessage('admin.email.testing', 'Testing...')}\n                </span>\n            );\n        } else {\n            contents = (\n                <FormattedMessage\n                    id='admin.email.connectionSecurityTest'\n                    defaultMessage='Test Connection'\n                />\n            );\n        }\n\n        return (\n            <div className='form-group email-connection-test'>\n                <div className='col-sm-offset-4 col-sm-8'>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleTestConnection}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        <div>\n                            {testMessage}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {testEmail} from 'mattermost-redux/actions/admin';\n\nimport EmailConnectionTestButton from './email_connection_test.jsx';\n\nexport default connect(null, mapDispatchToProps)(EmailConnectionTestButton);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            testEmail,\n        }, dispatch),\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst SECTION_NONE = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNone'\n                defaultMessage='None'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNoneDescription'\n                defaultMessage='Mattermost will connect over an insecure connection.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_TLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTls'\n                defaultMessage='TLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTlsDescription'\n                defaultMessage='Encrypts the communication between Mattermost and your server.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_STARTTLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStart'\n                defaultMessage='STARTTLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStartDescription'\n                defaultMessage='Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS.'\n            />\n        </td>\n    </tr>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_EMAIL = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_LDAP = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n        </tbody>\n    </table>\n);\n\nexport const WEBSERVER_MODE_HELP_TEXT = (\n    <div>\n        <table\n            className='table table-bordered table-margin--none'\n            cellPadding='5'\n        >\n            <tbody>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzip'\n                            defaultMessage='gzip'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzipDescription'\n                            defaultMessage='The Mattermost server will serve static files compressed with gzip.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressed'\n                            defaultMessage='Uncompressed'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressedDescription'\n                            defaultMessage='The Mattermost server will serve static files uncompressed.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabled'\n                            defaultMessage='Disabled'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabledDescription'\n                            defaultMessage='The Mattermost server will not serve static files.'\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <p className='help-text'>\n            <FormattedMessage\n                id='admin.webserverModeHelpText'\n                defaultMessage='gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly.'\n            />\n        </p>\n    </div>\n);\n\nexport const LOG_LEVEL_OPTIONS = [\n    {\n        value: 'DEBUG',\n        display_name: 'DEBUG',\n        display_name_default: 'DEBUG',\n    },\n    {\n        value: 'INFO',\n        display_name: 'INFO',\n        display_name_default: 'INFO',\n    },\n    {\n        value: 'ERROR',\n        display_name: 'ERROR',\n        display_name_default: 'ERROR',\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport DropdownSetting from './dropdown_setting.jsx';\n\nimport {CONNECTION_SECURITY_HELP_TEXT_EMAIL} from './admin_definition_constants';\n\nexport function ConnectionSecurityDropdownSettingEmail(props) {\n    return (\n        <DropdownSetting\n            id='connectionSecurity'\n            values={[\n                {value: '', text: Utils.localizeMessage('admin.connectionSecurityNone', 'None')},\n                {value: 'TLS', text: Utils.localizeMessage('admin.connectionSecurityTls', 'TLS (Recommended)')},\n                {value: 'STARTTLS', text: Utils.localizeMessage('admin.connectionSecurityStart')},\n            ]}\n            label={\n                <FormattedMessage\n                    id='admin.connectionSecurityTitle'\n                    defaultMessage='Connection Security:'\n                />\n            }\n            value={props.value}\n            onChange={props.onChange}\n            disabled={props.disabled}\n            helpText={CONNECTION_SECURITY_HELP_TEXT_EMAIL}\n            setByEnv={props.setByEnv}\n        />\n    );\n}\nConnectionSecurityDropdownSettingEmail.defaultProps = {\n};\n\nConnectionSecurityDropdownSettingEmail.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    setByEnv: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport ErrorStore from 'stores/error_store.jsx';\nimport {AnnouncementBarMessages} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport EmailConnectionTest from 'components/admin_console/email_connection_test';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport {ConnectionSecurityDropdownSettingEmail} from './connection_security_dropdown_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst EMAIL_NOTIFICATION_CONTENTS_FULL = 'full';\nconst EMAIL_NOTIFICATION_CONTENTS_GENERIC = 'generic';\n\nexport default class EmailSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendEmailNotifications = this.state.sendEmailNotifications;\n        config.EmailSettings.EnablePreviewModeBanner = this.state.enablePreviewModeBanner;\n        config.EmailSettings.FeedbackName = this.state.feedbackName;\n        config.EmailSettings.FeedbackEmail = this.state.feedbackEmail;\n        config.EmailSettings.FeedbackOrganization = this.state.feedbackOrganization;\n        config.EmailSettings.EnableSMTPAuth = this.state.enableSMTPAuth;\n        config.EmailSettings.SMTPUsername = this.state.smtpUsername;\n        config.EmailSettings.SMTPPassword = this.state.smtpPassword;\n        config.EmailSettings.SMTPServer = this.state.smtpServer;\n        config.EmailSettings.SMTPPort = this.state.smtpPort;\n        config.EmailSettings.ConnectionSecurity = this.state.connectionSecurity;\n        config.EmailSettings.EnableEmailBatching = this.state.enableEmailBatching;\n        config.ServiceSettings.EnableSecurityFixAlert = this.state.enableSecurityFixAlert;\n        config.EmailSettings.SkipServerCertificateVerification = this.state.skipServerCertificateVerification;\n        config.EmailSettings.EmailNotificationContentsType = this.state.emailNotificationContentsType;\n\n        return config;\n    }\n\n    handleSaved(newConfig) {\n        if (newConfig.EmailSettings.SendEmailNotifications || !newConfig.EmailSettings.EnablePreviewModeBanner) {\n            ErrorStore.clearError(AnnouncementBarMessages.PREVIEW_MODE);\n        }\n    }\n\n    getStateFromConfig(config) {\n        return {\n            sendEmailNotifications: config.EmailSettings.SendEmailNotifications,\n            enablePreviewModeBanner: config.EmailSettings.EnablePreviewModeBanner,\n            feedbackName: config.EmailSettings.FeedbackName,\n            feedbackEmail: config.EmailSettings.FeedbackEmail,\n            feedbackOrganization: config.EmailSettings.FeedbackOrganization,\n            enableSMTPAuth: config.EmailSettings.EnableSMTPAuth,\n            smtpUsername: config.EmailSettings.SMTPUsername,\n            smtpPassword: config.EmailSettings.SMTPPassword,\n            smtpServer: config.EmailSettings.SMTPServer,\n            smtpPort: config.EmailSettings.SMTPPort,\n            connectionSecurity: config.EmailSettings.ConnectionSecurity,\n            enableEmailBatching: config.EmailSettings.EnableEmailBatching,\n            skipServerCertificateVerification: config.EmailSettings.SkipServerCertificateVerification,\n            enableSecurityFixAlert: config.ServiceSettings.EnableSecurityFixAlert,\n            emailNotificationContentsType: config.EmailSettings.EmailNotificationContentsType,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.email'\n                defaultMessage='Email'\n            />\n        );\n    }\n\n    renderSettings() {\n        let enableEmailBatchingDisabledText = null;\n\n        if (this.props.config.ClusterSettings.Enable) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.clusterEnabled'\n                    className='help-text'\n                >\n                    <FormattedHTMLMessage\n                        id='admin.email.enableEmailBatching.clusterEnabled'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in <b>Configuration > SiteURL</b>.'\n                    />\n                </span>\n            );\n        } else if (!this.props.config.ServiceSettings.SiteURL) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.siteURL'\n                    className='help-text'\n                >\n                    <FormattedMarkdownMessage\n                        id='admin.email.enableEmailBatching.siteURL'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in **Configuration > SiteURL**.'\n                    />\n                </span>\n            );\n        }\n\n        let emailNotificationContentsTypeDropdown = null;\n        let emailNotificationContentsHelpText = null;\n        if (this.props.license.EmailNotificationContents === 'true') {\n            const emailNotificationContentsTypes = [];\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_FULL, text: Utils.localizeMessage('admin.email.notification.contents.full', 'Send full message contents')});\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_GENERIC, text: Utils.localizeMessage('admin.email.notification.contents.generic', 'Send generic description with only sender name')});\n\n            if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_FULL) {\n                emailNotificationContentsHelpText = (\n                    <FormattedMarkdownMessage\n                        key='admin.email.notification.contents.full.description'\n                        id='admin.email.notification.contents.full.description'\n                        defaultMessage='Sender name and channel are included in email notifications.\\nTypically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            } else if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_GENERIC) {\n                emailNotificationContentsHelpText = (\n                    <FormattedMarkdownMessage\n                        key='admin.email.notification.contents.generic.description'\n                        id='admin.email.notification.contents.generic.description'\n                        defaultMessage='Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications.\\nTypically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            }\n\n            emailNotificationContentsTypeDropdown = (\n                <DropdownSetting\n                    id='emailNotificationContentsType'\n                    values={emailNotificationContentsTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notification.contents.title'\n                            defaultMessage='Email Notification Contents: '\n                        />\n                    }\n                    value={this.state.emailNotificationContentsType}\n                    onChange={this.handleChange}\n                    helpText={emailNotificationContentsHelpText}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EmailNotificationContentsType')}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='sendEmailNotifications'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationsTitle'\n                            defaultMessage='Enable Email Notifications: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.notificationsDescription'\n                            defaultMessage='Typically set to true in production. When true, Mattermost attempts to send email notifications. Developers may set this field to false to skip email setup for faster development.'\n                        />\n                    }\n                    value={this.state.sendEmailNotifications}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('EmailSettings.SendEmailNotifications')}\n                />\n                <BooleanSetting\n                    id='enablePreviewModeBanner'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enablePreviewModeBannerTitle'\n                            defaultMessage='Enable Preview Mode Banner:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.enablePreviewModeBannerDescription'\n                            defaultMessage='When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.'\n                        />\n                    }\n                    value={this.state.enablePreviewModeBanner}\n                    onChange={this.handleChange}\n                    disabled={this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnablePreviewModeBanner')}\n                />\n                <BooleanSetting\n                    id='enableEmailBatching'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableEmailBatchingTitle'\n                            defaultMessage='Enable Email Batching: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableEmailBatchingDesc'\n                            id='admin.email.enableEmailBatchingDesc'\n                            defaultMessage='When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.'\n                        />,\n                        enableEmailBatchingDisabledText,\n                    ]}\n                    value={this.state.enableEmailBatching && !this.props.config.ClusterSettings.Enable && Boolean(this.props.config.ServiceSettings.SiteURL)}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.props.config.ClusterSettings.Enable || !this.props.config.ServiceSettings.SiteURL}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableEmailBatching')}\n                />\n                {emailNotificationContentsTypeDropdown}\n                <TextSetting\n                    id='feedbackName'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayTitle'\n                            defaultMessage='Notification Display Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationDisplayExample', 'Ex: \"Mattermost Notification\", \"System\", \"No-Reply\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayDescription'\n                            defaultMessage='Display name on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackName}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackName')}\n                />\n                <TextSetting\n                    id='feedbackEmail'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailTitle'\n                            defaultMessage='Notification From Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationEmailExample', 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailDescription'\n                            defaultMessage='Email address displayed on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackEmail}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackEmail')}\n                />\n                <TextSetting\n                    id='feedbackOrganization'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganization'\n                            defaultMessage='Notification Footer Mailing Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationOrganizationExample', 'Ex: \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganizationDescription'\n                            defaultMessage='Organization name and address displayed on email notifications from Mattermost, such as \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\". If the field is left empty, the organization name and address will not be displayed.'\n                        />\n                    }\n                    value={this.state.feedbackOrganization}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackOrganization')}\n                />\n                <TextSetting\n                    id='smtpServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpServerTitle'\n                            defaultMessage='SMTP Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpServerExample', 'Ex: \"smtp.yourcompany.com\", \"email-smtp.us-east-1.amazonaws.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpServerDescription'\n                            defaultMessage='Location of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpServer}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPServer')}\n                />\n                <TextSetting\n                    id='smtpPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPortTitle'\n                            defaultMessage='SMTP Server Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPortExample', 'Ex: \"25\", \"465\", \"587\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPortDescription'\n                            defaultMessage='Port of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpPort}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPort')}\n                />\n                <BooleanSetting\n                    id='enableSMTPAuth'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableSMTPAuthTitle'\n                            defaultMessage='Enable SMTP Authentication: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableSMTPAuthDesc'\n                            id='admin.email.enableSMTPAuthDesc'\n                            defaultMessage='When true, SMTP Authentication is enabled.'\n                        />,\n                    ]}\n                    value={this.state.enableSMTPAuth}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableSMTPAuth')}\n                />\n                <TextSetting\n                    id='smtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameTitle'\n                            defaultMessage='SMTP Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpUsernameExample', 'Ex: \"admin@yourcompany.com\", \"AKIADTOVBGERKLCBV\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpUsername}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPUsername')}\n                />\n                <TextSetting\n                    id='smtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordTitle'\n                            defaultMessage='SMTP Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPasswordExample', 'Ex: \"yourpassword\", \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpPassword}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPassword')}\n                />\n                <ConnectionSecurityDropdownSettingEmail\n                    value={this.state.connectionSecurity}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.ConnectionSecurity')}\n                />\n                <EmailConnectionTest\n                    config={this.props.config}\n                    getConfigFromState={this.getConfigFromState}\n                    disabled={!this.state.sendEmailNotifications}\n                />\n                <BooleanSetting\n                    id='skipServerCertificateVerification'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.title'\n                            defaultMessage='Skip Server Certificate Verification: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.description'\n                            defaultMessage='When true, Mattermost will not verify the email server certificate.'\n                        />\n                    }\n                    value={this.state.skipServerCertificateVerification}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.state.connectionSecurity === ''}\n                    setByEnv={this.isSetByEnv('EmailSettings.SkipServerCertificateVerification')}\n                />\n                <BooleanSetting\n                    id='enableSecurityFixAlert'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.securityTitle'\n                            defaultMessage='Enable Security Alerts: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.securityDesc'\n                            defaultMessage='When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.'\n                        />\n                    }\n                    value={this.state.enableSecurityFixAlert}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableSecurityFixAlert')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RadioSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <div\n                    className='radio'\n                    key={value}\n                >\n                    <label>\n                        <input\n                            type='radio'\n                            value={value}\n                            name={this.props.id}\n                            checked={value === this.props.value}\n                            onChange={this.handleChange}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        />\n                        {text}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                {options}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\nimport RadioSetting from './radio_setting';\n\nconst exportFormats = {\n    EXPORT_FORMAT_CSV: 'csv',\n    EXPORT_FORMAT_ACTIANCE: 'actiance',\n    EXPORT_FORMAT_GLOBALRELAY: 'globalrelay',\n};\n\nexport default class MessageExportSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;\n        config.MessageExportSettings.ExportFormat = this.state.exportFormat;\n        config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;\n\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            config.MessageExportSettings.GlobalRelaySettings = {\n                CustomerType: this.state.globalRelayCustomerType,\n                SmtpUsername: this.state.globalRelaySmtpUsername,\n                SmtpPassword: this.state.globalRelaySmtpPassword,\n                EmailAddress: this.state.globalRelayEmailAddress,\n\n            };\n        }\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enableComplianceExport: config.MessageExportSettings.EnableExport,\n            exportFormat: config.MessageExportSettings.ExportFormat,\n            exportJobStartTime: config.MessageExportSettings.DailyRunTime,\n        };\n        if (config.MessageExportSettings.GlobalRelaySettings) {\n            state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;\n            state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;\n            state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;\n            state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;\n        }\n        return state;\n    }\n\n    getJobDetails = (job) => {\n        if (job.data && job.data.messages_exported) {\n            return (\n                <FormattedMessage\n                    id='admin.complianceExport.messagesExportedCount'\n                    defaultMessage='{count} messages exported.'\n                    values={{\n                        count: job.data.messages_exported,\n                    }}\n                />\n            );\n        }\n        return null;\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.complianceExport.title'\n                defaultMessage='Compliance Export (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const exportFormatOptions = [\n            {value: exportFormats.EXPORT_FORMAT_ACTIANCE, text: Utils.localizeMessage('admin.complianceExport.exportFormat.actiance', 'Actiance XML')},\n            {value: exportFormats.EXPORT_FORMAT_CSV, text: Utils.localizeMessage('admin.complianceExport.exportFormat.csv', 'CSV')},\n            {value: exportFormats.EXPORT_FORMAT_GLOBALRELAY, text: Utils.localizeMessage('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')},\n        ];\n\n        // if the export format is globalrelay, the user needs to set some additional parameters\n        let globalRelaySettings;\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            const globalRelayCustomerType = (\n                <RadioSetting\n                    id='globalRelayCustomerType'\n                    values={[\n                        {value: 'A9', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')},\n                        {value: 'A10', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.title'\n                            defaultMessage='Customer Type:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.description'\n                            defaultMessage='The type of GlobalRelay customer account that your organization has.'\n                        />\n                    }\n                    value={this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')}\n                />\n            );\n\n            const globalRelaySmtpUsername = (\n                <TextSetting\n                    id='globalRelaySmtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.title'\n                            defaultMessage='SMTP Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: \"globalRelayUser\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.description'\n                            defaultMessage='The username that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')}\n                />\n            );\n\n            const globalRelaySmtpPassword = (\n                <TextSetting\n                    id='globalRelaySmtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.title'\n                            defaultMessage='SMTP Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: \"globalRelayPassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.description'\n                            defaultMessage='The password that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')}\n                />\n            );\n\n            const globalRelayEmail = (\n                <TextSetting\n                    id='globalRelayEmailAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.title'\n                            defaultMessage='Email Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: \"globalrelay@mattermost.com\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.description'\n                            defaultMessage='The email address that your GlobalRelay server monitors for incoming Compliance Exports.'\n                        />\n                    }\n                    value={this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')}\n                />\n            );\n\n            globalRelaySettings = (\n                <SettingsGroup id={'globalRelaySettings'} >\n                    {globalRelayCustomerType}\n                    {globalRelaySmtpUsername}\n                    {globalRelaySmtpPassword}\n                    {globalRelayEmail}\n                </SettingsGroup>\n            );\n        }\n\n        const dropdownHelpText = (\n            <FormattedMarkdownMessage\n                id='admin.complianceExport.exportFormat.description'\n                defaultMessage='Format of the compliance export. Corresponds to the system that you want to import the data into.\\n \\nFor Actiance XML, compliance export files are written to the \\\"exports\\\" subdirectory of the configured [Local Storage Directory]({siteURL}/admin_console/files/storage). For Global Relay EML, they are emailed to the configured email address.'\n                values={{siteURL: getSiteURL()}}\n            />\n        );\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableComplianceExport'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.complianceExportTitle'\n                            defaultMessage='Enable Compliance Export:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.complianceExportDesc'\n                            defaultMessage='When true, Mattermost will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See [the documentation](!https://about.mattermost.com/default-compliance-export-documentation) to learn more.'\n                        />\n                    }\n                    value={this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableExport')}\n                />\n\n                <TextSetting\n                    id='exportJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.title'\n                            defaultMessage='Compliance Export Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.exportJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.exportJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.exportJobStartTime}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DailyRunTime')}\n                />\n\n                <DropdownSetting\n                    id='exportFormat'\n                    values={exportFormatOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportFormat.title'\n                            defaultMessage='Export Format:'\n                        />\n                    }\n                    helpText={dropdownHelpText}\n                    value={this.state.exportFormat}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.ExportFormat')}\n                />\n\n                {globalRelaySettings}\n\n                <JobsTable\n                    jobType={JobTypes.MESSAGE_EXPORT}\n                    disabled={!this.state.enableComplianceExport}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.title'\n                            defaultMessage='Run Compliance Export Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.help'\n                            defaultMessage='Initiates a Compliance Export job immediately.'\n                        />\n                    }\n                    getExtraInfoText={this.getJobDetails}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport Setting from './setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class PasswordSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n\n        this.getSampleErrorMsg = this.getSampleErrorMsg.bind(this);\n\n        this.handlePasswordLengthChange = this.handlePasswordLengthChange.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n\n        this.state = Object.assign(this.state, {\n            passwordMinimumLength: props.config.PasswordSettings.MinimumLength,\n            passwordLowercase: props.config.PasswordSettings.Lowercase,\n            passwordNumber: props.config.PasswordSettings.Number,\n            passwordUppercase: props.config.PasswordSettings.Uppercase,\n            passwordSymbol: props.config.PasswordSettings.Symbol,\n            maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts,\n        });\n\n        // Update sample message from config settings\n        t('user.settings.security.passwordErrorLowercase');\n        t('user.settings.security.passwordErrorLowercaseUppercase');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseUppercaseSymbol');\n        t('user.settings.security.passwordErrorLowercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseSymbol');\n        t('user.settings.security.passwordErrorUppercase');\n        t('user.settings.security.passwordErrorUppercaseNumber');\n        t('user.settings.security.passwordErrorUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorUppercaseSymbol');\n        t('user.settings.security.passwordErrorNumber');\n        t('user.settings.security.passwordErrorNumberSymbol');\n        t('user.settings.security.passwordErrorSymbol');\n\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (props.config.PasswordSettings.Lowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (props.config.PasswordSettings.Uppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (props.config.PasswordSettings.Number) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (props.config.PasswordSettings.Symbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        this.sampleErrorMsg = (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    getConfigFromState(config) {\n        config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, Constants.MIN_PASSWORD_LENGTH);\n        config.PasswordSettings.Lowercase = this.refs.lowercase.checked;\n        config.PasswordSettings.Uppercase = this.refs.uppercase.checked;\n        config.PasswordSettings.Number = this.refs.number.checked;\n        config.PasswordSettings.Symbol = this.refs.symbol.checked;\n\n        config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            passwordMinimumLength: config.PasswordSettings.MinimumLength,\n            passwordLowercase: config.PasswordSettings.Lowercase,\n            passwordNumber: config.PasswordSettings.Number,\n            passwordUppercase: config.PasswordSettings.Uppercase,\n            passwordSymbol: config.PasswordSettings.Symbol,\n            maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts,\n        };\n    }\n\n    getSampleErrorMsg(minLength) {\n        if (this.props.config.PasswordSettings.MinimumLength > Constants.MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < Constants.MIN_PASSWORD_LENGTH) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.passwordMinLength'\n                    default='Invalid minimum length, cannot show preview.'\n                />\n            );\n        }\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (this.refs.lowercase.checked) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (this.refs.uppercase.checked) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (this.refs.number.checked) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (this.refs.symbol.checked) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        return (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (minLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    handlePasswordLengthChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(value);\n        this.handleChange(id, value);\n    }\n\n    handleCheckboxChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(this.state.passwordMinimumLength);\n        this.handleChange(id, value);\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.password'\n                defaultMessage='Password'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <div>\n                    <TextSetting\n                        id='passwordMinimumLength'\n                        label={\n                            <FormattedMessage\n                                id='admin.password.minimumLength'\n                                defaultMessage='Minimum Password Length:'\n                            />\n                        }\n                        placeholder={Utils.localizeMessage('admin.password.minimumLengthExample', 'E.g.: \"5\"')}\n                        helpText={\n                            <FormattedMessage\n                                id='admin.password.minimumLengthDescription'\n                                defaultMessage='Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.'\n                                values={{\n                                    min: Constants.MIN_PASSWORD_LENGTH,\n                                    max: Constants.MAX_PASSWORD_LENGTH,\n                                }}\n                            />\n                        }\n                        value={this.state.passwordMinimumLength}\n                        onChange={this.handlePasswordLengthChange}\n                        setByEnv={this.isSetByEnv('PasswordSettings.MinimumLength')}\n                    />\n                    <Setting\n                        label={\n                            <FormattedMessage\n                                id='passwordRequirements'\n                                defaultMessage='Password Requirements:'\n                            />\n                        }\n                    >\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='lowercase'\n                                    defaultChecked={this.state.passwordLowercase}\n                                    name='admin.password.lowercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.lowercase'\n                                    defaultMessage='At least one lowercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='uppercase'\n                                    defaultChecked={this.state.passwordUppercase}\n                                    name='admin.password.uppercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.uppercase'\n                                    defaultMessage='At least one uppercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='number'\n                                    defaultChecked={this.state.passwordNumber}\n                                    name='admin.password.number'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.number'\n                                    defaultMessage='At least one number'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='symbol'\n                                    defaultChecked={this.state.passwordSymbol}\n                                    name='admin.password.symbol'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.symbol'\n                                    defaultMessage='At least one symbol (e.g. \"~!@#$%^&*()\")'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <br/>\n                            <label>\n                                <FormattedMessage\n                                    id='admin.password.preview'\n                                    defaultMessage='Error message preview:'\n                                />\n                            </label>\n                            <br/>\n                            {this.sampleErrorMsg}\n                        </div>\n                    </Setting>\n                </div>\n                <TextSetting\n                    id='maximumLoginAttempts'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.attemptTitle'\n                            defaultMessage='Maximum Login Attempts:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.attemptExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.attemptDescription'\n                            defaultMessage='Login attempts allowed before user is locked out and required to reset password via email.'\n                        />\n                    }\n                    value={this.state.maximumLoginAttempts}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\n\nimport FormError from 'components/form_error.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class MultiSelectSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        selected: PropTypes.array.isRequired,\n        mustBePresent: PropTypes.string,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n        noResultText: PropTypes.node,\n        errorText: PropTypes.node,\n        notPresent: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {error: false};\n    }\n\n    handleChange(newValue) {\n        const values = newValue.map((n) => {\n            return n.value;\n        });\n\n        if (this.props.selected.length > 0 && this.props.mustBePresent && values.join(',').indexOf(this.props.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.props.onChange(this.props.id, values);\n            this.setState({error: false});\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        if (newProps.selected.length > 0 && newProps.mustBePresent && newProps.selected.join(',').indexOf(newProps.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.setState({error: false});\n        }\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <ReactSelect\n                    id={this.props.id}\n                    multi={true}\n                    labelKey='text'\n                    options={this.props.values}\n                    joinValues={true}\n                    clearable={false}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                    noResultsText={this.props.noResultText}\n                    onChange={this.handleChange}\n                    value={this.props.selected}\n                />\n                <FormError error={this.state.error}/>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {ChromePicker} from 'react-color';\n\nimport Setting from './setting.jsx';\n\nexport default class ColorSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The unique identifer for the admin console setting\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The text/jsx display name for the setting\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * The text/jsx help text to display underneath the setting\n         */\n        helpText: PropTypes.node,\n\n        /*\n         * The hex color value\n         */\n        value: PropTypes.string.isRequired,\n\n        /*\n         * Function called when the input changes\n         */\n        onChange: PropTypes.func,\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPicker: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.closePicker);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.closePicker);\n    }\n\n    handleChange = (color) => {\n        this.props.onChange(this.props.id, color.hex);\n    }\n\n    togglePicker = () => {\n        if (this.props.disabled) {\n            this.setState({showPicker: false});\n        } else {\n            this.setState({showPicker: !this.state.showPicker});\n        }\n    }\n\n    closePicker = (e) => {\n        if (!e.target.closest('.' + this.getPickerClass())) {\n            this.setState({showPicker: false});\n        }\n    }\n\n    onTextInput = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    getPickerClass = () => {\n        return this.props.id ? 'picker-' + this.props.id.replace('.', '-') : '';\n    }\n\n    render() {\n        let picker;\n        if (this.state.showPicker) {\n            picker = (\n                <div className={'color-picker__popover ' + this.getPickerClass()}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div className='input-group color-picker colorpicker-element'>\n                    <input\n                        type='text'\n                        className='form-control'\n                        value={this.props.value}\n                        onChange={this.onTextInput}\n                        disabled={this.props.disabled}\n                    />\n                    <span\n                        className={'input-group-addon ' + this.getPickerClass()}\n                        onClick={this.togglePicker}\n                    >\n                        <i style={{backgroundColor: this.props.value}}/>\n                    </span>\n                    {picker}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SetByEnv from './set_by_env';\n\nexport default class GeneratedSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            value: PropTypes.string.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            setByEnv: PropTypes.bool.isRequired,\n            disabledText: PropTypes.node,\n            helpText: PropTypes.node.isRequired,\n            regenerateText: PropTypes.node,\n            regenerateHelpText: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            disabled: false,\n            regenerateText: (\n                <FormattedMessage\n                    id='admin.regenerate'\n                    defaultMessage='Regenerate'\n                />\n            ),\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.regenerate = this.regenerate.bind(this);\n    }\n\n    regenerate(e) {\n        e.preventDefault();\n\n        this.props.onChange(this.props.id, crypto.randomBytes(256).toString('base64').substring(0, 32));\n    }\n\n    render() {\n        let disabledText = null;\n        if (this.props.disabled && this.props.disabledText) {\n            disabledText = (\n                <div className='admin-console__disabled-text'>\n                    {this.props.disabledText}\n                </div>\n            );\n        }\n\n        let regenerateHelpText = null;\n        if (this.props.regenerateHelpText) {\n            regenerateHelpText = (\n                <div className='help-text'>\n                    {this.props.regenerateHelpText}\n                </div>\n            );\n        }\n\n        let text = this.props.value;\n        if (!text) {\n            text = (\n                <span className='placeholder-text'>{this.props.placeholder}</span>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={this.props.id}\n                >\n                    {this.props.label}\n                </label>\n                <div className='col-sm-8'>\n                    <div\n                        className='form-control disabled'\n                        id={this.props.id}\n                    >\n                        {text}\n                    </div>\n                    {disabledText}\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.regenerate}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        >\n                            {this.props.regenerateText}\n                        </button>\n                    </div>\n                    {regenerateHelpText}\n                    {this.props.setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport Setting from 'components/admin_console/setting.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class UserAutocompleteSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.string,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.userSuggestionProviders = [new GenericUserProvider()];\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    handleUserSelected = (user) => {\n        this.props.onChange(this.props.id, user.username);\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div\n                    className='admin-setting-user__dropdown'\n                >\n                    <SuggestionBox\n                        id={'admin_user_setting_' + this.props.id}\n                        className='form-control'\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        onChange={this.handleChange}\n                        onItemSelected={this.handleUserSelected}\n                        listComponent={SuggestionList}\n                        listStyle='bottom'\n                        providers={this.userSuggestionProviders}\n                        disabled={this.props.disabled}\n                        requiredCharacters={0}\n                        openOnFocus={true}\n                    />\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class FileUploadSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            uploadingText: PropTypes.node,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            fileType: PropTypes.string.isRequired,\n            error: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileName: null,\n            serverError: props.error,\n        };\n    }\n\n    handleChange = () => {\n        const files = this.refs.fileInput.files;\n        if (files && files.length > 0) {\n            this.setState({fileSelected: true, fileName: files[0].name});\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        $(this.refs.upload_button).button('loading');\n        this.props.onSubmit(this.props.id, this.refs.fileInput.files[0], (error) => {\n            $(this.refs.upload_button).button('reset');\n            if (error) {\n                Utils.clearFileInput(this.refs.fileInput);\n            }\n        });\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.file_upload.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='file__upload'>\n                        <button\n                            className='btn btn-default'\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.file_upload.chooseFile'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            disabled={this.props.disabled}\n                            accept={this.props.fileType}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        ref='upload_button'\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`}\n                    >\n                        <FormattedMessage\n                            id='admin.file_upload.uploadFile'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    {serverError}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RemoveFileSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            removeButtonText: PropTypes.node.isRequired,\n            removingText: PropTypes.node,\n            fileName: PropTypes.string.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    handleRemove = (e) => {\n        e.preventDefault();\n\n        $(this.refs.remove_button).button('loading');\n        this.props.onSubmit(this.props.id, () => {\n            $(this.refs.remove_button).button('reset');\n        });\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='help-text remove-filename'>\n                        {this.props.fileName}\n                    </div>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        ref='remove_button'\n                        disabled={this.props.disabled}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`}\n                    >\n                        {this.props.removeButtonText}\n                    </button>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport {saveConfig} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {formatText} from 'utils/text_formatting.jsx';\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport * as Utils from 'utils/utils.jsx';\nimport RequestButton from 'components/admin_console/request_button/request_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport BooleanSetting from 'components/admin_console/boolean_setting.jsx';\nimport TextSetting from 'components/admin_console/text_setting.jsx';\nimport DropdownSetting from 'components/admin_console/dropdown_setting.jsx';\nimport MultiSelectSetting from 'components/admin_console/multiselect_settings.jsx';\nimport RadioSetting from 'components/admin_console/radio_setting.jsx';\nimport ColorSetting from 'components/admin_console/color_setting.jsx';\nimport GeneratedSetting from 'components/admin_console/generated_setting.jsx';\nimport UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting.jsx';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport JobsTable from 'components/admin_console/jobs';\nimport FileUploadSetting from 'components/admin_console/file_upload_setting.jsx';\nimport RemoveFileSetting from 'components/admin_console/remove_file_setting.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class SchemaAdminSettings extends React.Component {\n    static propTypes = {\n        config: PropTypes.object,\n        environmentConfig: PropTypes.object,\n        setNavigationBlocked: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n        this.isPlugin = false;\n\n        this.buildSettingFunctions = {\n            [Constants.SettingsTypes.TYPE_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_LONG_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_COLOR]: this.buildColorSetting,\n            [Constants.SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,\n            [Constants.SettingsTypes.TYPE_PERMISSION]: this.buildPermissionSetting,\n            [Constants.SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,\n            [Constants.SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,\n            [Constants.SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,\n            [Constants.SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,\n            [Constants.SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,\n            [Constants.SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,\n            [Constants.SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,\n            [Constants.SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,\n            [Constants.SettingsTypes.TYPE_FILE_UPLOAD]: this.buildFileUploadSetting,\n            [Constants.SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting,\n        };\n        this.state = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...SchemaAdminSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {\n            const settings = (this.props.schema && this.props.schema.settings) || [];\n            const rolesBinding = settings.reduce((acc, val) => {\n                if (val.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    acc[val.permissions_mapping_name] = this.state[val.key].toString();\n                }\n                return acc;\n            }, {});\n            const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);\n\n            let success = true;\n\n            await Promise.all(Object.values(updatedRoles).map(async (item) => {\n                try {\n                    await this.props.editRole(item);\n                } catch (err) {\n                    success = false;\n                    this.setState({\n                        saving: false,\n                        serverError: err.message,\n                    });\n                }\n            }));\n\n            if (!success) {\n                return;\n            }\n        }\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {\n            this.doSubmit(null, SchemaAdminSettings.getStateFromConfig);\n        } else {\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.setNavigationBlocked(false);\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    this.setConfigValue(config, setting.key, null);\n                    return;\n                }\n\n                let value = this.getSettingValue(setting);\n                const previousValue = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigSave) {\n                    value = setting.onConfigSave(value, previousValue);\n                }\n\n                this.setConfigValue(config, setting.key, value);\n            });\n\n            if (schema.onConfigSave) {\n                return schema.onConfigSave(config, this.props.config);\n            }\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema, roles) {\n        let state = {};\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    try {\n                        state[setting.key] = mappingValueFromRoles(setting.permissions_mapping_name, roles) === 'true';\n                    } catch (e) {\n                        state[setting.key] = false;\n                    }\n                    return;\n                }\n\n                let value = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigLoad) {\n                    value = setting.onConfigLoad(value, config);\n                }\n\n                state[setting.key] = value == null ? setting.default : value;\n            });\n\n            if (schema.onConfigLoad) {\n                state = {...state, ...schema.onConfigLoad(config)};\n            }\n        }\n\n        return state;\n    }\n\n    getSetting(key) {\n        for (const setting of this.props.schema.settings) {\n            if (setting.key === key) {\n                return setting;\n            }\n        }\n\n        return null;\n    }\n\n    getSettingValue(setting) {\n        // Force boolean values to false when disabled.\n        if (setting.type === Constants.SettingsTypes.TYPE_BOOL) {\n            if (this.isDisabled(setting)) {\n                return false;\n            }\n        }\n        if (setting.type === Constants.SettingsTypes.TYPE_TEXT && setting.dynamic_value) {\n            return setting.dynamic_value(this.state[setting.key], this.props.config, this.state, this.props.license);\n        }\n\n        return this.state[setting.key];\n    }\n\n    renderTitle = () => {\n        if (!this.props.schema) {\n            return '';\n        }\n        if (this.props.schema.translate === false) {\n            return this.props.schema.name || this.props.schema.id;\n        }\n        return <FormattedMessage id={this.props.schema.name || this.props.schema.id}/>;\n    }\n\n    renderBanner = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.label}</span>;\n        }\n\n        if (typeof setting.label === 'string') {\n            if (setting.label_markdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={setting.label}\n                        values={setting.label_values}\n                        defaultMessage={setting.label_default}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={setting.label}\n                    defaultMessage={setting.label_default}\n                    values={setting.label_values}\n                />\n            );\n        }\n        return setting.label;\n    }\n\n    renderHelpText = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.help_text}</span>;\n        }\n\n        let helpText;\n        let isMarkdown;\n        let helpTextValues;\n        let helpTextDefault;\n        if (setting.disabled_help_text && this.isDisabled(setting)) {\n            helpText = setting.disabled_help_text;\n            isMarkdown = setting.disabled_help_text_markdown;\n            helpTextValues = setting.disabled_help_text_values;\n            helpTextDefault = setting.disabled_help_text_default;\n        } else {\n            helpText = setting.help_text;\n            isMarkdown = setting.help_text_markdown;\n            helpTextValues = setting.help_text_values;\n            helpTextDefault = setting.help_text_default;\n        }\n\n        if (typeof helpText === 'string') {\n            if (isMarkdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={helpText}\n                        values={helpTextValues}\n                        defaultMessage={helpTextDefault}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={helpText}\n                    defaultMessage={helpTextDefault}\n                    values={helpTextValues}\n                />\n            );\n        }\n\n        return helpText;\n    }\n\n    renderLabel = (setting) => {\n        if (!this.props.schema) {\n            return '';\n        }\n\n        if (this.props.schema.translate === false) {\n            return setting.label;\n        }\n        return Utils.localizeMessage(setting.label, setting.label_default);\n    }\n\n    isDisabled = (setting) => {\n        if (typeof setting.isDisabled === 'function') {\n            return setting.isDisabled(this.props.config, this.state, this.props.license);\n        }\n        return Boolean(setting.isDisabled);\n    }\n\n    isHidden = (setting) => {\n        if (typeof setting.isHidden === 'function') {\n            return setting.isHidden(this.props.config, this.state, this.props.license);\n        }\n        return Boolean(setting.isHidden);\n    }\n\n    buildButtonSetting = (setting) => {\n        return (\n            <RequestButton\n                key={this.props.schema.id + '_text_' + setting.key}\n                requestAction={setting.action}\n                helpText={this.renderHelpText(setting)}\n                loadingText={Utils.localizeMessage(setting.loading, setting.loading_default)}\n                buttonText={<span>{this.renderLabel(setting)}</span>}\n                showSuccessMessage={Boolean(setting.success_message)}\n                includeDetailedError={true}\n                errorMessage={{\n                    id: setting.error_message,\n                    defaultMessage: setting.error_message_default,\n                }}\n                successMessage={setting.success_message && {\n                    id: setting.success_message,\n                    defaultMessage: setting.success_message_default,\n                }}\n            />\n        );\n    }\n\n    buildTextSetting = (setting) => {\n        let inputType = 'input';\n        if (setting.type === Constants.SettingsTypes.TYPE_NUMBER) {\n            inputType = 'number';\n        } else if (setting.type === Constants.SettingsTypes.TYPE_LONG_TEXT) {\n            inputType = 'textarea';\n        }\n\n        let value = this.state[setting.key] || '';\n        if (setting.dynamic_value) {\n            value = setting.dynamic_value(value, this.props.config, this.state, this.props.license);\n        }\n\n        return (\n            <TextSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                type={inputType}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                maxLength={setting.max_length}\n            />\n        );\n    }\n\n    buildColorSetting = (setting) => {\n        return (\n            <ColorSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBoolSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildPermissionSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handlePermissionChange}\n            />\n        );\n    }\n\n    buildDropdownSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: Utils.localizeMessage(o.display_name)}));\n        const selectedValue = this.state[setting.key] || values[0].value;\n\n        let selectedOptionForHelpText = null;\n        for (const option of options) {\n            if (option.help_text && option.value === selectedValue) {\n                selectedOptionForHelpText = option;\n                break;\n            }\n        }\n\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_dropdown_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(selectedOptionForHelpText || setting)}\n                value={selectedValue}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildLanguageSetting = (setting) => {\n        const locales = I18n.getAllLanguages();\n        const values = Object.keys(locales).map((l) => {\n            return {value: locales[l].value, text: locales[l].name, order: locales[l].order};\n        }).sort((a, b) => a.order - b.order);\n\n        if (setting.multiple) {\n            const noResultText = (\n                <FormattedMessage\n                    id={setting.no_result}\n                    defaultMessage={setting.no_result_default}\n                />\n            );\n            const notPresent = (\n                <FormattedMessage\n                    id={setting.not_present}\n                    defaultMessage={setting.not_present_default}\n                />\n            );\n            return (\n                <MultiSelectSetting\n                    key={this.props.schema.id + '_language_' + setting.key}\n                    id={setting.key}\n                    label={this.renderLabel(setting)}\n                    values={values}\n                    helpText={this.renderHelpText(setting)}\n                    selected={(this.state[setting.key] && this.state[setting.key].split(',')) || []}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                    onChange={(changedId, value) => this.handleChange(changedId, value.join(','))}\n                    noResultText={noResultText}\n                    notPresent={notPresent}\n                />\n            );\n        }\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_language_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                values={values}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildRadioSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: o.display_name}));\n\n        return (\n            <RadioSetting\n                key={this.props.schema.id + '_radio_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0]}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBannerSetting = (setting) => {\n        if (this.isDisabled(setting)) {\n            return null;\n        }\n        return (\n            <div\n                className={'banner ' + setting.banner_type}\n                key={this.props.schema.id + '_bool_' + setting.key}\n            >\n                <div className='banner__content'>\n                    <span>{this.renderBanner(setting)}</span>\n                </div>\n            </div>\n        );\n    }\n\n    buildGeneratedSetting = (setting) => {\n        return (\n            <GeneratedSetting\n                key={this.props.schema.id + '_generated_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                regenerateHelpText={setting.regenerate_help_text}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleGeneratedChange}\n            />\n        );\n    }\n\n    handleGeneratedChange = (id, s) => {\n        this.handleChange(id, s.replace('+', '-').replace('/', '_'));\n    }\n\n    handleChange = (id, value) => {\n        let saveNeeded = 'config';\n        if (this.state.saveNeeded === 'permissions') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handlePermissionChange = (id, value) => {\n        let saveNeeded = 'permissions';\n        if (this.state.saveNeeded === 'config') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    buildUsernameSetting = (setting) => {\n        return (\n            <UserAutocompleteSetting\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default) || Utils.localizeMessage('search_bar.search', 'Search')}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildJobsTableSetting = (setting) => {\n        return (\n            <JobsTable\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                jobType={setting.job_type}\n                getExtraInfoText={setting.render_job}\n                disabled={this.isDisabled(setting)}\n                createJobButtonText={\n                    <FormattedMessage\n                        id={setting.label}\n                        defaultMessage={setting.label_default}\n                    />\n                }\n                createJobHelpText={\n                    <FormattedMarkdownMessage\n                        id={setting.help_text}\n                        defaultMessage={setting.help_text_default}\n                    />\n                }\n            />\n        );\n    }\n\n    buildFileUploadSetting = (setting) => {\n        if (this.state[setting.key]) {\n            const removeFile = (id, callback) => {\n                const successCallback = () => {\n                    this.handleChange(setting.key, '');\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: null});\n                };\n                const errorCallback = (error) => {\n                    callback();\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n                };\n                setting.remove_action(successCallback, errorCallback);\n            };\n            return (\n                <RemoveFileSetting\n                    id={this.props.schema.id}\n                    key={this.props.schema.id + '_fileupload_' + setting.key}\n                    label={this.renderLabel(setting)}\n                    helpText={\n                        <FormattedMessage\n                            id={setting.remove_help_text}\n                            defaultMessage={setting.remove_help_text_default}\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage(setting.remove_button_text, setting.remove_button_text_default)}\n                    removingText={Utils.localizeMessage(setting.removing_text, setting.removing_text_default)}\n                    fileName={this.state[setting.key]}\n                    onSubmit={removeFile}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                />\n            );\n        }\n        const uploadFile = (id, file, callback) => {\n            const successCallback = () => {\n                const fileName = file.name;\n                this.handleChange(id, fileName);\n                this.setState({[setting.key]: fileName, [`${setting.key}Error`]: null});\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            };\n            const errorCallback = (error) => {\n                if (callback && typeof callback === 'function') {\n                    callback(error.message);\n                }\n            };\n            setting.upload_action(file, successCallback, errorCallback);\n        };\n        return (\n            <FileUploadSetting\n                id={setting.key}\n                key={this.props.schema.id + '_fileupload_' + setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                uploadingText={Utils.localizeMessage(setting.uploading_text, setting.uploading_text_default)}\n                disabled={this.isDisabled(setting)}\n                fileType={setting.fileType}\n                onSubmit={uploadFile}\n                error={this.state.idpCertificateFileError}\n                setByEnv={this.isSetByEnv(setting.key)}\n            />\n        );\n    }\n\n    buildCustomSetting = (setting) => {\n        const CustomComponent = setting.component;\n        return (\n            <CustomComponent\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const schema = this.props.schema;\n\n        if (!schema) {\n            return <LoadingScreen/>;\n        }\n\n        const settingsList = [];\n        if (schema.settings) {\n            schema.settings.forEach((setting) => {\n                if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                    // This is a hack required as plugin settings are case insensitive\n                    let s = setting;\n                    if (this.isPlugin) {\n                        s = {...setting, key: setting.key.toLowerCase()};\n                    }\n                    settingsList.push(this.buildSettingFunctions[setting.type](s));\n                }\n            });\n        }\n\n        let header;\n        if (schema.header) {\n            header = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.header, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        let footer;\n        if (schema.footer) {\n            footer = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.footer, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                {header}\n                {settingsList}\n                {footer}\n            </SettingsGroup>\n        );\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    doSubmit = (callback, getStateFromConfig) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                    serverErrorId: err.id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    static getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[pathPart];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = pathParts[0];\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(SchemaAdminSettings.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    render = () => {\n        const schema = this.props.schema;\n\n        if (schema && schema.component) {\n            const CustomComponent = schema.component;\n            return (<CustomComponent {...this.props}/>);\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    {this.renderTitle()}\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst PUSH_NOTIFICATIONS_OFF = 'off';\nconst PUSH_NOTIFICATIONS_MHPNS = 'mhpns';\nconst PUSH_NOTIFICATIONS_MTPNS = 'mtpns';\nconst PUSH_NOTIFICATIONS_CUSTOM = 'custom';\n\nexport default class PushSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.canSave = this.canSave.bind(this);\n        this.handleAgreeChange = this.handleAgreeChange.bind(this);\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    canSave() {\n        return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;\n    }\n\n    handleAgreeChange(e) {\n        this.setState({\n            agree: e.target.checked,\n        });\n    }\n\n    handleDropdownChange(id, value) {\n        if (id === 'pushNotificationServerType') {\n            this.setState({\n                agree: false,\n            });\n\n            if (value === PUSH_NOTIFICATIONS_MHPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MHPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_MTPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MTPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_CUSTOM &&\n                (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS ||\n                this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {\n                this.setState({\n                    pushNotificationServer: '',\n                });\n            }\n        }\n\n        this.handleChange(id, value);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;\n        config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();\n        config.EmailSettings.PushNotificationContents = this.state.pushNotificationContents;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;\n        let agree = false;\n        if (!config.EmailSettings.SendPushNotifications) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MHPNS &&\n            this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;\n            agree = true;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MTPNS) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;\n        }\n\n        let pushNotificationServer = config.EmailSettings.PushNotificationServer;\n        if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushNotificationServer = Constants.MTPNS;\n        } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushNotificationServer = Constants.MHPNS;\n        }\n\n        return {\n            pushNotificationServerType,\n            pushNotificationServer,\n            pushNotificationContents: config.EmailSettings.PushNotificationContents,\n            agree,\n        };\n    }\n\n    isPushNotificationServerSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('EmailSettings.SendPushNotifications') ||\n            this.isSetByEnv('EmailSettings.PushNotificationServer');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.title'\n                defaultMessage='Notification Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const pushNotificationServerTypes = [];\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_OFF, text: Utils.localizeMessage('admin.email.pushOff', 'Do not send push notifications')});\n        if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MHPNS, text: Utils.localizeMessage('admin.email.mhpns', 'Use encrypted, production-quality HPNS connection to iOS and Android apps')});\n        }\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MTPNS, text: Utils.localizeMessage('admin.email.mtpns', 'Use iOS and Android apps on iTunes and Google Play with TPNS')});\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_CUSTOM, text: Utils.localizeMessage('admin.email.selfPush', 'Manually enter Push Notification Service location')});\n\n        let sendHelpText = null;\n        let pushServerHelpText = null;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {\n            sendHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.pushOffHelp'\n                    defaultMessage='Please see [documentation on push notifications](!https://about.mattermost.com/default-mobile-push-notifications/) to learn more about setup options.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mhpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Hosted Push Notification Service](!https://about.mattermost.com/default-hpns/).'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mtpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Test Push Notification Service](!https://about.mattermost.com/default-tpns/).'\n                />\n            );\n        } else {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.easHelp'\n                    defaultMessage='Learn more about compiling and deploying your own mobile apps from an [Enterprise App Store](!https://about.mattermost.com/default-enterprise-app-store).'\n                />\n            );\n        }\n\n        let tosCheckbox;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            tosCheckbox = (\n                <div className='form-group'>\n                    <div className='col-sm-4'/>\n                    <div className='col-sm-8'>\n                        <input\n                            type='checkbox'\n                            ref='agree'\n                            checked={this.state.agree}\n                            onChange={this.handleAgreeChange}\n                        />\n                        <FormattedMarkdownMessage\n                            id='admin.email.agreeHPNS'\n                            defaultMessage=' I understand and accept the Mattermost Hosted Push Notification Service [Terms of Service](!https://about.mattermost.com/hpns-terms/) and [Privacy Policy](!https://about.mattermost.com/hpns-privacy/).'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup\n                header={\n                    <FormattedMessage\n                        id='admin.notifications.push'\n                        defaultMessage='Mobile Push'\n                    />\n                }\n            >\n                <DropdownSetting\n                    id='pushNotificationServerType'\n                    values={pushNotificationServerTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushTitle'\n                            defaultMessage='Enable Push Notifications: '\n                        />\n                    }\n                    value={this.state.pushNotificationServerType}\n                    onChange={this.handleDropdownChange}\n                    helpText={sendHelpText}\n                    setByEnv={this.isPushNotificationServerSetByEnv()}\n                />\n                {tosCheckbox}\n                <TextSetting\n                    id='pushNotificationServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushServerTitle'\n                            defaultMessage='Push Notification Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.pushServerEx', 'E.g.: \"http://push-test.mattermost.com\"')}\n                    helpText={pushServerHelpText}\n                    value={this.state.pushNotificationServer}\n                    onChange={this.handleChange}\n                    disabled={this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM}\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationServer')}\n                />\n                <DropdownSetting\n                    id='pushNotificationContents'\n                    values={[\n                        {value: 'generic_no_channel', text: Utils.localizeMessage('admin.email.genericNoChannelPushNotification', '\"Send generic description with only sender name')},\n                        {value: 'generic', text: Utils.localizeMessage('admin.email.genericPushNotification', 'Send generic description with sender and channel names')},\n                        {value: 'full', text: Utils.localizeMessage('admin.email.fullPushNotification', 'Send full message snippet')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushContentTitle'\n                            defaultMessage='Push Notification Contents:'\n                        />\n                    }\n                    value={this.state.pushNotificationContents}\n                    onChange={this.handleDropdownChange}\n                    disabled={this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.email.pushContentDesc'\n                            defaultMessage='\"Send generic description with only sender name\" includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n \\n\"Send generic description with sender and channel names\" includes the name of the person who sent the message and the channel it was sent in, but not the message text.\\n \\n\"Send full message snippet\" includes a message excerpt in push notifications, which may contain confidential information sent in messages. If your Push Notification Service is outside your firewall, it is *highly recommended* this option only be used with an \"https\" protocol to encrypt the connection.'\n                        />\n                    }\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationContents')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class DiscardChangesModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='discard_changes_modal.title'\n                defaultMessage='Discard Changes?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='discard_changes_modal.message'\n                defaultMessage='You have unsaved changes, are you sure you want to discard them?'\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button = (\n            <FormattedMessage\n                id='discard_changes_modal.leave'\n                defaultMessage='Yes, Discard'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\n\nexport default class AdminSidebarCategory extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            sectionClass: PropTypes.string,\n            parentLink: PropTypes.string,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n        };\n    }\n\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    render() {\n        let link = this.props.parentLink;\n        let title = (\n            <div className='category-title category-title--active'>\n                <i className={'category-icon fa ' + this.props.icon}/>\n                <span className='category-title__text'>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </div>\n        );\n\n        if (this.props.name) {\n            link += '/' + name;\n            title = (\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title category-title--active'\n                >\n                    {title}\n                </NavLink>\n            );\n        }\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <Route\n                    path={link}\n                    render={() => (\n                        <ul className={'sections ' + this.props.sectionClass}>\n                            {\n                                React.Children.map(this.props.children, (child) => {\n                                    if (child === null) {\n                                        return null;\n                                    }\n\n                                    return React.cloneElement(child, {\n                                        parentLink: link,\n                                    });\n                                })\n                            }\n                        </ul>\n                    )}\n                />\n            );\n        }\n\n        return (\n            <li className='sidebar-category'>\n                {title}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {NavLink} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class BlockableLink extends React.Component {\n    static propTypes = {\n\n        /*\n         * Bool whether navigation is blocked\n         */\n        blocked: PropTypes.bool.isRequired,\n\n        /*\n         * String Link destination\n         */\n        to: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function for deferring navigation while blocked\n             */\n            deferNavigation: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = (e) => {\n        if (this.props.blocked) {\n            e.preventDefault();\n\n            this.props.actions.deferNavigation(() => {\n                browserHistory.push(this.props.to);\n            });\n        }\n    };\n\n    render() {\n        const props = {...this.props};\n        Reflect.deleteProperty(props, 'blocked');\n        Reflect.deleteProperty(props, 'actions');\n\n        return (\n            <NavLink\n                {...props}\n                onClick={this.handleClick}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport BlockableLink from './blockable_link.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        blocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockableLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport AboutBuildModal from 'components/about_build_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport MenuIcon from 'components/svg/menu_icon';\n\nexport default class AdminNavbarDropdown extends React.Component {\n    static propTypes = {\n        locale: PropTypes.string.isRequired,\n\n        /*\n         * Bool whether the navigation is blocked by unsaved changes\n         */\n        navigationBlocked: PropTypes.bool,\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Action to attempt a navigation and set a callback\n             * to execute after the navigation is confirmed\n             */\n            deferNavigation: PropTypes.func,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showAboutModal: false,\n        };\n    }\n\n    componentDidMount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).on('hide.bs.dropdown', () => {\n            this.blockToggle = true;\n            setTimeout(() => {\n                this.blockToggle = false;\n            }, 100);\n        });\n    }\n\n    componentWillUnmount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).off('hide.bs.dropdown');\n    }\n\n    handleAboutModal = (e) => {\n        e.preventDefault();\n\n        this.setState({showAboutModal: true});\n    };\n\n    handleLogout = (e) => {\n        if (this.props.navigationBlocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(GlobalActions.emitUserLoggedOutEvent);\n        } else {\n            GlobalActions.emitUserLoggedOutEvent();\n        }\n    };\n\n    aboutModalDismissed = () => {\n        this.setState({showAboutModal: false});\n    };\n\n    render() {\n        const {locale, teams} = this.props;\n        const teamToRender = []; // Array of team components\n        let switchTeams;\n\n        if (teams && teams.length > 0) {\n            const teamsArray = filterAndSortTeamsByDisplayName(teams, locale);\n\n            for (const team of teamsArray) {\n                teamToRender.push(\n                    <li key={'team_' + team.name}>\n                        <BlockableLink\n                            id={'swithTo' + Utils.createSafeId(team.name)}\n                            to={'/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`}\n                        >\n                            <FormattedMessage\n                                id='navbar_dropdown.switchTo'\n                                defaultMessage='Switch to '\n                            />\n                            {team.display_name}\n                        </BlockableLink>\n                    </li>\n                );\n            }\n\n            teamToRender.push(\n                <li\n                    key='teamDiv'\n                    className='divider'\n                />\n            );\n        } else {\n            switchTeams = (\n                <li>\n                    <BlockableLink\n                        to={'/select_team'}\n                    >\n                        <i\n                            className='fa fa-exchange'\n                            title={Utils.localizeMessage('select_team.icon', 'Select Team Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.nav.switch'\n                            defaultMessage='Team Selection'\n                        />\n                    </BlockableLink>\n                </li>\n            );\n        }\n\n        return (\n            <ul className='nav navbar-nav navbar-right admin-navbar-dropdown'>\n                <li\n                    ref='dropdown'\n                    className='dropdown'\n                >\n                    <a\n                        href='#'\n                        id='adminNavbarDropdownButton'\n                        className='dropdown-toggle admin-navbar-dropdown__toggle'\n                        data-toggle='dropdown'\n                        role='button'\n                        aria-expanded='false'\n                    >\n                        <MenuIcon className='dropdown__icon admin-navbar-dropdown__icon'/>\n                    </a>\n                    <ul\n                        className='dropdown-menu'\n                        role='menu'\n                    >\n                        {teamToRender}\n                        {switchTeams}\n                        <li\n                            key='teamDiv'\n                            className='divider'\n                        />\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/administrators-guide/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.administratorsGuide'\n                                    defaultMessage='Administrator Guide'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/troubleshooting-forum/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.troubleshootingForum'\n                                    defaultMessage='Troubleshooting Forum'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/commercial-support/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.commercialSupport'\n                                    defaultMessage='Commercial Support'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <button\n                                className='style--none'\n                                onClick={this.handleAboutModal}\n                            >\n                                <FormattedMessage\n                                    id='navbar_dropdown.about'\n                                    defaultMessage='About Mattermost'\n                                />\n                            </button>\n                        </li>\n                        <li className='divider'/>\n                        <li>\n                            <button\n                                className='style--none'\n                                id='logout'\n                                onClick={this.handleLogout}\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.logout'\n                                    defaultMessage='Logout'\n                                />\n                            </button>\n                        </li>\n                        <AboutBuildModal\n                            show={this.state.showAboutModal}\n                            onModalDismissed={this.aboutModalDismissed}\n                        />\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n        teams: getMyTeams(state),\n        navigationBlocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport AdminNavbarDropdown from 'components/admin_console/admin_navbar_dropdown';\n\nexport default class SidebarHeader extends React.Component {\n    static propTypes = {\n        currentUser: PropTypes.object,\n    }\n\n    toggleDropdown = (e) => {\n        e.preventDefault();\n\n        if (this.refs.dropdown.blockToggle) {\n            this.refs.dropdown.blockToggle = false;\n            return;\n        }\n\n        $('.team__header').find('.dropdown-toggle').dropdown('toggle');\n    }\n\n    render() {\n        const me = this.props.currentUser;\n        let profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <img\n                    className='user__picture'\n                    src={Client4.getProfilePictureUrl(me.id, me.last_picture_update)}\n                />\n            );\n        }\n\n        return (\n            <div className='team__header theme'>\n                <a\n                    href='#'\n                    onClick={this.toggleDropdown}\n                >\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='team__name'>\n                            <FormattedMessage\n                                id='admin.sidebarHeader.systemConsole'\n                                defaultMessage='System Console'\n                            />\n                        </div>\n                        <div className='user__name'>{'@' + me.username}</div>\n                    </div>\n                </a>\n                <AdminNavbarDropdown ref='dropdown'/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport AdminSidebarHeader from './admin_sidebar_header.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AdminSidebarHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class AdminSidebarSection extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            type: PropTypes.string,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <ul className='nav nav__sub-menu subsections'>\n                    {\n                        React.Children.map(this.props.children, (child) => {\n                            if (child === null) {\n                                return null;\n                            }\n\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'sidebar-section';\n        if (this.props.subsection) {\n            className += ' sidebar-subsection';\n        }\n\n        let sidebarItem = (\n            <BlockableLink\n                id={Utils.createSafeId(this.props.name)}\n                className={`${className}-title`}\n                activeClassName={`${className}-title ${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </BlockableLink>\n        );\n\n        if (this.props.type === 'text') {\n            sidebarItem = (\n                <div\n                    className={`${className}-title`}\n                >\n                    <span className={`${className}-title__text`}>\n                        {this.props.title}\n                    </span>\n                    {this.props.action}\n                </div>\n            );\n        }\n\n        return (\n            <li className={className}>\n                {sidebarItem}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport AdminSidebarCategory from 'components/admin_console/admin_sidebar_category.jsx';\nimport AdminSidebarHeader from 'components/admin_console/admin_sidebar_header';\nimport AdminSidebarSection from 'components/admin_console/admin_sidebar_section.jsx';\n\nexport default class AdminSidebar extends React.Component {\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        plugins: PropTypes.object,\n        buildEnterpriseReady: PropTypes.bool,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get installed plugins\n             */\n            getPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        plugins: {},\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPlugins();\n        }\n\n        this.updateTitle();\n\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    updateTitle = () => {\n        let currentSiteName = '';\n        if (this.props.siteName) {\n            currentSiteName = ' - ' + this.props.siteName;\n        }\n\n        document.title = Utils.localizeMessage('sidebar_right_menu.console', 'System Console') + currentSiteName;\n    }\n\n    render() {\n        let oauthSettings = null;\n        let ldapSettings = null;\n        let samlSettings = null;\n        let clusterSettings = null;\n        let metricsSettings = null;\n        let complianceSettings = null;\n        let mfaSettings = null;\n        let messageExportSettings = null;\n        let complianceSection = null;\n\n        let license = null;\n        let audits = null;\n        let announcement = null;\n\n        if (this.props.buildEnterpriseReady) {\n            license = (\n                <AdminSidebarSection\n                    name='license'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.license'\n                            defaultMessage='Edition and License'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            if (this.props.license.LDAP === 'true') {\n                ldapSettings = (\n                    <AdminSidebarSection\n                        name='ldap'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.ldap'\n                                defaultMessage='AD/LDAP'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Cluster === 'true') {\n                clusterSettings = (\n                    <AdminSidebarSection\n                        name='cluster'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.cluster'\n                                defaultMessage='High Availability'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Metrics === 'true') {\n                metricsSettings = (\n                    <AdminSidebarSection\n                        name='metrics'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.metrics'\n                                defaultMessage='Performance Monitoring'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.SAML === 'true') {\n                samlSettings = (\n                    <AdminSidebarSection\n                        name='saml'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.saml'\n                                defaultMessage='SAML 2.0'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Compliance === 'true') {\n                complianceSettings = (\n                    <AdminSidebarSection\n                        name='compliance'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance'\n                                defaultMessage='Compliance'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MFA === 'true') {\n                mfaSettings = (\n                    <AdminSidebarSection\n                        name='mfa'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.mfa'\n                                defaultMessage='MFA'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MessageExport === 'true') {\n                messageExportSettings = (\n                    <AdminSidebarSection\n                        name='message_export'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance_export'\n                                defaultMessage='Compliance Export (Beta)'\n                            />\n                        }\n                    />\n                );\n            }\n\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='oauth'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.oauth'\n                            defaultMessage='OAuth 2.0'\n                        />\n                    }\n                />\n            );\n            announcement = (\n                <AdminSidebarSection\n                    name='announcement'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.announcement'\n                            defaultMessage='Announcement Banner'\n                        />\n                    }\n                />\n            );\n        } else {\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='gitlab'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.gitlab'\n                            defaultMessage='GitLab'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            audits = (\n                <AdminSidebarSection\n                    name='audits'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.audits'\n                            defaultMessage='Complaince and Auditing'\n                        />\n                    }\n                />\n            );\n        }\n\n        let otherCategory = null;\n        if (license || audits) {\n            otherCategory = (\n                <AdminSidebarCategory\n                    parentLink='/admin_console'\n                    icon='fa-wrench'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.other'\n                            defaultMessage='OTHER'\n                        />\n                    }\n                >\n                    {license}\n                    {audits}\n                </AdminSidebarCategory>\n            );\n        }\n\n        let elasticSearchSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.Elasticsearch === 'true') {\n            elasticSearchSettings = (\n                <AdminSidebarSection\n                    name='elasticsearch'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.elasticsearch'\n                            defaultMessage='Elasticsearch'\n                        />\n                    }\n                />\n            );\n        }\n\n        let dataRetentionSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.DataRetention === 'true') {\n            dataRetentionSettings = (\n                <AdminSidebarSection\n                    name='data_retention'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.data_retention'\n                            defaultMessage='Data Retention Policy (Beta)'\n                        />\n                    }\n                />\n            );\n        }\n\n        const SHOW_CLIENT_VERSIONS = false;\n        let clientVersions = null;\n        if (SHOW_CLIENT_VERSIONS) {\n            clientVersions = (\n                <AdminSidebarSection\n                    name='client_versions'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.client_versions'\n                            defaultMessage='Client Versions'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (dataRetentionSettings || messageExportSettings) {\n            complianceSection = (\n                <AdminSidebarSection\n                    name='compliance'\n                    type='text'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.compliance'\n                            defaultMessage='Compliance'\n                        />\n                    }\n                >\n                    {dataRetentionSettings}\n                    {messageExportSettings}\n                </AdminSidebarSection>\n            );\n        }\n\n        const customPlugins = [];\n        if (this.props.config.PluginSettings.Enable) {\n            Object.values(this.props.plugins).forEach((p) => {\n                if (!p.settings_schema || Object.keys(p.settings_schema) === 0) {\n                    return;\n                }\n\n                customPlugins.push(\n                    <AdminSidebarSection\n                        key={'customplugin' + p.id}\n                        name={'custom/' + p.id}\n                        title={p.name}\n                    />\n                );\n            });\n        }\n\n        return (\n            <div className='admin-sidebar'>\n                <AdminSidebarHeader/>\n                <div className='nav-pills__container'>\n                    <ul className='nav nav-pills nav-stacked'>\n                        <AdminSidebarCategory\n                            parentLink='/admin_console'\n                            icon='fa-bar-chart'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.reports'\n                                    defaultMessage='REPORTING'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='system_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.view_statistics'\n                                        defaultMessage='Site Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='team_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.statistics'\n                                        defaultMessage='Team Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='users'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.users'\n                                        defaultMessage='Users'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='logs'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.logs'\n                                        defaultMessage='Logs'\n                                    />\n                                }\n                            />\n                        </AdminSidebarCategory>\n                        <AdminSidebarCategory\n                            sectionClass='sections--settings'\n                            parentLink='/admin_console'\n                            icon='fa-gear'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.settings'\n                                    defaultMessage='SETTINGS'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='general'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.general'\n                                        defaultMessage='General'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='localization'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.localization'\n                                            defaultMessage='Localization'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='users_and_teams'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.usersAndTeams'\n                                            defaultMessage='Users and Teams'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='privacy'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.privacy'\n                                            defaultMessage='Privacy'\n                                        />\n                                    }\n                                />\n                                {complianceSettings}\n                                <AdminSidebarSection\n                                    name='logging'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.logging'\n                                            defaultMessage='Logging'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {this.props.license.IsLicensed === 'true' &&\n                                <AdminSidebarSection\n                                    name='permissions'\n                                    type='text'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.permissions'\n                                            defaultMessage='Advanced Permissions'\n                                        />\n                                    }\n                                >\n                                    {this.props.license.CustomPermissionsSchemes !== 'true' &&\n                                        <AdminSidebarSection\n                                            name='system-scheme'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.system-scheme'\n                                                    defaultMessage='System scheme'\n                                                />\n                                            }\n                                        />}\n                                    {this.props.license.CustomPermissionsSchemes === 'true' &&\n                                        <AdminSidebarSection\n                                            name='schemes'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.schemes'\n                                                    defaultMessage='Permission Schemes'\n                                                />\n                                            }\n                                        />}\n                                </AdminSidebarSection>}\n                            <AdminSidebarSection\n                                name='authentication'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.authentication'\n                                        defaultMessage='Authentication'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='authentication_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                {oauthSettings}\n                                {ldapSettings}\n                                {samlSettings}\n                                {mfaSettings}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='security'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.security'\n                                        defaultMessage='Security'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='sign_up'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.signUp'\n                                            defaultMessage='Sign Up'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='password'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.password'\n                                            defaultMessage='Password'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='public_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.publicLinks'\n                                            defaultMessage='Public Links'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='sessions'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.sessions'\n                                            defaultMessage='Sessions'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='connections'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.connections'\n                                            defaultMessage='Connections'\n                                        />\n                                    }\n                                />\n                                {clientVersions}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='notifications'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.notifications'\n                                        defaultMessage='Notifications'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='notifications_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='push'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.push'\n                                            defaultMessage='Mobile Push'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='integrations'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.integrations'\n                                        defaultMessage='Integrations'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customIntegrations'\n                                            defaultMessage='Custom Integrations'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='external'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.external'\n                                            defaultMessage='External Services'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='plugins'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.plugins'\n                                        defaultMessage='Plugins (Beta)'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='management'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.management'\n                                            defaultMessage='Management'\n                                        />\n                                    }\n                                />\n                                {customPlugins}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='files'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.files'\n                                        defaultMessage='Files'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    key='storage'\n                                    name='storage'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.storage'\n                                            defaultMessage='Storage'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='customization'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.customization'\n                                        defaultMessage='Customization'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom_brand'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customBrand'\n                                            defaultMessage='Custom Branding'\n                                        />\n                                    }\n                                />\n                                {announcement}\n                                <AdminSidebarSection\n                                    name='emoji'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.emoji'\n                                            defaultMessage='Emoji'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='gif'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.gif'\n                                            defaultMessage='GIF (Beta)'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='posts'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.posts'\n                                            defaultMessage='Posts'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='legal_and_support'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.legalAndSupport'\n                                            defaultMessage='Legal and Support'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='native_app_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.nativeAppLinks'\n                                            defaultMessage='Mattermost App Links'\n                                        />\n\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {complianceSection}\n                            <AdminSidebarSection\n                                name='advanced'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.advanced'\n                                        defaultMessage='Advanced'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='rate'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.rateLimiting'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='database'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.database'\n                                            defaultMessage='Database'\n                                        />\n                                    }\n                                />\n                                {elasticSearchSettings}\n                                <AdminSidebarSection\n                                    name='developer'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.developer'\n                                            defaultMessage='Developer'\n                                        />\n                                    }\n                                />\n                                {clusterSettings}\n                                {metricsSettings}\n                            </AdminSidebarSection>\n                        </AdminSidebarCategory>\n                        {otherCategory}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPlugins} from 'mattermost-redux/actions/admin';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport AdminSidebar from './admin_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const siteName = config.SiteName;\n\n    return {\n        license,\n        config: state.entities.admin.config,\n        plugins: state.entities.admin.plugins,\n        buildEnterpriseReady,\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class DoughnutChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            this.initChart(true);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart && this.refs.canvas) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'doughnut', data: this.props.data, options: {}}); //eslint-disable-line new-cap\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class LineChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number.isRequired,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number.isRequired,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n    chartOptions = {\n        legend: {\n            display: false,\n        },\n    };\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        const willHaveData = nextProps.data && nextProps.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (!willHaveData && hasChart) {\n            // Clean up the rendered chart before we render and destroy its context\n            this.chart.destroy();\n            this.chart = null;\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            return;\n        }\n\n        const hasData = this.props.data && this.props.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (hasData) {\n            // Update the rendered chart or initialize it as necessary\n            this.initChart(hasChart);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'line', data: this.props.data, options: this.chartOptions || {}}); // eslint-disable-line new-cap\n\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else if (this.props.data.labels.length === 0) {\n            content = (\n                <h5>\n                    <FormattedMessage\n                        id='analytics.chart.meaningful'\n                        defaultMessage='Not enough data for a meaningful representation.'\n                    />\n                </h5>\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='total-count by-day'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatisticCount extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Statistic title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Statistic icon\n         */\n        icon: PropTypes.string.isRequired,\n\n        /*\n         * Data count\n         */\n        count: PropTypes.number,\n    }\n\n    render() {\n        const loading = (\n            <FormattedMessage\n                id='analytics.chart.loading'\n                defaultMessage='Loading...'\n            />\n        );\n\n        return (\n            <div className='col-lg-3 col-md-4 col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                        <i className={'fa ' + this.props.icon}/>\n                    </div>\n                    <div className='content'>{isNaN(this.props.count) ? loading : this.props.count}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport * as Utils from 'utils/utils.jsx';\n\nexport function formatChannelDoughtnutData(totalPublic, totalPrivate) {\n    const channelTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.publicChannels', 'Public Channels'),\n            Utils.localizeMessage('analytics.system.privateGroups', 'Private Channels'),\n        ],\n        datasets: [{\n            data: [totalPublic, totalPrivate],\n            backgroundColor: ['#46BFBD', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FFC870'],\n        }],\n    };\n\n    return channelTypeData;\n}\n\nexport function formatPostDoughtnutData(filePosts, hashtagPosts, totalPosts) {\n    const postTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.totalFilePosts', 'Posts with Files'),\n            Utils.localizeMessage('analytics.system.totalHashtagPosts', 'Posts with Hashtags'),\n            Utils.localizeMessage('analytics.system.textPosts', 'Posts with Text-only'),\n        ],\n        datasets: [{\n            data: [filePosts, hashtagPosts, (totalPosts - filePosts - hashtagPosts)],\n            backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870'],\n        }],\n    };\n\n    return postTypeData;\n}\n\nexport function formatPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n\nexport function formatUsersWithPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            label: '',\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport DoughnutChart from '../doughnut_chart.jsx';\nimport LineChart from '../line_chart.jsx';\nimport StatisticCount from '../statistic_count.jsx';\n\nimport {\n    formatPostsPerDayData,\n    formatUsersWithPostsPerDayData,\n    formatChannelDoughtnutData,\n    formatPostDoughtnutData,\n} from '../format.jsx';\n\nconst StatTypes = Constants.StatTypes;\n\nexport default class SystemAnalytics extends React.Component {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {stats: AnalyticsStore.getAllSystem()};\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        AdminActions.getStandardAnalytics();\n        AdminActions.getPostsPerDayAnalytics();\n        AdminActions.getUsersPerDayAnalytics();\n\n        if (this.props.isLicensed) {\n            AdminActions.getAdvancedAnalytics();\n        }\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.stats, this.state.stats)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    onChange = () => {\n        this.setState({stats: AnalyticsStore.getAllSystem()});\n    }\n\n    render() {\n        const stats = this.state.stats;\n        const isLicensed = this.props.isLicensed;\n        const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner;\n        let postCount;\n        let postTotalGraph;\n        let activeUserGraph;\n        if (skippedIntensiveQueries) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.skippedIntensiveQueries'\n                            defaultMessage='To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html).'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            postCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            activeUserGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        let advancedStats;\n        let advancedGraphs;\n        let sessionCount;\n        let commandCount;\n        let incomingCount;\n        let outgoingCount;\n        if (this.props.isLicensed) {\n            sessionCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalSessions'\n                            defaultMessage='Total Sessions'\n                        />\n                    }\n                    icon='fa-signal'\n                    count={stats[StatTypes.TOTAL_SESSIONS]}\n                />\n            );\n\n            commandCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalCommands'\n                            defaultMessage='Total Commands'\n                        />\n                    }\n                    icon='fa-terminal'\n                    count={stats[StatTypes.TOTAL_COMMANDS]}\n                />\n            );\n\n            incomingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalIncomingWebhooks'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-down'\n                    count={stats[StatTypes.TOTAL_IHOOKS]}\n                />\n            );\n\n            outgoingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalOutgoingWebhooks'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-up'\n                    count={stats[StatTypes.TOTAL_OHOOKS]}\n                />\n            );\n\n            advancedStats = (\n                <div>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalWebsockets'\n                                defaultMessage='WebSocket Conns'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalMasterDbConnections'\n                                defaultMessage='Master DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalReadDbConnections'\n                                defaultMessage='Replica DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_READ_DB_CONNECTIONS]}\n                    />\n                </div>\n            );\n\n            const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n            const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);\n\n            let postTypeGraph;\n            if (stats[StatTypes.TOTAL_POSTS] !== -1) {\n                postTypeGraph = (\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.postTypes'\n                                defaultMessage='Posts, Files and Hashtags'\n                            />\n                        }\n                        data={postTypeData}\n                        width={300}\n                        height={225}\n                    />\n                );\n            }\n\n            advancedGraphs = (\n                <div className='row'>\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.channelTypes'\n                                defaultMessage='Channel Types'\n                            />\n                        }\n                        data={channelTypeData}\n                        width={300}\n                        height={225}\n                    />\n                    {postTypeGraph}\n                </div>\n            );\n        }\n\n        const userCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalUsers'\n                        defaultMessage='Total Active Users'\n                    />\n                }\n                icon='fa-user'\n                count={stats[StatTypes.TOTAL_USERS]}\n            />\n        );\n\n        const teamCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalTeams'\n                        defaultMessage='Total Teams'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.TOTAL_TEAMS]}\n            />\n        );\n\n        const channelCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalChannels'\n                        defaultMessage='Total Channels'\n                    />\n                }\n                icon='fa-globe'\n                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS] + stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n            />\n        );\n\n        const dailyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.dailyActiveUsers'\n                        defaultMessage='Daily Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.DAILY_ACTIVE_USERS]}\n            />\n        );\n\n        const monthlyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.monthlyActiveUsers'\n                        defaultMessage='Monthly Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.MONTHLY_ACTIVE_USERS]}\n            />\n        );\n\n        let firstRow;\n        let secondRow;\n        if (isLicensed && skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {sessionCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (isLicensed && !skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {sessionCount}\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (!isLicensed) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n        }\n\n        const thirdRow = (\n            <div>\n                {dailyActiveUsers}\n                {monthlyActiveUsers}\n            </div>\n        );\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='analytics.system.title'\n                        defaultMessage='System Statistics'\n                    />\n                </h3>\n                {banner}\n                <div className='row'>\n                    {firstRow}\n                    {secondRow}\n                    {thirdRow}\n                    {advancedStats}\n                </div>\n                {advancedGraphs}\n                {postTotalGraph}\n                {activeUserGraph}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport SystemAnalytics from './system_analytics.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n    };\n}\n\nexport default connect(mapStateToProps)(SystemAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function Banner(props) {\n    let title = (\n        <FormattedMessage\n            id='admin.banner.heading'\n            defaultMessage='Note:'\n        />\n    );\n\n    if (props.title) {\n        title = props.title;\n    }\n\n    return (\n        <div className='banner'>\n            <div className='banner__content'>\n                <h4 className='banner__heading'>\n                    {title}\n                </h4>\n                <p>\n                    {props.description}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nBanner.defaultProps = {\n};\nBanner.propTypes = {\n    title: PropTypes.node,\n    description: PropTypes.node.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport Constants from 'utils/constants.jsx';\n\nexport default class TableChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Table title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Table data\n         */\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string.isRequired,\n                tip: PropTypes.string.isRequired,\n                value: PropTypes.node.isRequired,\n            })\n        ).isRequired,\n    };\n\n    render() {\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count recent-active-users'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        <table>\n                            <tbody>\n                                {\n                                    this.props.data.map((item) => {\n                                        const tooltip = (\n                                            <Tooltip id={'tip-table-entry-' + item.name}>\n                                                {item.tip}\n                                            </Tooltip>\n                                        );\n\n                                        return (\n                                            <tr key={'table-entry-' + item.name}>\n                                                <td>\n                                                    <OverlayTrigger\n                                                        trigger={['hover', 'focus']}\n                                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                        placement='top'\n                                                        overlay={tooltip}\n                                                    >\n                                                        <time>\n                                                            {item.name}\n                                                        </time>\n                                                    </OverlayTrigger>\n                                                </td>\n                                                <td>\n                                                    {item.value}\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {StatTypes} from 'utils/constants.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LineChart from 'components/analytics/line_chart.jsx';\nimport StatisticCount from 'components/analytics/statistic_count.jsx';\nimport TableChart from 'components/analytics/table_chart.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport {formatPostsPerDayData, formatUsersWithPostsPerDayData} from '../format.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nexport default class TeamAnalytics extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Initial team to load analytics for\n         */\n        initialTeam: PropTypes.object,\n\n        /**\n         * The locale of the current user\n          */\n        locale: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get users in a team\n             */\n            getProfilesInTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const teamId = props.initialTeam ? props.initialTeam.id : '';\n\n        this.state = {\n            team: props.initialTeam,\n            stats: AnalyticsStore.getAllTeam(teamId),\n            recentlyActiveUsers: [],\n            newUsers: [],\n        };\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        if (this.state.team) {\n            this.getData(this.state.team.id);\n        }\n\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (nextState.team && nextState.team !== this.state.team) {\n            this.getData(nextState.team.id);\n        }\n    }\n\n    getData = async (id) => {\n        AdminActions.getStandardAnalytics(id);\n        AdminActions.getPostsPerDayAnalytics(id);\n        AdminActions.getUsersPerDayAnalytics(id);\n        const {data: recentlyActiveUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'last_activity_at');\n        const {data: newUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'create_at');\n\n        this.setState({\n            recentlyActiveUsers,\n            newUsers,\n        });\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    onChange = () => {\n        const teamId = this.state.team ? this.state.team.id : '';\n        this.setState({\n            stats: AnalyticsStore.getAllTeam(teamId),\n        });\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n\n        let team;\n        this.props.teams.forEach((t) => {\n            if (t.id === teamId) {\n                team = t;\n            }\n        });\n\n        this.setState({\n            team,\n        });\n\n        BrowserStore.setGlobalItem(LAST_ANALYTICS_TEAM, teamId);\n    }\n\n    render() {\n        if (this.props.teams.length === 0 || !this.state.team || !this.state.stats) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.state.team == null) {\n            return (\n                <Banner\n                    description={\n                        <FormattedMessage\n                            id='analytics.team.noTeams'\n                            defaultMessage='There are no teams on this server for which to view statistics.'\n                        />\n                    }\n                />\n            );\n        }\n\n        const stats = this.state.stats;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner = (\n            <div className='banner'>\n                <div className='banner__content'>\n                    <FormattedMessage\n                        id='analytics.system.info'\n                        defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team.'\n                    />\n                </div>\n            </div>\n        );\n\n        let totalPostsCount;\n        let postTotalGraph;\n        let userActiveGraph;\n        if (stats[StatTypes.TOTAL_POSTS] === -1) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.infoAndSkippedIntensiveQueries'\n                            defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team. \\n \\n Some statistics have been omitted because they put too much load on the system to calculate. See [https://docs.mattermost.com/administration/statistics.html](!https://docs.mattermost.com/administration/statistics.html) for more details.'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            totalPostsCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.team.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            userActiveGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);\n        const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);\n\n        const teams = this.props.teams.sort((a, b) => {\n            const aName = a.display_name.toUpperCase();\n            const bName = b.display_name.toUpperCase();\n            if (aName === bName) {\n                return 0;\n            }\n            if (aName > bName) {\n                return 1;\n            }\n            return -1;\n        }).map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <div className='admin-console-header team-statistics__header-row'>\n                    <div className='team-statistics__header'>\n                        <h3 className='admin-console-header'>\n                            <FormattedMessage\n                                id='analytics.team.title'\n                                defaultMessage='Team Statistics for {team}'\n                                values={{\n                                    team: this.state.team.display_name,\n                                }}\n                            />\n                        </h3>\n                    </div>\n                    <div className='team-statistics__team-filter'>\n                        <select\n                            className='form-control team-statistics__team-filter__dropdown'\n                            onChange={this.handleTeamChange}\n                            value={this.state.team.id}\n                        >\n                            {teams}\n                        </select>\n                    </div>\n                </div>\n                {banner}\n                <div className='row'>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalUsers'\n                                defaultMessage='Total Active Users'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_USERS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.publicChannels'\n                                defaultMessage='Public Channels'\n                            />\n                        }\n                        icon='fa-users'\n                        count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.privateGroups'\n                                defaultMessage='Private Channels'\n                            />\n                        }\n                        icon='fa-globe'\n                        count={stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n                    />\n                    {totalPostsCount}\n                </div>\n                {postTotalGraph}\n                {userActiveGraph}\n                <div className='row'>\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.recentUsers'\n                                defaultMessage='Recent Active Users'\n                            />\n                        }\n                        data={recentActiveUsers}\n                    />\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.newlyCreated'\n                                defaultMessage='Newly Created Users'\n                            />\n                        }\n                        data={newlyCreatedUsers}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function formatRecentUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.last_activity_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n\nexport function formatNewUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.create_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {getProfilesInTeam} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\n\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamAnalytics from './team_analytics.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nfunction mapStateToProps(state) {\n    const teams = getTeamsList(state);\n    const teamId = BrowserStore.getGlobalItem(LAST_ANALYTICS_TEAM, null);\n    const initialTeam = state.entities.teams.teams[teamId] || (teams.length > 0 ? teams[0] : null);\n\n    return {\n        initialTeam,\n        locale: getCurrentLocale(state),\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getProfilesInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport PluginState from 'mattermost-redux/constants/plugins';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst PluginItemState = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.not_running'\n                defaultMessage='Not running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.starting'\n                defaultMessage='Starting'\n            />\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.running'\n                defaultMessage='Running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_start'\n                defaultMessage='Failed to start'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_stay_running'\n                defaultMessage='Crashing'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.stopping'\n                defaultMessage='Stopping'\n            />\n        );\n    default:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.unknown'\n                defaultMessage='Unknown'\n            />\n        );\n    }\n};\n\nPluginItemState.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItemStateDescription = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-ban'/>\n                <FormattedMessage\n                    id='admin.plugin.state.not_running.description'\n                    defaultMessage='This plugin is not enabled.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.starting.description'\n                    defaultMessage='This plugin is starting.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-check'/>\n                <FormattedMessage\n                    id='admin.plugin.state.running.description'\n                    defaultMessage='This plugin is running.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_start.description'\n                    defaultMessage='This plugin failed to start. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_stay_running.description'\n                    defaultMessage='This plugin crashed multiple times and is no longer running. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.stopping.description'\n                    defaultMessage='This plugin is stopping.'\n                />\n            </div>\n        );\n    default:\n        return null;\n    }\n};\n\nPluginItemStateDescription.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItem = ({\n    pluginStatus,\n    removing,\n    handleEnable,\n    handleDisable,\n    handleRemove,\n    showInstances,\n    hasSettings,\n}) => {\n    let activateButton;\n    const activating = pluginStatus.state === PluginState.PLUGIN_STATE_STARTING;\n    const deactivating = pluginStatus.state === PluginState.PLUGIN_STATE_STOPPING;\n    if (pluginStatus.active) {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={deactivating}\n                onClick={handleDisable}\n            >\n                {deactivating ?\n                    <FormattedMessage\n                        id='admin.plugin.disabling'\n                        defaultMessage='Disabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.disable'\n                        defaultMessage='Disable'\n                    />\n                }\n            </a>\n        );\n    } else {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={activating}\n                onClick={handleEnable}\n            >\n                {activating ?\n                    <FormattedMessage\n                        id='admin.plugin.enabling'\n                        defaultMessage='Enabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.enable'\n                        defaultMessage='Enable'\n                    />\n                }\n            </a>\n        );\n    }\n\n    let settingsButton = null;\n    if (hasSettings) {\n        settingsButton = (\n            <span>\n                {' - '}\n                <Link\n                    to={'/admin_console/plugins/custom/' + pluginStatus.id}\n                >\n                    <FormattedMessage\n                        id='admin.plugin.settingsButton'\n                        defaultMessage='Settings'\n                    />\n                </Link>\n            </span>\n        );\n    }\n\n    let removeButton;\n    if (!pluginStatus.is_prepackaged) {\n        let removeButtonText;\n        if (removing) {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.removing'\n                    defaultMessage='Removing...'\n                />\n            );\n        } else {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.remove'\n                    defaultMessage='Remove'\n                />\n            );\n        }\n        removeButton = (\n            <span>\n                {' - '}\n                <a\n                    data-plugin-id={pluginStatus.id}\n                    disabled={removing}\n                    onClick={handleRemove}\n                >\n                    {removeButtonText}\n                </a>\n            </span>\n        );\n    }\n\n    let description;\n    if (pluginStatus.description) {\n        description = (\n            <div className='padding-top'>\n                {pluginStatus.description}\n            </div>\n        );\n    }\n\n    let prepackagedLabel;\n    if (pluginStatus.is_prepackaged) {\n        prepackagedLabel = (\n            <span>\n                {', '}\n                <FormattedMessage\n                    id='admin.plugin.prepackaged'\n                    defaultMessage='pre-packaged'\n                />\n            </span>\n        );\n    }\n\n    const notices = [];\n    if (pluginStatus.instances.some((instance) => instance.version !== pluginStatus.version)) {\n        notices.push(\n            <div\n                key='multiple-versions'\n                className='alert alert-warning'\n            >\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.multiple_versions_warning'\n                    defaultMessage='There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently.'\n                />\n            </div>\n        );\n    }\n\n    notices.push(\n        <PluginItemStateDescription\n            key='state-description'\n            state={pluginStatus.state}\n        />\n    );\n\n    const instances = pluginStatus.instances.slice();\n    instances.sort((a, b) => {\n        if (a.cluster_id < b.cluster_id) {\n            return -1;\n        } else if (a.cluster_id > b.cluster_id) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    let clusterSummary;\n    if (showInstances) {\n        clusterSummary = (\n            <div className='padding-top x2 padding-bottom'>\n                <div className='row'>\n                    <div className='col-md-6'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.cluster_instance'\n                                defaultMessage='Cluster Instance'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.version_title'\n                                defaultMessage='Version'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.state'\n                                defaultMessage='State'\n                            />\n                        </strong>\n                    </div>\n                </div>\n                {instances.map((instance) => (\n                    <div\n                        key={instance.cluster_id}\n                        className='row'\n                    >\n                        <div className='col-md-6'>\n                            {instance.cluster_id}\n                        </div>\n                        <div className='col-md-3'>\n                            {instance.version}\n                        </div>\n                        <div className='col-md-3'>\n                            <PluginItemState state={instance.state}/>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div>\n                <strong>{pluginStatus.name}</strong>\n                {' ('}\n                {pluginStatus.id}\n                {' - '}\n                {pluginStatus.version}\n                {prepackagedLabel}\n                {')'}\n            </div>\n            {description}\n            <div className='padding-top'>\n                {activateButton}\n                {removeButton}\n                {settingsButton}\n            </div>\n            <div>\n                {notices}\n            </div>\n            <div>\n                {clusterSummary}\n            </div>\n            <hr/>\n        </div>\n    );\n};\n\nPluginItem.propTypes = {\n    pluginStatus: PropTypes.object.isRequired,\n    removing: PropTypes.bool.isRequired,\n    handleEnable: PropTypes.func.isRequired,\n    handleDisable: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showInstances: PropTypes.bool.isRequired,\n    hasSettings: PropTypes.bool.isRequired,\n};\n\nexport default class PluginManagement extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        pluginStatuses: PropTypes.object.isRequired,\n        plugins: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            uploadPlugin: PropTypes.func.isRequired,\n            removePlugin: PropTypes.func.isRequired,\n            getPluginStatuses: PropTypes.func.isRequired,\n            enablePlugin: PropTypes.func.isRequired,\n            disablePlugin: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPluginStatuses().then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    handleChange = () => {\n        const element = this.refs.fileInput;\n        if (element.files.length > 0) {\n            this.setState({fileSelected: true, fileName: element.files[0].name});\n        }\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const element = this.refs.fileInput;\n        if (element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.setState({uploading: true});\n\n        const {error} = await this.props.actions.uploadPlugin(file);\n        this.setState({fileSelected: false, fileName: null, uploading: false, serverError: null});\n        Utils.clearFileInput(element);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.activate.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')});\n            } else if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    handleRemove = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        this.setState({removing: pluginId});\n\n        const {error} = await this.props.actions.removePlugin(pluginId);\n        this.setState({removing: null});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleEnable = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.enablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleDisable = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.disablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    render() {\n        if (!this.props.config.PluginSettings.Enable) {\n            return (\n                <div className='wrapper--fixed'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.plugin.management.title'\n                            defaultMessage='Management'\n                        />\n                    </h3>\n                    <Banner\n                        title={<div/>}\n                        description={\n                            <FormattedMarkdownMessage\n                                id='admin.plugin.management.banner'\n                                defaultMessage='Plugins are disabled on your server. To enable them, go to **Plugins > Configuration**.'\n                            />\n                        }\n                    />\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error half'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        }\n\n        let uploadButtonText;\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.upload'\n                    defaultMessage='Upload'\n                />\n            );\n        }\n\n        let pluginsList;\n        let pluginsContainer;\n        const plugins = Object.values(this.props.pluginStatuses);\n        if (this.state.loading) {\n            pluginsList = <LoadingScreen/>;\n        } else if (plugins.length === 0) {\n            pluginsContainer = (\n                <FormattedMessage\n                    id='admin.plugin.no_plugins'\n                    defaultMessage='No installed plugins.'\n                />\n            );\n        } else {\n            const showInstances = plugins.some((pluginStatus) => pluginStatus.instances.length > 1);\n            plugins.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                } else if (a.name > b.name) {\n                    return 1;\n                }\n\n                return 0;\n            });\n\n            pluginsList = plugins.map((pluginStatus) => (\n                <PluginItem\n                    key={pluginStatus.id}\n                    pluginStatus={pluginStatus}\n                    removing={this.state.removing === pluginStatus.id}\n                    handleEnable={this.handleEnable}\n                    handleDisable={this.handleDisable}\n                    handleRemove={this.handleRemove}\n                    showInstances={showInstances}\n                    hasSettings={Boolean(this.props.plugins[pluginStatus.id] && this.props.plugins[pluginStatus.id].settings_schema)}\n                />\n            ));\n\n            pluginsContainer = (\n                <div className='alert alert-transparent'>\n                    {pluginsList}\n                </div>\n            );\n        }\n\n        const enableUploads = this.props.config.PluginSettings.EnableUploads;\n        let uploadHelpText;\n        if (enableUploads) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDesc'\n                    defaultMessage='Upload a plugin for your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDisabledDesc'\n                    defaultMessage='To enable plugin uploads, go to **Plugins > Configuration**. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        }\n\n        const uploadBtnClass = enableUploads ? 'btn btn-primary' : 'btn';\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.plugin.management.title'\n                        defaultMessage='Management'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.uploadTitle'\n                                defaultMessage='Upload Plugin: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <div className='file__upload'>\n                                <button\n                                    className={uploadBtnClass}\n                                    disabled={!enableUploads}\n                                >\n                                    <FormattedMessage\n                                        id='admin.plugin.choose'\n                                        defaultMessage='Choose File'\n                                    />\n                                </button>\n                                <input\n                                    ref='fileInput'\n                                    type='file'\n                                    accept='.gz'\n                                    onChange={this.handleChange}\n                                    disabled={!enableUploads}\n                                />\n                            </div>\n                            <button\n                                className={btnClass}\n                                disabled={!this.state.fileSelected}\n                                onClick={this.handleSubmit}\n                            >\n                                {uploadButtonText}\n                            </button>\n                            <div className='help-text no-margin'>\n                                {fileName}\n                            </div>\n                            {serverError}\n                            <p className='help-text'>\n                                {uploadHelpText}\n                            </p>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.installedTitle'\n                                defaultMessage='Installed Plugins: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <p className='help-text'>\n                                <FormattedHTMLMessage\n                                    id='admin.plugin.installedDesc'\n                                    defaultMessage='Installed plugins on your Mattermost server. Pre-packaged plugins are installed by default, and can be disabled but not removed.'\n                                />\n                            </p>\n                            <br/>\n                            {pluginsContainer}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPluginStatuses, removePlugin, uploadPlugin, enablePlugin, disablePlugin} from 'mattermost-redux/actions/admin';\n\nimport PluginManagement from './plugin_management.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        plugins: state.entities.admin.plugins,\n        pluginStatuses: state.entities.admin.pluginStatuses,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadPlugin,\n            removePlugin,\n            getPluginStatuses,\n            enablePlugin,\n            disablePlugin,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginManagement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings.jsx';\n\nexport default class CustomPluginSettings extends SchemaAdminSettings {\n    constructor(props) {\n        super(props);\n        this.isPlugin = true;\n        this.getStateFromConfig = CustomPluginSettings.getStateFromConfig;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...CustomPluginSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            if (!config.PluginSettings.Plugins[schema.id]) {\n                config.PluginSettings.Plugins[schema.id] = {};\n            }\n\n            const configSettings = config.PluginSettings.Plugins[schema.id];\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                const value = this.state[lowerKey] || setting.default;\n                if (value == null) {\n                    Reflect.deleteProperty(configSettings, lowerKey);\n                } else {\n                    configSettings[lowerKey] = value;\n                }\n            });\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema) {\n        const state = {};\n\n        if (schema) {\n            const configSettings = config.PluginSettings.Plugins[schema.id] || {};\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                state[lowerKey] = configSettings[lowerKey] == null ? setting.default : configSettings[lowerKey];\n            });\n        }\n\n        return state;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport CustomPluginSettings from './custom_plugin_settings.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const pluginId = ownProps.match.params.plugin_id;\n    const plugin = state.entities.admin.plugins[pluginId];\n    const settings = plugin && plugin.settings_schema && plugin.settings_schema.settings && plugin.settings_schema.settings.map((setting) => {\n        return {...setting, label: setting.display_name};\n    });\n    const translate = (plugin && plugin.translate) || false;\n    return {\n        schema: plugin ? {...plugin.settings_schema, id: plugin.id, name: plugin.name, settings, translate} : null,\n        roles: getRoles(state),\n    };\n}\n\nexport default connect(mapStateToProps)(CustomPluginSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ComplianceReports extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set if compliance reports are licensed\n         */\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Set if compliance reports are enabled in the config\n         */\n        enabled: PropTypes.bool.isRequired,\n\n        /*\n         * Array of reports to render\n         */\n        reports: PropTypes.arrayOf(PropTypes.object).isRequired,\n        users: PropTypes.object.isRequired,\n\n        /*\n         * Error message to display\n         */\n        serverError: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get compliance reports\n             */\n            getComplianceReports: PropTypes.func.isRequired,\n\n            /*\n             * Function to save compliance reports\n             */\n            createComplianceReport: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingReports: true,\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return;\n        }\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingReports: true});\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    runReport = (e) => {\n        e.preventDefault();\n\n        this.setState({runningReport: true});\n\n        const job = {};\n        job.desc = this.refs.desc.value;\n        job.emails = this.refs.emails.value;\n        job.keywords = this.refs.keywords.value;\n        job.start_at = Date.parse(this.refs.from.value);\n        job.end_at = Date.parse(this.refs.to.value);\n\n        this.props.actions.createComplianceReport(job).then(\n            ({data}) => {\n                if (data) {\n                    this.refs.emails.value = '';\n                    this.refs.keywords.value = '';\n                    this.refs.desc.value = '';\n                    this.refs.from.value = '';\n                    this.refs.to.value = '';\n                }\n                this.setState({runningReport: false});\n            }\n        );\n    }\n\n    getDateTime(millis) {\n        const date = new Date(millis);\n        return (\n            <span style={style.date}>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return <div/>;\n        }\n\n        let content = null;\n        if (this.state.loadingReports) {\n            content = <LoadingScreen/>;\n        } else {\n            var list = [];\n\n            for (var i = 0; i < this.props.reports.length; i++) {\n                const report = this.props.reports[i];\n\n                let params = '';\n                if (report.type === 'adhoc') {\n                    params = (\n                        <span>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />{' '}{this.getDateTime(report.start_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />{' '}{this.getDateTime(report.end_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />{' '}{report.emails}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />{' '}{report.keywords}\n                        </span>);\n                }\n\n                let download = '';\n                let status = '';\n                if (report.status === 'finished') {\n                    download = (\n                        <a href={`${Client4.getBaseRoute()}/compliance/reports/${report.id}/download`}>\n                            <FormattedMessage\n                                id='admin.compliance_table.download'\n                                defaultMessage='Download'\n                            />\n                        </a>\n                    );\n\n                    status = (\n                        <span style={style.greenStatus}>{report.status}</span>\n                    );\n                } else if (report.status === 'failed') {\n                    status = (\n                        <span style={style.redStatus}>{report.status}</span>\n                    );\n                }\n\n                let user = report.user_id;\n                const profile = this.props.users[report.user_id];\n                if (profile) {\n                    user = profile.email;\n                }\n\n                list[i] = (\n                    <tr key={report.id}>\n                        <td style={style.dataCell}>{download}</td>\n                        <td>{this.getDateTime(report.create_at)}</td>\n                        <td>{status}</td>\n                        <td>{report.count}</td>\n                        <td>{report.type}</td>\n                        <td style={style.dataCell}>{report.desc}</td>\n                        <td>{user}</td>\n                        <td style={style.dataCell}>{params}</td>\n                    </tr>\n                );\n            }\n\n            content = (\n                <div style={style.content}>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.timestamp'\n                                        defaultMessage='Timestamp'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.status'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.records'\n                                        defaultMessage='Records'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.type'\n                                        defaultMessage='Type'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.desc'\n                                        defaultMessage='Description'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.userId'\n                                        defaultMessage='Requested By'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.params'\n                                        defaultMessage='Params'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.props.serverError) {\n            serverError = (\n                <div\n                    className='form-group has-error'\n                    style={style.serverError}\n                >\n                    <label className='control-label'>{this.props.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div className='panel compliance-panel'>\n                <h3>\n                    <FormattedMessage\n                        id='admin.compliance_reports.title'\n                        defaultMessage='Compliance Reports'\n                    />\n                </h3>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.desc'\n                                defaultMessage='Job Name:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='desc'\n                            ref='desc'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.desc_placeholder', 'E.g. \"Audit 445 for HR\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='from'\n                            ref='from'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.from_placeholder', 'E.g. \"2016-03-11\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='to'\n                            ref='to'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.to_placeholder', 'E.g. \"2016-03-15\"')}\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='emails'\n                            ref='emails'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.emails_placeholder', 'E.g. \"bill@example.com, bob@example.com\"')}\n                        />\n                    </div>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='keywords'\n                            ref='keywords'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.keywords_placeholder', 'E.g. \"shorting stock\"')}\n                        />\n                    </div>\n                </div>\n                <div className='clearfix'>\n                    <button\n                        id='run-button'\n                        type='submit'\n                        className='btn btn-primary'\n                        onClick={this.runReport}\n                    >\n                        <FormattedMessage\n                            id='admin.compliance_reports.run'\n                            defaultMessage='Run Compliance Report'\n                        />\n                    </button>\n                </div>\n                {serverError}\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        disabled={this.state.runningReport}\n                        onClick={this.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.compliance_reports.reload'\n                            defaultMessage='Reload Completed Compliance Reports'\n                        />\n                    </button>\n                </div>\n                <div className='compliance-panel__table'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    content: {margin: 10},\n    greenStatus: {color: 'green'},\n    redStatus: {color: 'red'},\n    dataCell: {whiteSpace: 'nowrap'},\n    date: {whiteSpace: 'nowrap'},\n    serverError: {marginTop: '10px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {createComplianceReport, getComplianceReports} from 'mattermost-redux/actions/admin';\nimport {getComplianceReports as selectComplianceReports, getConfig} from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport ComplianceReports from './compliance_reports.jsx';\n\nconst getUsersForReports = createSelector(\n    (state) => state.entities.users.profiles,\n    (state) => state.entities.admin.complianceReports,\n    (users, reports) => {\n        const usersMap = {};\n        Object.values(reports).forEach((r) => {\n            const u = users[r.user_id];\n            if (u) {\n                usersMap[u.id] = u;\n            }\n        });\n        return usersMap;\n    }\n);\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    let enabled = false;\n    const config = getConfig(state);\n    if (config && config.ComplianceSettings) {\n        enabled = config.ComplianceSettings.Enable;\n    }\n\n    let serverError;\n    const error = state.requests.admin.createCompliance.error;\n    if (error) {\n        serverError = error.message;\n    }\n\n    const reports = Object.values(selectComplianceReports(state)).sort((a, b) => {\n        return b.create_at - a.create_at;\n    });\n\n    return {\n        isLicensed,\n        enabled,\n        reports,\n        serverError,\n        users: getUsersForReports(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getComplianceReports,\n            createComplianceReport,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplianceReports);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ComplianceReports from 'components/admin_console/compliance_reports';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class Audits extends React.PureComponent {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Array of audits to render\n         */\n        audits: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch audits\n             */\n            getAudits: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingAudits: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingAudits: true});\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (!this.props.isLicensed) {\n            return <div/>;\n        }\n\n        if (this.state.loadingAudits) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <div style={style.auditTable}>\n                    <AuditTable\n                        audits={this.props.audits}\n                        showUserId={true}\n                        showIp={true}\n                        showSession={true}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <ComplianceReports/>\n\n                <div className='panel audit-panel'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.audits.title'\n                            defaultMessage='User Activity Logs'\n                        />\n                        <button\n                            type='submit'\n                            className='btn btn-link pull-right'\n                            onClick={this.reload}\n                        >\n                            <i\n                                className='fa fa-refresh'\n                                title={localizeMessage('generic_icons.reload', 'Reload Icon')}\n                            />\n                            <FormattedMessage\n                                id='admin.audits.reload'\n                                defaultMessage='Reload User Activity Logs'\n                            />\n                        </button>\n                    </h3>\n                    <div className='audit-panel__table'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    auditTable: {margin: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAudits} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport Audits from './audits.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n        audits: Object.values(Selectors.getAudits(state)),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Audits);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\n\nimport Setting from './setting';\n\nexport default class CustomUrlSchemesSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            value: PropTypes.array.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.arrayToString(props.value),\n        };\n    }\n\n    stringToArray = (str) => {\n        return str.split(',').map((s) => s.trim()).filter(Boolean);\n    };\n\n    arrayToString = (arr) => {\n        return arr.join(',');\n    };\n\n    handleChange = (e) => {\n        const valueAsArray = this.stringToArray(e.target.value);\n\n        this.props.onChange(this.props.id, valueAsArray);\n\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    render() {\n        const label = Utils.localizeMessage('admin.customization.customUrlSchemes', 'Custom URL Schemes:');\n        const helpText = Utils.localizeMessage(\n            'admin.customization.customUrlSchemesDesc',\n            'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: \"http\", \"https\", \"ftp\", \"tel\", and \"mailto\".'\n        );\n        const placeholder = Utils.localizeMessage('admin.customization.customUrlSchemesPlaceholder', 'E.g.: \"git,smtp\"');\n\n        return (\n            <Setting\n                label={label}\n                helpText={helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={placeholder}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {removeLicenseFile, uploadLicenseFile} from 'actions/admin_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst holders = defineMessages({\n    removing: {\n        id: t('admin.license.removing'),\n        defaultMessage: 'Removing License...',\n    },\n    uploading: {\n        id: t('admin.license.uploading'),\n        defaultMessage: 'Uploading License...',\n    },\n});\n\nclass LicenseSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRemove = this.handleRemove.bind(this);\n\n        this.state = {\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    handleChange() {\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length > 0) {\n            this.setState({fileSelected: true, fileName: element.prop('files')[0].name});\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length === 0) {\n            return;\n        }\n        const file = element.prop('files')[0];\n\n        $('#upload-button').button('loading');\n\n        uploadLicenseFile(\n            file,\n            () => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                window.location.reload(true);\n            },\n            (error) => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    handleRemove(e) {\n        e.preventDefault();\n\n        $('#remove-button').button('loading');\n\n        removeLicenseFile(\n            () => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                ErrorStore.clearLastError(true);\n                window.location.reload(true);\n            },\n            (error) => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    render() {\n        var serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        var btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let edition;\n        let licenseType;\n        let licenseKey;\n\n        const issued = Utils.displayDate(parseInt(this.props.license.IssuedAt, 10)) + ' ' + Utils.displayTime(parseInt(this.props.license.IssuedAt, 10), true);\n        const startsAt = Utils.displayDate(parseInt(this.props.license.StartsAt, 10));\n        const expiresAt = Utils.displayDate(parseInt(this.props.license.ExpiresAt, 10));\n\n        if (this.props.license.IsLicensed === 'true') {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = 'Mattermost Enterprise Edition. Enterprise features on this server have been unlocked with a license key and a valid subscription.';\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.\\n\\nYour subscription details are as follows:'}\n                    </p>\n                    {`Name: ${this.props.license.Name}`}<br/>\n                    {`Company or organization name: ${this.props.license.Company}`}<br/>\n                    {`Number of users: ${this.props.license.Users}`}<br/>\n                    {`License issued: ${issued}`}<br/>\n                    {`Start date of license: ${startsAt}`}<br/>\n                    {`Expiry date of license: ${expiresAt}`}<br/>\n                    <br/>\n                    {'See also '}<a href='https://about.mattermost.com/enterprise-edition-terms/'>{'Enterprise Edition Terms of Service'}</a>{' and '}<a href='https://about.mattermost.com/privacy/'>{'Privacy Policy.'}</a>\n                </div>\n            );\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        id='remove-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.removing)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.keyRemove'\n                            defaultMessage='Remove Enterprise License and Downgrade Server'\n                        />\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className='help-text'>\n                        {'If you migrate servers you may need to remove your license key to install it elsewhere. You can remove the key here, which will revert functionality to that of Team Edition.'}\n                    </p>\n                </div>\n            );\n        } else {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <p>\n                    {'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from '}\n                    <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://mattermost.com/'\n                    >\n                        {'https://mattermost.com/'}\n                    </a>\n                </p>\n            );\n\n            licenseType = 'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.';\n\n            let fileName;\n            if (this.state.fileName) {\n                fileName = this.state.fileName;\n            } else {\n                fileName = (\n                    <FormattedMessage\n                        id='admin.license.noFile'\n                        defaultMessage='No file uploaded'\n                    />\n                );\n            }\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button className='btn btn-primary'>\n                            <FormattedMessage\n                                id='admin.license.choose'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.mattermost-license'\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        id='upload-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.uploading)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.upload'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    <br/>\n                    {serverError}\n                    <p className='help-text no-margin'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.uploadDesc'\n                            defaultMessage='Upload a license key for Mattermost Enterprise Edition to upgrade this server. [Visit us online](!http://mattermost.com) to learn more about the benefits of Enterprise Edition or to purchase a key.'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.license.title'\n                        defaultMessage='Edition and License'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.edition'\n                                defaultMessage='Edition: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {edition}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.type'\n                                defaultMessage='License: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {licenseType}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.key'\n                                defaultMessage='License Key: '\n                            />\n                        </label>\n                        {licenseKey}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nLicenseSettings.propTypes = {\n    license: PropTypes.object.isRequired,\n    intl: intlShape.isRequired,\n    config: PropTypes.object,\n};\n\nexport default injectIntl(LicenseSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport Constants from 'utils/constants.jsx';\n\nconst MAX_TEAMS_PER_SCHEME_SUMMARY = 8;\n\nexport default class PermissionsSchemeSummary extends React.Component {\n    static propTypes = {\n        scheme: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            deleteScheme: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            deleting: false,\n            serverError: null,\n        };\n    }\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteSchemeTitle'\n                defaultMessage='Delete {scheme} scheme?'\n                values={{scheme: this.props.scheme.display_name}}\n            />\n        );\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='permission-scheme-summary-error-message'>\n                    <i className='fa fa-exclamation-circle'/> {this.state.serverError}\n                </div>\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion'\n                        defaultMessage='The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?'\n                        values={{schemeName: this.props.scheme.display_name}}\n                    />\n                </p>\n                {serverError}\n            </div>\n        );\n\n        let confirmButton = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteConfirmButton'\n                defaultMessage='Yes, Delete'\n            />\n        );\n\n        if (this.state.deleting) {\n            confirmButton = (\n                <span>\n                    <span className='fa fa-refresh icon--rotate'/>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleting'\n                        defaultMessage='Deleting...'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleDeleteConfirmed}\n                onCancel={this.handleDeleteCanceled}\n            />\n        );\n    }\n\n    stopPropagation = (e) => {\n        e.stopPropagation();\n    }\n\n    handleDeleteCanceled = () => {\n        this.setState({\n            showConfirmModal: false,\n        });\n    }\n\n    handleDeleteConfirmed = async () => {\n        this.setState({deleting: true, serverError: null});\n        const data = await this.props.actions.deleteScheme(this.props.scheme.id);\n        if (data.error) {\n            this.setState({deleting: false, serverError: data.error.message});\n        } else {\n            this.setState({deleting: false, showConfirmModal: false});\n        }\n    }\n\n    delete = (e) => {\n        e.stopPropagation();\n        this.setState({showConfirmModal: true, serverError: null});\n    }\n\n    goToEdit = () => {\n        this.props.history.push('/admin_console/permissions/team-override-scheme/' + this.props.scheme.id);\n    }\n\n    render = () => {\n        const scheme = this.props.scheme;\n\n        let teams = this.props.teams ? this.props.teams.map((team) => (\n            <span\n                className='team'\n                key={team.id}\n            >\n                {team.display_name}\n            </span>\n        )) : [];\n\n        let extraTeams = null;\n        if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {\n            extraTeams = (\n                <OverlayTrigger\n                    trigger={['hover', 'focus']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={\n                        <Tooltip\n                            className='team-scheme-extra-teams-overlay'\n                            id={scheme.id + '-extra-teams-overlay'}\n                        >\n                            {teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY)}\n                        </Tooltip>\n                    }\n                >\n                    <span\n                        className='team'\n                        key='extra-teams'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionsSchemeSummary.moreTeams'\n                            defaultMessage='+{number} more'\n                            values={{number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY}}\n                        />\n                    </span>\n                </OverlayTrigger>\n            );\n            teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);\n        }\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <div\n                className='permissions-scheme-summary'\n                onClick={this.goToEdit}\n            >\n                <div onClick={this.stopPropagation}>{confirmModal}</div>\n                <div\n                    className='permissions-scheme-summary--header'\n                >\n                    <div className='title'>\n                        {scheme.display_name}\n                    </div>\n                    <div className='actions'>\n                        <Link\n                            className='edit-button'\n                            to={'/admin_console/permissions/team-override-scheme/' + scheme.id}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.edit'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                        {'-'}\n                        <a\n                            className='delete-button'\n                            onClick={this.delete}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='permissions-scheme-summary--description'>\n                    {scheme.description}\n                </div>\n                <div className='permissions-scheme-summary--teams'>\n                    {teams}\n                    {extraTeams}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deleteScheme} from 'mattermost-redux/actions/schemes';\n\nimport {makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return function mapStateToProps(state, ownProps) {\n        return {\n            teams: getSchemeTeams(state, {schemeId: ownProps.scheme.id}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteScheme,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionsSchemeSummary);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary';\n\nconst PAGE_SIZE = 30;\nconst PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;\n\nexport default class PermissionSchemesSettings extends React.PureComponent {\n    static propTypes = {\n        schemes: PropTypes.object.isRequired,\n        jobsAreEnabled: PropTypes.bool,\n        clusterIsEnabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadSchemes: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            loadingMore: false,\n            page: 0,\n            phase2MigrationIsComplete: false,\n        };\n    }\n\n    static defaultProps = {\n        schemes: {},\n    };\n\n    async UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        let schemes;\n        let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.\n        try {\n            schemes = await this.props.actions.loadSchemes('team', 0, PAGE_SIZE);\n            if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {\n                phase2MigrationIsComplete = false;\n            }\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loading: false, phase2MigrationIsComplete}));\n        } catch (err) {\n            this.setState({loading: false, phase2MigrationIsComplete});\n        }\n    }\n\n    loadMoreSchemes = () => {\n        this.setState({loadingMore: true});\n        this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then((schemes) => {\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loadingMore: false, page: this.state.page + 1}));\n        });\n    }\n\n    // |RunJobs && !EnableCluster|(*App).IsPhase2MigrationCompleted|View                                                   |\n    // |-------------------------|---------------------------------|-------------------------------------------------------|\n    // |true                     |true                             |null                                                   |\n    // |false                    |true                             |null (Jobs were disabled after a successful migration.)|\n    // |false                    |false                            |On hold view.                                          |\n    // |true                     |false                            |In progress view.                                      |\n    teamOverrideSchemesMigrationView = () => {\n        if (this.state.phase2MigrationIsComplete) {\n            return null;\n        }\n\n        const docLink = (\n            <a\n                href='https://docs.mattermost.com/administration/config-settings.html#jobs'\n                rel='noopener noreferrer'\n                target='_blank'\n            >\n                <FormattedMessage\n                    id='admin.permissions.documentationLinkText'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {\n            return this.teamOverrideUnavalableView(\n                t('admin.permissions.teamOverrideSchemesInProgress'),\n                'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.',\n                docLink\n            );\n        }\n\n        return this.teamOverrideUnavalableView(\n            t('admin.permissions.teamOverrideSchemesNoJobsEnabled'),\n            'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.',\n            docLink,\n        );\n    }\n\n    teamOverrideUnavalableView = (id, defaultMsg, documentationLink) => {\n        return (\n            <div className='team-override-unavailable'>\n                <div className='team-override-unavailable__inner'>\n                    <FormattedMessage\n                        id={id}\n                        defaultMessage={defaultMsg}\n                        values={{documentationLink}}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    render = () => {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n        const schemes = Object.values(this.props.schemes).map((scheme) => (\n            <PermissionsSchemeSummary\n                scheme={scheme}\n                history={this.props.history}\n                key={scheme.id}\n            />\n        ));\n\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.permissions.permissionSchemes'\n                        defaultMessage='Permission Schemes'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.introBanner'\n                                defaultMessage='Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerTitle'\n                                    defaultMessage='System Scheme'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.systemSchemeBannerText'\n                                    defaultMessage='Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/system-scheme'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerButton'\n                                    defaultMessage='Edit Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesTitle'\n                                    defaultMessage='Team Override Schemes'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.teamOverrideSchemesBannerText'\n                                    defaultMessage='Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/team-override-scheme'\n                                disabled={teamOverrideView !== null}\n                                onClick={(e) => {\n                                    if (teamOverrideView !== null) {\n                                        e.preventDefault();\n                                        return false;\n                                    }\n                                    return true;\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesNewButton'\n                                    defaultMessage='New Team Override Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                    {schemes.length === 0 && teamOverrideView === null &&\n                        <div className='no-team-schemes'>\n                            <FormattedMessage\n                                id='admin.permissions.teamOverrideSchemesNoSchemes'\n                                defaultMessage='No team override schemes created.'\n                            />\n                        </div>}\n                    {teamOverrideView}\n                    {schemes.length > 0 && schemes}\n                    {!this.state.loadingMore && schemes.length === (PAGE_SIZE * (this.state.page + 1)) &&\n                        <button\n                            className='more-schemes theme style--none color--link'\n                            onClick={this.loadMoreSchemes}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.loadMoreSchemes'\n                                defaultMessage='Load more schemes'\n                            />\n                        </button>}\n                    {this.state.loadingMore &&\n                        <button className='more-schemes theme style--none color--link'>\n                            <span className='fa fa-refresh icon--rotate'/>\n                            <FormattedMessage\n                                id='admin.permissions.loadingMoreSchemes'\n                                defaultMessage='Loading...'\n                            />\n                        </button>}\n                </div>\n            </div>\n        );\n    };\n}\n\nt('admin.permissions.group.delete_posts.description');\nt('admin.permissions.group.delete_posts.name');\nt('admin.permissions.group.integrations.description');\nt('admin.permissions.group.integrations.name');\nt('admin.permissions.group.posts.description');\nt('admin.permissions.group.posts.name');\nt('admin.permissions.group.private_channel.description');\nt('admin.permissions.group.private_channel.name');\nt('admin.permissions.group.public_channel.description');\nt('admin.permissions.group.public_channel.name');\nt('admin.permissions.group.reactions.description');\nt('admin.permissions.group.reactions.name');\nt('admin.permissions.group.send_invites.description');\nt('admin.permissions.group.send_invites.name');\nt('admin.permissions.group.teams.description');\nt('admin.permissions.group.teams.name');\nt('admin.permissions.group.edit_posts.description');\nt('admin.permissions.group.edit_posts.name');\nt('admin.permissions.group.teams_team_scope.description');\nt('admin.permissions.group.teams_team_scope.name');\nt('admin.permissions.permission.assign_system_admin_role.description');\nt('admin.permissions.permission.assign_system_admin_role.name');\nt('admin.permissions.permission.create_direct_channel.description');\nt('admin.permissions.permission.create_direct_channel.name');\nt('admin.permissions.permission.create_group_channel.description');\nt('admin.permissions.permission.create_group_channel.name');\nt('admin.permissions.permission.create_private_channel.description');\nt('admin.permissions.permission.create_private_channel.name');\nt('admin.permissions.permission.create_public_channel.description');\nt('admin.permissions.permission.create_public_channel.name');\nt('admin.permissions.permission.create_team.description');\nt('admin.permissions.permission.create_team.name');\nt('admin.permissions.permission.create_user_access_token.description');\nt('admin.permissions.permission.create_user_access_token.name');\nt('admin.permissions.permission.delete_others_posts.description');\nt('admin.permissions.permission.delete_others_posts.name');\nt('admin.permissions.permission.delete_post.description');\nt('admin.permissions.permission.delete_post.name');\nt('admin.permissions.permission.delete_private_channel.description');\nt('admin.permissions.permission.delete_private_channel.name');\nt('admin.permissions.permission.delete_public_channel.description');\nt('admin.permissions.permission.delete_public_channel.name');\nt('admin.permissions.permission.edit_other_users.description');\nt('admin.permissions.permission.edit_other_users.name');\nt('admin.permissions.permission.edit_post.description');\nt('admin.permissions.permission.edit_post.name');\nt('admin.permissions.permission.import_team.description');\nt('admin.permissions.permission.import_team.name');\nt('admin.permissions.permission.list_team_channels.description');\nt('admin.permissions.permission.list_team_channels.name');\nt('admin.permissions.permission.list_users_without_team.description');\nt('admin.permissions.permission.list_users_without_team.name');\nt('admin.permissions.permission.manage_channel_roles.description');\nt('admin.permissions.permission.manage_channel_roles.name');\nt('admin.permissions.permission.manage_emojis.description');\nt('admin.permissions.permission.manage_emojis.name');\nt('admin.permissions.permission.manage_jobs.description');\nt('admin.permissions.permission.manage_jobs.name');\nt('admin.permissions.permission.manage_oauth.description');\nt('admin.permissions.permission.manage_oauth.name');\nt('admin.permissions.permission.manage_private_channel_members.description');\nt('admin.permissions.permission.manage_private_channel_members.name');\nt('admin.permissions.permission.manage_private_channel_properties.description');\nt('admin.permissions.permission.manage_private_channel_properties.name');\nt('admin.permissions.permission.manage_public_channel_members.description');\nt('admin.permissions.permission.manage_public_channel_members.name');\nt('admin.permissions.permission.manage_public_channel_properties.description');\nt('admin.permissions.permission.manage_public_channel_properties.name');\nt('admin.permissions.permission.manage_roles.description');\nt('admin.permissions.permission.manage_roles.name');\nt('admin.permissions.permission.manage_slash_commands.description');\nt('admin.permissions.permission.manage_slash_commands.name');\nt('admin.permissions.permission.manage_system.description');\nt('admin.permissions.permission.manage_system.name');\nt('admin.permissions.permission.manage_team.description');\nt('admin.permissions.permission.manage_team.name');\nt('admin.permissions.permission.manage_team_roles.description');\nt('admin.permissions.permission.manage_team_roles.name');\nt('admin.permissions.permission.manage_webhooks.description');\nt('admin.permissions.permission.manage_webhooks.name');\nt('admin.permissions.permission.permanent_delete_user.description');\nt('admin.permissions.permission.permanent_delete_user.name');\nt('admin.permissions.permission.read_channel.description');\nt('admin.permissions.permission.read_channel.name');\nt('admin.permissions.permission.read_user_access_token.description');\nt('admin.permissions.permission.read_user_access_token.name');\nt('admin.permissions.permission.remove_user_from_team.description');\nt('admin.permissions.permission.remove_user_from_team.name');\nt('admin.permissions.permission.revoke_user_access_token.description');\nt('admin.permissions.permission.revoke_user_access_token.name');\nt('admin.permissions.permission.upload_file.description');\nt('admin.permissions.permission.upload_file.name');\nt('admin.permissions.permission.view_team.description');\nt('admin.permissions.permission.view_team.name');\nt('admin.permissions.permission.edit_others_posts.description');\nt('admin.permissions.permission.edit_others_posts.name');\nt('admin.permissions.roles.all_users.name');\nt('admin.permissions.roles.channel_admin.name');\nt('admin.permissions.roles.channel_user.name');\nt('admin.permissions.roles.system_admin.name');\nt('admin.permissions.roles.system_user.name');\nt('admin.permissions.roles.team_admin.name');\nt('admin.permissions.roles.team_user.name');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSchemeTeams as loadSchemeTeams, getSchemes as loadSchemes} from 'mattermost-redux/actions/schemes';\nimport {getSchemes} from 'mattermost-redux/selectors/entities/schemes';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionSchemesSettings from './permission_schemes_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const schemes = getSchemes(state);\n    const config = getConfig(state);\n\n    return {\n        schemes,\n        jobsAreEnabled: config.RunJobs === 'true',\n        clusterIsEnabled: config.EnableCluster === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadSchemes,\n            loadSchemeTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSchemesSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AccordionToggleIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='30px'\n                    height='30px'\n                    viewBox='0 0 30 30'\n                >\n                    <g\n                        id='Developer-Export'\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='none'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-995.000000, -1372.000000)'\n                            id='All-Team-Members'\n                        >\n                            <g transform='translate(245.000000, 698.000000)'>\n                                <g\n                                    id='Team-Administrators'\n                                    transform='translate(0.000000, 651.000000)'\n                                >\n                                    <g id='accordion-header'>\n                                        <g\n                                            id='accordion---expanded'\n                                            transform='translate(750.000000, 23.000000)'\n                                        >\n                                            <path\n                                                d='M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z'\n                                                id=''\n                                                fill='#979797'\n                                            />\n                                            <circle\n                                                id='Oval-2'\n                                                stroke='#989898'\n                                                strokeWidth='2'\n                                                cx='15'\n                                                cy='15'\n                                                r='14'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxPartialIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-298.000000, -1273.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---@all-@channel-Mentions'\n                                        transform='translate(0.000000, 375.000000)'\n                                    >\n                                        <g id='Stacked-Group'>\n                                            <g\n                                                id='data-table/1st/row-checkbox-label-base'\n                                                transform='translate(25.000000, 5.000000)'\n                                            >\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z'\n                                                        id='checkbox---partial'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckboxCheckedIcon from 'components/svg/checkbox_checked_icon.jsx';\nimport CheckboxPartialIcon from 'components/svg/checkbox_partial_icon.jsx';\n\nexport default class PermissionCheckbox extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        value: '',\n    }\n\n    render() {\n        const {value} = this.props;\n        let icon = null;\n        let extraClass = '';\n        if (value === 'checked') {\n            icon = (<CheckboxCheckedIcon/>);\n            extraClass = 'checked';\n        } else if (value === 'intermediate') {\n            icon = (<CheckboxPartialIcon/>);\n            extraClass = 'intermediate';\n        }\n        return (\n            <div className={'permission-check ' + extraClass}>\n                {icon}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage, injectIntl, intlShape} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {generateId} from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport class PermissionDescription extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        id: PropTypes.string.isRequired,\n        rowType: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        selectRow: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.id = generateId();\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    closeTooltip = () => {\n        this.setState({open: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('span');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({open: isElipsis});\n    }\n\n    parentPermissionClicked = (e) => {\n        const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';\n        if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {\n            e.stopPropagation();\n        } else if (isInheritLink) {\n            this.props.selectRow(this.props.id);\n            e.stopPropagation();\n        }\n    }\n\n    render() {\n        const {inherited, id, rowType} = this.props;\n\n        let content = '';\n        if (inherited) {\n            content = (\n                <span className='inherit-link-wrapper'>\n                    <FormattedHTMLMessage\n                        id='admin.permissions.inherited_from'\n                        values={{\n                            name: this.props.intl.formatMessage({\n                                id: 'admin.permissions.roles.' + inherited.name + '.name',\n                                defaultMessage: inherited.display_name,\n                            }),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            content = (\n                <FormattedMessage\n                    id={'admin.permissions.' + rowType + '.' + id + '.description'}\n                    values={this.props.additionalValues}\n                />\n            );\n        }\n        let tooltip = (\n            <Overlay\n                show={this.state.open}\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                target={this.refs.content}\n            >\n                <Tooltip id={this.id}>\n                    {content}\n                </Tooltip>\n            </Overlay>\n        );\n        if (content.props.values && Object.keys(content.props.values).length > 0) {\n            tooltip = null;\n        }\n        content = (\n            <span\n                className='permission-description'\n                onClick={this.parentPermissionClicked}\n                ref='content'\n                onMouseOver={this.openTooltip}\n                onMouseOut={this.closeTooltip}\n            >\n                {content}\n                {tooltip}\n            </span>\n        );\n\n        return content;\n    }\n}\n\nexport default injectIntl(PermissionDescription);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionRow extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        readOnly: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    toggleSelect = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(this.props.id);\n    }\n\n    render = () => {\n        const {id, uniqId, inherited, value, readOnly, selected, additionalValues} = this.props;\n        let classes = 'permission-row';\n        if (readOnly) {\n            classes += ' read-only';\n        }\n\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        return (\n            <div\n                className={classes}\n                onClick={this.toggleSelect}\n                id={uniqId}\n            >\n                <PermissionCheckbox value={value}/>\n                <span className='permission-name'>\n                    <FormattedMessage\n                        id={'admin.permissions.permission.' + id + '.name'}\n                    />\n                </span>\n                <PermissionDescription\n                    inherited={inherited}\n                    id={id}\n                    selectRow={this.props.selectRow}\n                    rowType='permission'\n                    additionalValues={additionalValues}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionRow from './permission_row.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionGroup extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        permissions: PropTypes.array.isRequired,\n        readOnly: PropTypes.bool,\n        role: PropTypes.object,\n        parentRole: PropTypes.object,\n        scope: PropTypes.string.isRequired,\n        combined: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        root: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            prevPermissions: [],\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected !== nextProps.selected) {\n            if (this.getRecursivePermissions(this.props.permissions).indexOf(nextProps.selected) !== -1) {\n                this.setState({expanded: true});\n            }\n        }\n    }\n\n    toggleExpanded = (e) => {\n        e.stopPropagation();\n        this.setState({expanded: !this.state.expanded});\n    }\n\n    toggleSelectRow = (id) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange([id]);\n    }\n\n    getRecursivePermissions = (permissions) => {\n        let result = [];\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                result.push(permission);\n            } else {\n                result = result.concat(this.getRecursivePermissions(permission.permissions));\n            }\n        }\n        return result;\n    }\n\n    toggleSelectSubGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(ids);\n    }\n\n    toggleSelectGroup = () => {\n        const {readOnly, permissions, role, onChange} = this.props;\n        if (readOnly) {\n            return;\n        }\n        if (this.getStatus(permissions) === 'checked') {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (!this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({expanded: true});\n            onChange(permissionsToToggle);\n        } else if (this.getStatus(permissions) === '') {\n            const permissionsToToggle = [];\n            let expanded = true;\n            if (this.state.prevPermissions.length === 0) {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (!this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                        expanded = false;\n                    }\n                }\n            } else {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                    }\n                }\n            }\n            onChange(permissionsToToggle);\n            this.setState({prevPermissions: [], expanded});\n        } else {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({prevPermissions: role.permissions, expanded: false});\n            onChange(permissionsToToggle);\n        }\n    }\n\n    isInScope = (permission) => {\n        if (this.props.scope === 'channel_scope' && PermissionsScope[permission] !== 'channel_scope') {\n            return false;\n        }\n        if (this.props.scope === 'team_scope' && PermissionsScope[permission] === 'system_scope') {\n            return false;\n        }\n        return true;\n    }\n\n    renderPermission = (permission, additionalValues) => {\n        if (!this.isInScope(permission)) {\n            return null;\n        }\n        const comesFromParent = this.fromParent(permission);\n        const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;\n        return (\n            <PermissionRow\n                key={permission}\n                id={permission}\n                uniqId={this.props.uniqId + '-' + permission}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly || comesFromParent}\n                inherited={comesFromParent ? this.props.parentRole : null}\n                value={active ? 'checked' : ''}\n                onChange={this.toggleSelectRow}\n                additionalValues={additionalValues}\n            />\n        );\n    }\n\n    renderGroup = (g) => {\n        return (\n            <PermissionGroup\n                key={g.id}\n                id={g.id}\n                uniqId={this.props.uniqId + '-' + g.id}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly}\n                permissions={g.permissions}\n                additionalValues={this.props.additionalValues}\n                role={this.props.role}\n                parentRole={this.props.parentRole}\n                scope={this.props.scope}\n                onChange={this.toggleSelectSubGroup}\n                combined={g.combined}\n                root={false}\n            />\n        );\n    }\n\n    fromParent = (id) => {\n        return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;\n    }\n\n    getStatus = (permissions) => {\n        let anyChecked = false;\n        let anyUnchecked = false;\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                if (!this.isInScope(permission)) {\n                    continue;\n                }\n                anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;\n                anyUnchecked = anyUnchecked || (!this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1);\n            } else {\n                const status = this.getStatus(permission.permissions);\n                if (status === 'intermediate') {\n                    return 'intermediate';\n                }\n                if (status === 'checked') {\n                    anyChecked = true;\n                }\n                if (status === '') {\n                    anyUnchecked = true;\n                }\n            }\n        }\n        if (anyChecked && anyUnchecked) {\n            return 'intermediate';\n        }\n        if (anyChecked && !anyUnchecked) {\n            return 'checked';\n        }\n        return '';\n    }\n\n    hasPermissionsOnScope = () => {\n        return this.getRecursivePermissions(this.props.permissions).some((permission) => this.isInScope(permission));\n    }\n\n    allPermissionsFromParent = (permissions) => {\n        for (const permission of permissions) {\n            if (typeof permission !== 'string') {\n                if (!this.allPermissionsFromParent(permission.permissions)) {\n                    return false;\n                }\n                continue;\n            }\n            if (this.isInScope(permission) && !this.fromParent(permission)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render = () => {\n        const {id, uniqId, permissions, readOnly, combined, root, selected, additionalValues} = this.props;\n        if (!this.hasPermissionsOnScope()) {\n            return null;\n        }\n        const permissionsRows = permissions.map((group) => {\n            if (typeof group === 'string') {\n                const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};\n                return this.renderPermission(group, addVals);\n            }\n            return this.renderGroup(group);\n        });\n        if (root) {\n            return (\n                <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                    {permissionsRows}\n                </div>\n            );\n        }\n\n        let inherited = null;\n        if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {\n            inherited = this.props.parentRole;\n        }\n\n        let classes = '';\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {\n            classes += ' read-only';\n        }\n\n        if (combined) {\n            classes += ' combined';\n        }\n\n        return (\n            <div className='permission-group'>\n                {!root &&\n                    <div\n                        className={'permission-group-row ' + classes}\n                        onClick={this.toggleSelectGroup}\n                        id={uniqId}\n                    >\n                        {!combined &&\n                            <div\n                                className={'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : '')}\n                                onClick={this.toggleExpanded}\n                            />}\n                        <PermissionCheckbox value={this.getStatus(this.props.permissions)}/>\n                        <span className='permission-name'>\n                            <FormattedMessage id={'admin.permissions.group.' + id + '.name'}/>\n                        </span>\n                        <PermissionDescription\n                            inherited={inherited}\n                            id={id}\n                            selectRow={this.props.selectRow}\n                            rowType='group'\n                        />\n                    </div>}\n                {!combined &&\n                    <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                        {permissionsRows}\n                    </div>}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class EditPostTimeLimitButton extends React.Component {\n    static propTypes = {\n        timeLimit: PropTypes.number.isRequired,\n        onClick: PropTypes.func,\n    };\n\n    render = () => {\n        let messageID;\n        if (this.props.timeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            messageID = t('edit_post.time_limit_button.no_limit');\n        } else {\n            messageID = t('edit_post.time_limit_button.for_n_seconds');\n        }\n\n        return (\n            <button\n                className='edit-post-time-limit-button'\n                onClick={this.props.onClick}\n            >\n                <i className='fa fa-gear'/>\n                <FormattedMessage\n                    id={messageID}\n                    values={{n: this.props.timeLimit}}\n                />\n            </button>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\n\nfunction mapStateToProps(state) {\n    const {PostEditTimeLimit} = getConfig(state);\n\n    return {\n        timeLimit: parseInt(PostEditTimeLimit, 10),\n    };\n}\n\nexport default connect(mapStateToProps)(EditPostTimeLimitButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst INT32_MAX = 2147483647;\n\nexport default class EditPostTimeLimitModal extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        show: PropTypes.bool,\n        onClose: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateConfig: PropTypes.func.isRequired,\n            getConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),\n            saving: false,\n            errorMessage: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n    }\n\n    save = async () => {\n        this.setState({saving: true, errorMessage: ''});\n\n        const val = parseInt(this.state.postEditTimeLimit, 10);\n        if (val !== Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {\n                this.setState({errorMessage: localizeMessage('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'), saving: false});\n                return false;\n            }\n        }\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.ServiceSettings.PostEditTimeLimit = val;\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({errorMessage: err, saving: false});\n        } else {\n            this.setState({saving: false});\n            this.props.onClose();\n        }\n\n        return true;\n    }\n\n    handleOptionChange = (e) => {\n        const {value} = e.target;\n        if (value === Constants.ALLOW_EDIT_POST_ALWAYS) {\n            this.setState({postEditTimeLimit: Constants.UNSET_POST_EDIT_TIME_LIMIT});\n        } else {\n            this.setState({postEditTimeLimit: ''});\n        }\n    }\n\n    handleSecondsChange = (e) => {\n        const {value} = e.target;\n        this.setState({postEditTimeLimit: value});\n    }\n\n    render = () => {\n        return (\n            <Modal\n                dialogClassName='admin-modal edit-post-time-limit-modal'\n                show={this.props.show}\n            >\n                <Modal.Header\n                    closeButton={true}\n                >\n                    <h4 className='modal-title'>\n                        <FormattedMessage\n                            id='edit_post.time_limit_modal.title'\n                            defaultMessage='Configure Global Edit Post Time Limit'\n                        />\n                    </h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedHTMLMessage\n                        id='edit_post.time_limit_modal.description'\n                        defaultMessage='Setting a time limit <strong>applies to all users</strong> who have the \"Edit Post\" permissions in any permission scheme.'\n                    />\n                    <div className='padding-left x2 padding-top padding-bottom'>\n                        <div className='padding-top x2'>\n                            <input\n                                id='anytime'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_ALWAYS}\n                                checked={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='anytime'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_anytime'\n                                    defaultMessage='Anytime'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top'>\n                            <input\n                                id='timelimit'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_TIME_LIMIT}\n                                checked={this.state.postEditTimeLimit !== Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.preinput'\n                                    defaultMessage='Can edit for'\n                                />\n                            </label>\n                            <input\n                                type='number'\n                                className='form-control inline'\n                                min='0'\n                                step='1'\n                                max={INT32_MAX}\n                                id='editPostTimeLimit'\n                                readOnly={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleSecondsChange}\n                                value={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.postinput'\n                                    defaultMessage='seconds after posting'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top x2 light'>\n                            <FormattedMessage\n                                id='edit_post.time_limit_modal.subscript'\n                                defaultMessage='Set the length of time users have to edit their messages after posting.'\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className='edit-post-time-limit-modal__error'>\n                        {this.state.errorMessage}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-cancel'\n                        onClick={this.props.onClose}\n                    >\n                        <FormattedMessage\n                            id='confirm_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-default'\n                        onClick={this.save}\n                        disabled={this.state.saving}\n                    >\n                        <FormattedMessage\n                            id={this.state.saving ? t('save_button.saving') : t('edit_post.time_limit_modal.save_button')}\n                            defaultMessage='Save Edit Time'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, updateConfig} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateConfig,\n            getConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostTimeLimitModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class PermissionsTree extends React.Component {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: <EditPostTimeLimitButton onClick={this.openPostTimeLimitModal}/>,\n            },\n        };\n\n        this.groups = [\n            {\n                id: 'teams',\n                permissions: [\n                    {\n                        id: 'send_invites',\n                        combined: true,\n                        permissions: [\n                            'invite_user',\n                            'get_public_link',\n                            'add_user_to_team',\n                        ],\n                    },\n                    'create_team',\n                ],\n            },\n            {\n                id: 'public_channel',\n                permissions: [\n                    'create_public_channel',\n                    'manage_public_channel_properties',\n                    'manage_public_channel_members',\n                    'delete_public_channel',\n                ],\n            },\n            {\n                id: 'private_channel',\n                permissions: [\n                    'create_private_channel',\n                    'manage_private_channel_properties',\n                    'manage_private_channel_members',\n                    'delete_private_channel',\n                ],\n            },\n            {\n                id: 'posts',\n                permissions: [\n                    {\n                        id: 'edit_posts',\n                        permissions: [\n                            'edit_post',\n                            'edit_others_posts',\n                        ],\n                    },\n                    {\n                        id: 'delete_posts',\n                        permissions: [\n                            'delete_post',\n                            'delete_others_posts',\n                        ],\n                    },\n                    {\n                        id: 'reactions',\n                        combined: true,\n                        permissions: [\n                            'add_reaction',\n                            'remove_reaction',\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 'integrations',\n                permissions: [\n                ],\n            },\n        ];\n        this.updateGroups();\n    }\n\n    updateGroups = () => {\n        const {config, scope} = this.props;\n        const integrationsGroup = this.groups[this.groups.length - 1];\n        if ((config.EnableIncomingWebhooks === 'true' || config.EnableOutgoingWebhooks === 'true') && integrationsGroup.permissions.indexOf('manage_webhooks') === -1) {\n            integrationsGroup.permissions.push('manage_webhooks');\n        }\n        if (config.EnableOAuthServiceProvider === 'true' && integrationsGroup.permissions.indexOf('manage_oauth') === -1) {\n            integrationsGroup.permissions.push('manage_oauth');\n        }\n        if (config.EnableCommands === 'true' && integrationsGroup.permissions.indexOf('manage_slash_commands') === -1) {\n            integrationsGroup.permissions.push('manage_slash_commands');\n        }\n        if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf('manage_emojis') === -1) {\n            integrationsGroup.permissions.push('manage_emojis');\n        }\n        if (scope === 'team_scope' && this.groups[0].id !== 'teams_team_scope') {\n            this.groups[0].id = 'teams_team_scope';\n        }\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.config !== prevProps.config) {\n            this.updateGroups();\n        }\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.groups}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionsTree from './permissions_tree.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        config,\n    };\n}\n\nexport default connect(mapStateToProps)(PermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {PermissionsScope, DefaultRolePermissions} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\n\nexport default class PermissionSystemSchemeSettings extends React.Component {\n    static propTypes = {\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showResetDefaultModal: false,\n            loaded: false,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: {},\n            openRoles: {\n                all_users: true,\n                system_admin: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n        this.rolesNeeded = ['system_admin', 'system_user', 'team_admin', 'team_user', 'channel_admin', 'channel_user'];\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(this.rolesNeeded);\n        if (this.rolesNeeded.every((roleName) => this.props.roles[roleName])) {\n            this.loadRolesIntoState(this.props);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!this.state.loaded && this.rolesNeeded.every((roleName) => nextProps.roles[roleName])) {\n            this.loadRolesIntoState(nextProps);\n        }\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    loadRolesIntoState(props) {\n        const {system_admin, team_admin, channel_admin, system_user, team_user, channel_user} = props.roles; // eslint-disable-line camelcase\n        this.setState({\n            selectedPermission: null,\n            loaded: true,\n            roles: {\n                system_admin,\n                team_admin,\n                channel_admin,\n                all_users: {\n                    name: 'all_users',\n                    displayName: 'All members',\n                    permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions),\n                },\n            },\n        });\n    }\n\n    deriveRolesFromAllUsers = (role) => {\n        return {\n            system_user: {\n                ...this.props.roles.system_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_user: {\n                ...this.props.roles.team_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...this.props.roles.channel_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleSubmit = async () => {\n        const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);\n        const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);\n        const roles = this.deriveRolesFromAllUsers(this.state.roles.all_users);\n        const systemUserPromise = this.props.actions.editRole(roles.system_user);\n        const teamUserPromise = this.props.actions.editRole(roles.team_user);\n        const channelUserPromise = this.props.actions.editRole(roles.channel_user);\n        this.setState({saving: true});\n\n        Promise.all([teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise]).then(\n            (results) => {\n                let serverError = null;\n                let saveNeeded = false;\n                for (const result of results) {\n                    if (result.error) {\n                        serverError = result.error.message;\n                        saveNeeded = true;\n                        break;\n                    }\n                }\n                this.setState({serverError, saving: false, saveNeeded});\n                this.props.actions.setNavigationBlocked(saveNeeded);\n            }\n        );\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.state.roles};\n        const role = {...roles[roleId]};\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        roles[roleId] = role;\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    resetDefaults = () => {\n        const newRolesState = JSON.parse(JSON.stringify({...this.state.roles}));\n\n        Object.entries(DefaultRolePermissions).forEach(([roleName, permissions]) => {\n            newRolesState[roleName].permissions = permissions;\n        });\n\n        this.setState({roles: newRolesState, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    render = () => {\n        const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className={'admin-console-header ' + (hasCustomSchemes ? 'with-back' : '')}>\n                    {hasCustomSchemes &&\n                        <BlockableLink\n                            to='/admin_console/permissions/schemes'\n                            className='fa fa-chevron-left back'\n                        />}\n                    <FormattedMessage\n                        id='admin.permissions.systemScheme'\n                        defaultMessage='System Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.systemScheme.introBanner'\n                                defaultMessage='Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams.'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={this.state.roles.all_users}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.system_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('system_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsTitle'\n                                    defaultMessage='System Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsDescription'\n                                    defaultMessage='Full permissions granted to System Administrators.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        readOnly={true}\n                        role={this.state.roles.system_admin}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <a\n                        onClick={() => this.setState({showResetDefaultModal: true})}\n                        className='cancel-button reset-defaults-btn'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButton'\n                            defaultMessage='Reset to Defaults'\n                        />\n                    </a>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n\n                <Modal\n                    dialogClassName='admin-modal'\n                    show={this.state.showResetDefaultModal}\n                    onHide={() => this.setState({showResetDefaultModal: false})}\n                >\n                    <Modal.Header\n                        closeButton={true}\n                    >\n                        <h4 className='modal-title'>\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsButtonModalTitle'\n                                defaultMessage='Reset to Default?'\n                            />\n                        </h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalBody'\n                            defaultMessage='This will reset all selections on this page to their default settings. Are you sure you want to reset?'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-cancel'\n                            onClick={() => this.setState({showResetDefaultModal: false})}\n                        >\n                            <FormattedMessage\n                                id='confirm_modal.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            id='linkModalCloseButton'\n                            type='button'\n                            className='btn btn-default'\n                            onClick={() => {\n                                this.resetDefaults();\n                                this.setState({showResetDefaultModal: false});\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsConfirmationButton'\n                                defaultMessage='Yes, Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionSystemSchemeSettings from './permission_system_scheme_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        roles: getRoles(state),\n        rolesRequest: state.requests.roles.getRolesByNames,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSystemSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {imageURLForTeam} from 'utils/utils.jsx';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {team} = this.props;\n        const teamIconUrl = imageURLForTeam(team);\n        let icon = null;\n        if (teamIconUrl) {\n            icon = (\n                <div\n                    className='team-btn__image'\n                    style={{backgroundImage: `url('${teamIconUrl}')`}}\n                />\n            );\n        } else {\n            icon = (\n                <div className='team-btn__initials'>\n                    {team.display_name ? team.display_name.replace(/\\s/g, '').substring(0, 2) : '??'}\n                </div>\n            );\n        }\n        return (\n            <div className='team-info-block'>\n                <span className='icon'>{icon}</span>\n                <div className='team-data'>\n                    <div className='title'>{team.display_name}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport TeamInfo from 'components/team_info.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst TEAMS_PER_PAGE = 50;\n\nexport default class TeamSelectorModal extends React.Component {\n    static propTypes = {\n        currentSchemeId: PropTypes.string,\n        alreadySelected: PropTypes.array,\n        searchTerm: PropTypes.string.isRequired,\n        teams: PropTypes.array.isRequired,\n        onModalDismissed: PropTypes.func,\n        onTeamsSelected: PropTypes.func,\n        actions: PropTypes.shape({\n            loadTeams: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchTeams: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingTeams: true,\n            confirmAddModal: false,\n            confirmAddTeam: null,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadTeams(0, TEAMS_PER_PAGE * 2).then(() => {\n            this.setTeamsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setTeamsLoadingState(true);\n                    await this.props.actions.searchTeams(searchTerm);\n                    this.setTeamsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onTeamsSelected(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value, confirmed = false) => {\n        if (value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {\n            this.setState({confirmAddModal: true, confirmAddTeam: value});\n            return;\n        }\n        const values = Object.assign([], this.state.values);\n        const teamIds = values.map((v) => v.id);\n        if (value && value.id && teamIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values, confirmAddModal: false, confirmAddTeam: null});\n    }\n\n    setTeamsLoadingState = (loadingState) => {\n        this.setState({\n            loadingTeams: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setTeamsLoadingState(true);\n            this.props.actions.loadTeams(page + 1, TEAMS_PER_PAGE).then(() => {\n                this.setTeamsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    <TeamInfo team={option}/>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    renderConfirmModal(show, team) {\n        const title = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.title'\n                defaultMessage='Team Override Scheme Change?'\n            />\n        );\n        const message = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.message'\n                defaultMessage='This team is already selected in another team scheme, are you sure you want to move it to this team scheme?'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.accept'\n                defaultMessage='Yes, Move Team'\n            />\n        );\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButtonText}\n                onCancel={() => this.setState({confirmAddModal: false, confirmAddTeam: null})}\n                onConfirm={() => this.addValue(team, true)}\n            />\n        );\n    }\n\n    render() {\n        const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectTeams'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let teams = [];\n        if (this.props.teams) {\n            teams = this.props.teams.filter((team) => team.delete_at === 0);\n            teams = teams.filter((team) => team.scheme_id !== this.currentSchemeId);\n            teams = teams.filter((team) => this.props.alreadySelected.indexOf(team.id) === -1);\n            teams.sort((a, b) => {\n                const aName = a.display_name.toUpperCase();\n                const bName = b.display_name.toUpperCase();\n                if (aName === bName) {\n                    return 0;\n                }\n                if (aName > bName) {\n                    return 1;\n                }\n                return -1;\n            });\n        }\n\n        return (\n            <Modal\n                dialogClassName={'more-modal more-direct-channels team-selector-modal'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMarkdownMessage\n                            id='add_teams_to_scheme.title'\n                            defaultMessage='Add Teams To **Team Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {confirmModal}\n                    <MultiSelect\n                        key='addTeamsToSchemeKey'\n                        options={teams}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueKey='id'\n                        valueRenderer={this.renderValue}\n                        perPage={TEAMS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingTeams}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams as loadTeams, searchTeams} from 'mattermost-redux/actions/teams';\nimport {getTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport TeamSelectorModal from './team_selector_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const teams = Object.values(getTeams(state) || {}).filter((team) => {\n        return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ||\n               team.description.toLowerCase().startsWith(searchTerm.toLowerCase());\n    });\n\n    return {\n        searchTerm,\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeams,\n            setModalSearchTerm,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport TeamInfo from 'components/team_info';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRemoveTeam: PropTypes.func,\n    }\n\n    render() {\n        const team = this.props.team;\n        return (\n            <div\n                className='team'\n                key={team.id}\n            >\n                <TeamInfo team={team}/>\n                <a\n                    className='remove'\n                    onClick={() => this.props.onRemoveTeam(team.id)}\n                >\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme.removeTeam'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats as loadTeamStats} from 'mattermost-redux/actions/teams';\n\nimport {getTeamStats} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamInList from './team_in_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        stats: getTeamStats(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeamStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\n\nimport TeamInList from './team_in_list';\n\nexport default class PermissionTeamSchemeSettings extends React.Component {\n    static propTypes = {\n        schemeId: PropTypes.string,\n        scheme: PropTypes.object,\n        roles: PropTypes.object,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            loadScheme: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            patchScheme: PropTypes.func.isRequired,\n            createScheme: PropTypes.func.isRequired,\n            updateTeamScheme: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: null,\n            teams: null,\n            addTeamOpen: false,\n            selectedPermission: null,\n            openRoles: {\n                all_users: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n    }\n\n    static defaultProps = {\n        scheme: null,\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user']);\n        if (this.props.schemeId) {\n            this.props.actions.loadScheme(this.props.schemeId).then((result) => {\n                this.props.actions.loadRolesIfNeeded([\n                    result.data.default_team_user_role,\n                    result.data.default_team_admin_role,\n                    result.data.default_channel_user_role,\n                    result.data.default_channel_admin_role,\n                ]);\n            });\n            this.props.actions.loadSchemeTeams(this.props.schemeId);\n        }\n    }\n\n    isLoaded = (props) => {\n        if (props.schemeId) {\n            if (props.scheme !== null &&\n                props.teams !== null &&\n                props.roles[props.scheme.default_team_user_role] &&\n                props.roles[props.scheme.default_team_admin_role] &&\n                props.roles[props.scheme.default_channel_user_role] &&\n                props.roles[props.scheme.default_channel_admin_role]) {\n                return true;\n            }\n            return false;\n        } else if (props.roles.team_user &&\n            props.roles.team_admin &&\n            props.roles.channel_user &&\n            props.roles.channel_admin) {\n            return true;\n        }\n        return false;\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    getStateRoles = () => {\n        if (this.state.roles !== null) {\n            return this.state.roles;\n        }\n\n        let teamUser = null;\n        let teamAdmin = null;\n        let channelUser = null;\n        let channelAdmin = null;\n\n        if (this.props.schemeId) {\n            if (this.isLoaded(this.props)) {\n                teamUser = this.props.roles[this.props.scheme.default_team_user_role];\n                teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];\n                channelUser = this.props.roles[this.props.scheme.default_channel_user_role];\n                channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];\n            }\n        } else if (this.isLoaded(this.props)) {\n            teamUser = this.props.roles.team_user;\n            teamAdmin = this.props.roles.team_admin;\n            channelUser = this.props.roles.channel_user;\n            channelAdmin = this.props.roles.channel_admin;\n        } else {\n            return null;\n        }\n        return {\n            team_admin: teamAdmin,\n            channel_admin: channelAdmin,\n            all_users: {\n                name: 'all_users',\n                displayName: 'All members',\n                permissions: teamUser.permissions.concat(channelUser.permissions),\n            },\n        };\n    }\n\n    deriveRolesFromAllUsers = (baseTeam, baseChannel, role) => {\n        return {\n            team_user: {\n                ...baseTeam,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...baseChannel,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleNameChange = (e) => {\n        this.setState({schemeName: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({schemeDescription: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async () => {\n        const roles = this.getStateRoles();\n        let teamAdmin = roles.team_admin;\n        let channelAdmin = roles.channel_admin;\n        const allUsers = roles.all_users;\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        let teamUser = null;\n        let channelUser = null;\n        let schemeId = null;\n\n        this.setState({saving: true});\n        if (this.props.schemeId) {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles[this.props.scheme.default_team_user_role],\n                this.props.roles[this.props.scheme.default_channel_user_role],\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            await this.props.actions.patchScheme(this.props.schemeId, {\n                display_name: schemeName,\n                description: schemeDescription,\n            });\n            schemeId = this.props.schemeId;\n        } else {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles.team_user,\n                this.props.roles.channel_user,\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            const result = await this.props.actions.createScheme({\n                display_name: schemeName,\n                description: schemeDescription,\n                scope: 'team',\n            });\n            if (result.error) {\n                this.setState({serverError: result.error.message, saving: false, saveNeeded: true});\n                this.props.actions.setNavigationBlocked(true);\n                return;\n            }\n            const newScheme = result.data;\n            schemeId = newScheme.id;\n            await this.props.actions.loadRolesIfNeeded([\n                newScheme.default_team_user_role,\n                newScheme.default_team_admin_role,\n                newScheme.default_channel_user_role,\n                newScheme.default_channel_admin_role,\n            ]);\n            teamUser = {...teamUser, id: this.props.roles[newScheme.default_team_user_role].id};\n            teamAdmin = {...teamAdmin, id: this.props.roles[newScheme.default_team_admin_role].id};\n            channelUser = {...channelUser, id: this.props.roles[newScheme.default_channel_user_role].id};\n            channelAdmin = {...channelAdmin, id: this.props.roles[newScheme.default_channel_admin_role].id};\n        }\n\n        const teamAdminPromise = this.props.actions.editRole(teamAdmin);\n        const channelAdminPromise = this.props.actions.editRole(channelAdmin);\n        const teamUserPromise = this.props.actions.editRole(teamUser);\n        const channelUserPromise = this.props.actions.editRole(channelUser);\n\n        const teamEditPromises = [];\n\n        const currentTeams = new Set((this.state.teams || this.props.teams || []).map((t) => t.id));\n        const serverTeams = new Set((this.props.teams || []).map((t) => t.id));\n\n        // Difference of sets (currentTeams - serverTeams)\n        const addedTeams = new Set([...currentTeams].filter((t) => !serverTeams.has(t)));\n\n        // Difference of sets (serverTeams - currentTeams)\n        const removedTeams = new Set([...serverTeams].filter((t) => !currentTeams.has(t)));\n\n        for (const teamId of addedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, schemeId));\n        }\n\n        for (const teamId of removedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, ''));\n        }\n\n        const results = await Promise.all([teamAdminPromise, channelAdminPromise, teamUserPromise, channelUserPromise, ...teamEditPromises]);\n\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n        this.props.history.push('/admin_console/permissions/schemes');\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.getStateRoles()};\n        let role = null;\n        if (roles.team_admin.name === roleId) {\n            role = {...roles.team_admin};\n        } else if (roles.channel_admin.name === roleId) {\n            role = {...roles.channel_admin};\n        } else if (roles.all_users.name === roleId) {\n            role = {...roles.all_users};\n        }\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        if (roles.team_admin.name === roleId) {\n            roles.team_admin = role;\n        } else if (roles.channel_admin.name === roleId) {\n            roles.channel_admin = role;\n        } else if (roles.all_users.name === roleId) {\n            roles.all_users = role;\n        }\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    removeTeam = (teamId) => {\n        const teams = (this.state.teams || this.props.teams).filter((team) => team.id !== teamId);\n        this.setState({teams, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addTeams = (teams) => {\n        const currentTeams = this.state.teams || this.props.teams || [];\n        this.setState({\n            teams: [...currentTeams, ...teams],\n            saveNeeded: true,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    render = () => {\n        if (!this.isLoaded(this.props)) {\n            return <LoadingScreen/>;\n        }\n        const roles = this.getStateRoles();\n        const teams = this.state.teams || this.props.teams || [];\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        return (\n            <div className='wrapper--fixed'>\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        currentSchemeId={this.props.schemeId}\n                        alreadySelected={teams.map((team) => team.id)}\n                    />\n                }\n                <h3 className='admin-console-header with-back'>\n                    <BlockableLink\n                        to='/admin_console/permissions/schemes'\n                        className='fa fa-chevron-left back'\n                    />\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme'\n                        defaultMessage='Team Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.teamScheme.introBanner'\n                                defaultMessage='[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsTitle'\n                                    defaultMessage='Scheme Details'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsDescription'\n                                    defaultMessage='Set the name and description for this scheme.'\n                                />\n                            </span>\n                        </div>\n                    </div>\n                    <div className='team-scheme-details'>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-name'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeNameLabel'\n                                    defaultMessage='Scheme Name:'\n                                />\n                            </label>\n                            <input\n                                id='scheme-name'\n                                className='form-control'\n                                type='text'\n                                value={schemeName}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeNamePlaceholder', 'Scheme Name')}\n                                onChange={this.handleNameChange}\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-description'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDescriptionLabel'\n                                    defaultMessage='Scheme Description:'\n                                />\n                            </label>\n                            <textarea\n                                id='scheme-description'\n                                className='form-control'\n                                rows='5'\n                                value={schemeDescription}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description')}\n                                onChange={this.handleDescriptionChange}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsTitle'\n                                    defaultMessage='Select teams to override permissions'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsDescription'\n                                    defaultMessage='Select teams where permission exceptions are required.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <a\n                                className='btn btn-primary'\n                                onClick={this.openAddTeam}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.addTeams'\n                                    defaultMessage='Add Teams'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                    <div className='teams-list'>\n                        {teams.length === 0 &&\n                            <div className='no-team-schemes'>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.noTeams'\n                                    defaultMessage='No team selected. Please add teams to this list.'\n                                />\n                            </div>}\n                        {teams.map((team) => (\n                            <TeamInList\n                                key={team.id}\n                                team={team}\n                                onRemoveTeam={this.removeTeam}\n                            />\n                        ))}\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block all_users ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={roles.all_users}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block channel_admin ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block team_admin ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {getScheme, makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport {getScheme as loadScheme, patchScheme, createScheme, getSchemeTeams as loadSchemeTeams} from 'mattermost-redux/actions/schemes';\n\nimport {updateTeamScheme} from 'mattermost-redux/actions/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionTeamSchemeSettings from './permission_team_scheme_settings.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return (state, ownProps) => {\n        const schemeId = ownProps.match.params.scheme_id;\n        return {\n            schemeId,\n            scheme: schemeId ? getScheme(state, schemeId) : null,\n            teams: schemeId ? getSchemeTeams(state, {schemeId}) : null,\n            roles: getRoles(state),\n            rolesRequest: state.requests.roles.getRolesByNames,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            loadScheme,\n            loadSchemeTeams,\n            editRole,\n            patchScheme,\n            updateTeamScheme,\n            createScheme,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionTeamSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport {General} from 'mattermost-redux/constants';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nfunction getStateFromProps(props) {\n    const roles = props.user && props.user.roles ? props.user.roles : '';\n\n    return {\n        error: null,\n        hasPostAllRole: UserUtils.hasPostAllRole(roles),\n        hasPostAllPublicRole: UserUtils.hasPostAllPublicRole(roles),\n        hasUserAccessTokenRole: UserUtils.hasUserAccessTokenRole(roles),\n        isSystemAdmin: UserUtils.isSystemAdmin(roles),\n    };\n}\n\nexport default class ManageRolesModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Set if user access tokens are enabled\n         */\n        userAccessTokensEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to update a user's roles\n             */\n            updateUserRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = getStateFromProps(props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const user = this.props.user || {};\n        const nextUser = nextProps.user || {};\n        if (user.id !== nextUser.id) {\n            this.setState(getStateFromProps(nextProps));\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleSystemAdminChange = (e) => {\n        if (e.target.name === 'systemadmin') {\n            this.setState({isSystemAdmin: true});\n        } else if (e.target.name === 'systemmember') {\n            this.setState({isSystemAdmin: false});\n        }\n    };\n\n    handleUserAccessTokenChange = (e) => {\n        this.setState({\n            hasUserAccessTokenRole: e.target.checked,\n        });\n    };\n\n    handlePostAllChange = (e) => {\n        this.setState({\n            hasPostAllRole: e.target.checked,\n        });\n    };\n\n    handlePostAllPublicChange = (e) => {\n        this.setState({\n            hasPostAllPublicRole: e.target.checked,\n        });\n    };\n\n    trackRoleChanges = (roles, oldRoles) => {\n        if (UserUtils.hasUserAccessTokenRole(roles) && !UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        } else if (!UserUtils.hasUserAccessTokenRole(roles) && UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        }\n\n        if (UserUtils.hasPostAllRole(roles) && !UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        } else if (!UserUtils.hasPostAllRole(roles) && UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        }\n\n        if (UserUtils.hasPostAllPublicRole(roles) && !UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        } else if (!UserUtils.hasPostAllPublicRole(roles) && UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        }\n    }\n\n    handleSave = async () => {\n        this.setState({error: null});\n\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.isSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.hasUserAccessTokenRole) {\n            roles += ' ' + General.SYSTEM_USER_ACCESS_TOKEN_ROLE;\n            if (this.state.hasPostAllRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n            } else if (this.state.hasPostAllPublicRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n            }\n        }\n\n        const {data} = await this.props.actions.updateUserRoles(this.props.user.id, roles);\n\n        this.trackRoleChanges(roles, this.props.user.roles);\n\n        if (data) {\n            this.props.onModalDismissed();\n        } else {\n            this.handleError(\n                <FormattedMessage\n                    id='admin.manage_roles.saveError'\n                    defaultMessage='Unable to save roles.'\n                />\n            );\n        }\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n\n        if (user == null) {\n            return <div/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let additionalRoles;\n        if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin) {\n            additionalRoles = (\n                <div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='admin.manage_roles.additionalRoles'\n                            defaultMessage='Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions).'\n                        />\n                    </p>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handlePostAllChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllRoleTitle'\n                                    defaultMessage='post:all'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllRole'\n                                defaultMessage='Access to post to all Mattermost channels including direct messages.'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postallpublic'\n                                checked={this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                onChange={this.handlePostAllPublicChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllPublicRoleTitle'\n                                    defaultMessage='post:channels'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllPublicRole'\n                                defaultMessage='Access to post to all Mattermost public channels.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        }\n\n        let userAccessTokenContent;\n        if (this.props.userAccessTokensEnabled) {\n            userAccessTokenContent = (\n                <div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasUserAccessTokenRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handleUserAccessTokenChange}\n                            />\n                            <FormattedMarkdownMessage\n                                id='admin.manage_roles.allowUserAccessTokens'\n                                defaultMessage='Allow this account to generate [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                            />\n                            <span className='d-block padding-top padding-bottom light'>\n                                <FormattedHTMLMessage\n                                    id='admin.manage_roles.allowUserAccessTokensDesc'\n                                    defaultMessage=\"Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu.\"\n                                />\n                            </span>\n                        </label>\n                    </div>\n                    <div className='member-row--padded'>\n                        {additionalRoles}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='manage-row--inner'>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemadmin'\n                                    type='radio'\n                                    checked={this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemAdmin'\n                                    defaultMessage='System Admin'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemmember'\n                                    type='radio'\n                                    checked={!this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemMember'\n                                    defaultMessage='Member'\n                                />\n                            </label>\n                        </div>\n                    </div>\n                    {userAccessTokenContent}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_roles.manageRolesTitle'\n                            defaultMessage='Manage Roles'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateUserRoles} from 'mattermost-redux/actions/users';\n\nimport ManageRolesModal from './manage_roles_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokensEnabled: state.entities.admin.config.ServiceSettings.EnableUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRolesModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Dropdown, MenuItem} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ManageTeamsDropdown extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        onError: PropTypes.func.isRequired,\n        onMemberChange: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n\n        this.removeFromTeam = this.removeFromTeam.bind(this);\n\n        this.handleMemberChange = this.handleMemberChange.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    toggleDropdown() {\n        this.setState((prevState) => {\n            return {show: !prevState.show};\n        });\n    }\n\n    makeTeamAdmin = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    makeMember = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    removeFromTeam() {\n        removeUserFromTeam(\n            this.props.teamMember.team_id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberChange() {\n        this.props.onMemberChange(this.props.teamMember.team_id);\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.teamMember.team_id);\n    }\n\n    render() {\n        const isTeamAdmin = Utils.isAdmin(this.props.teamMember.roles) || this.props.teamMember.scheme_admin;\n\n        let title;\n        if (isTeamAdmin) {\n            title = Utils.localizeMessage('admin.user_item.teamAdmin', 'Team Admin');\n        } else {\n            title = Utils.localizeMessage('admin.user_item.teamMember', 'Team Member');\n        }\n\n        let makeTeamAdmin = null;\n        if (!isTeamAdmin) {\n            makeTeamAdmin = (\n                <MenuItem\n                    id='makeTeamAdmin'\n                    onSelect={this.makeTeamAdmin}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeTeamAdmin'\n                        defaultMessage='Make Team Admin'\n                    />\n                </MenuItem>\n            );\n        }\n\n        let makeMember = null;\n        if (isTeamAdmin) {\n            makeMember = (\n                <MenuItem\n                    id='makeMember'\n                    onSelect={this.makeMember}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeMember'\n                        defaultMessage='Make Member'\n                    />\n                </MenuItem>\n            );\n        }\n\n        return (\n            <Dropdown\n                id={`manage-teams-${this.props.user.id}-${this.props.teamMember.team_id}`}\n                open={this.state.show}\n                onToggle={this.toggleDropdown}\n            >\n                <Dropdown.Toggle useAnchor={true}>\n                    {title}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {makeTeamAdmin}\n                    {makeMember}\n                    <MenuItem\n                        id='removeFromTeam'\n                        onSelect={this.removeFromTeam}\n                    >\n                        <FormattedMessage\n                            id='team_members_dropdown.leave_team'\n                            defaultMessage='Remove from Team'\n                        />\n                    </MenuItem>\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\n\nexport default class RemoveFromTeamButton extends React.PureComponent {\n    static propTypes = {\n        onError: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        team: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n\n        removeUserFromTeam(\n            this.props.team.id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.team.id);\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='team_members_dropdown.leave_team'\n                    defaultMessage='Remove from Team'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport ManageTeamsDropdown from './manage_teams_dropdown.jsx';\nimport RemoveFromTeamButton from './remove_from_team_button.jsx';\n\nexport default class ManageTeamsModal extends React.Component {\n    static propTypes = {\n        locale: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func.isRequired,\n        show: PropTypes.bool.isRequired,\n        user: PropTypes.object,\n        actions: PropTypes.shape({\n            getTeamMembersForUser: PropTypes.func.isRequired,\n            getTeamsForUser: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            teams: null,\n            teamMembers: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.user) {\n            this.loadTeamsAndTeamMembers();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : '';\n        const nextUserId = nextProps.user ? nextProps.user.id : '';\n\n        if (userId !== nextUserId) {\n            this.setState({\n                teams: null,\n                teamMembers: null,\n            });\n\n            if (nextProps.user) {\n                this.loadTeamsAndTeamMembers(nextProps.user);\n            }\n        }\n    }\n\n    loadTeamsAndTeamMembers = async (user = this.props.user) => {\n        this.getTeamMembers(user.id);\n        const {data} = await this.props.actions.getTeamsForUser(user.id);\n        this.setState({\n            teams: filterAndSortTeamsByDisplayName(data, this.props.locale),\n        });\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    getTeamMembers = async (userId = this.props.user.id) => {\n        const {data} = await this.props.actions.getTeamMembersForUser(userId);\n        if (data) {\n            this.setState({\n                teamMembers: data,\n            });\n        }\n    }\n\n    handleMemberRemove = (teamId) => {\n        this.setState({\n            teams: this.state.teams.filter((team) => team.id !== teamId),\n            teamMembers: this.state.teamMembers.filter((teamMember) => teamMember.team_id !== teamId),\n        });\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n        const {teams, teamMembers} = this.state;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        const isSystemAdmin = Utils.isAdmin(user.roles);\n\n        let name = Utils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let teamList;\n        if (teams && teamMembers) {\n            teamList = teams.map((team) => {\n                const teamMember = teamMembers.find((member) => member.team_id === team.id);\n                if (!teamMember) {\n                    return null;\n                }\n\n                let action;\n                if (isSystemAdmin) {\n                    action = (\n                        <RemoveFromTeamButton\n                            user={user}\n                            team={team}\n                            onError={this.handleError}\n                            onMemberRemove={this.handleMemberRemove}\n                        />\n                    );\n                } else {\n                    action = (\n                        <ManageTeamsDropdown\n                            user={user}\n                            team={team}\n                            teamMember={teamMember}\n                            onError={this.handleError}\n                            onMemberChange={this.getTeamMembers}\n                            onMemberRemove={this.handleMemberRemove}\n                            updateTeamMemberSchemeRoles={this.props.actions.updateTeamMemberSchemeRoles}\n                        />\n                    );\n                }\n\n                return (\n                    <div\n                        key={team.id}\n                        className='manage-teams__team'\n                    >\n                        <div className='manage-teams__team-name'>\n                            {team.display_name}\n                        </div>\n                        <div className='manage-teams__team-actions'>\n                            {action}\n                        </div>\n                    </div>\n                );\n            });\n        } else {\n            teamList = <LoadingScreen/>;\n        }\n\n        let systemAdminIndicator = null;\n        if (isSystemAdmin) {\n            systemAdminIndicator = (\n                <div className='manage-teams__system-admin'>\n                    <FormattedMessage\n                        id='admin.user_item.sysAdmin'\n                        defaultMessage='System Admin'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                    {systemAdminIndicator}\n                </div>\n                <div className='manage-teams__teams'>\n                    {teamList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateTeamMemberSchemeRoles, getTeamMembersForUser, getTeamsForUser} from 'mattermost-redux/actions/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ManageTeamsModal from './manage_teams_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeamMembersForUser,\n            getTeamsForUser,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTeamsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nexport default class RevokeTokenButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Token id to revoke\n         */\n        tokenId: PropTypes.string.isRequired,\n\n        /*\n         * Function to call on error\n         */\n        onError: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to revoke a user access token\n             */\n            revokeUserAccessToken: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.revokeUserAccessToken(this.props.tokenId);\n        trackEvent('system_console', 'revoke_user_access_token');\n\n        if (error) {\n            this.props.onError(error.message);\n        }\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='admin.revoke_token_button.delete'\n                    defaultMessage='Delete'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {revokeUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport RevokeTokenButton from './revoke_token_button.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            revokeUserAccessToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RevokeTokenButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport RevokeTokenButton from 'components/admin_console/revoke_token_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ManageTokensModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * The personal access tokens for a user, object with token ids as keys\n         */\n        userAccessTokens: PropTypes.object,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get a user's access tokens\n             */\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : null;\n        const nextUserId = nextProps.user ? nextProps.user.id : null;\n        if (nextUserId && nextUserId !== userId) {\n            this.props.actions.getUserAccessTokensForUser(nextUserId, 0, 200);\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    renderContents = () => {\n        const {user, userAccessTokens} = this.props;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let tokenList;\n        if (userAccessTokens) {\n            const userAccessTokensList = Object.values(userAccessTokens);\n\n            if (userAccessTokensList.length === 0) {\n                tokenList = (\n                    <div className='manage-row__empty'>\n                        <FormattedMessage\n                            id='admin.manage_tokens.userAccessTokensNone'\n                            defaultMessage='No personal access tokens.'\n                        />\n                    </div>\n                );\n            } else {\n                tokenList = userAccessTokensList.map((token) => {\n                    return (\n                        <div\n                            key={token.id}\n                            className='manage-teams__team'\n                        >\n                            <div className='manage-teams__team-name'>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensNameLabel'\n                                        defaultMessage='Token Description: '\n                                    />\n                                    {token.description}\n                                </div>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensIdLabel'\n                                        defaultMessage='Token ID: '\n                                    />\n                                    {token.id}\n                                </div>\n                            </div>\n                            <div className='manage-teams__team-actions'>\n                                <RevokeTokenButton\n                                    tokenId={token.id}\n                                    onError={this.handleError}\n                                />\n                            </div>\n                        </div>\n                    );\n                });\n            }\n        } else {\n            tokenList = <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div className='padding-top x2'>\n                    <FormattedMarkdownMessage\n                        id='admin.manage_tokens.userAccessTokensDescription'\n                        defaultMessage='Personal access tokens function similarly to session tokens and can be used by integrations to [interact with this Mattermost server](!https://about.mattermost.com/default-api-authentication). Tokens are disabled if the user is deactivated. Learn more about [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                    />\n                </div>\n                <div className='manage-teams__teams'>\n                    {tokenList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_tokens.manageTokensTitle'\n                            defaultMessage='Manage Personal Access Tokens'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAccessTokensForUser} from 'mattermost-redux/actions/users';\n\nimport ManageTokensModal from './manage_tokens_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.user ? ownProps.user.id : '';\n\n    return {\n        userAccessTokens: state.entities.admin.userAccessTokensByUser[userId],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTokensModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {adminResetPassword} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ResetPasswordModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        currentUserId: PropTypes.string.isRequired,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.doSubmit = this.doSubmit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n\n        this.state = {\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        };\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n    }\n\n    doSubmit(e) {\n        e.preventDefault();\n        let currentPassword = '';\n        if (this.refs.currentPassword) {\n            currentPassword = this.refs.currentPassword.value;\n            if (currentPassword === '') {\n                let errorMsg = '';\n                errorMsg = (\n                    <FormattedMessage\n                        id='admin.reset_password.missing_current'\n                        defaultMessage='Please enter your current password.'\n                    />\n                );\n                this.setState({serverErrorCurrentPass: errorMsg});\n                return;\n            }\n        }\n\n        const password = this.refs.password.value;\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({serverErrorNewPass: error});\n            return;\n        }\n\n        this.setState({serverErrorNewPass: null});\n\n        adminResetPassword(\n            this.props.user.id,\n            currentPassword,\n            password,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                this.setState({serverErrorCurrentPass: err.message});\n            }\n        );\n    }\n\n    doCancel() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        const user = this.props.user;\n        if (user == null) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let serverErrorNewPass = null;\n\n        if (this.state.serverErrorNewPass) {\n            urlClass += ' has-error';\n            serverErrorNewPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorNewPass}</p></div>;\n        }\n\n        let title;\n        if (user.auth_service) {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleSwitch'\n                    defaultMessage='Switch Account to Email/Password'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleReset'\n                    defaultMessage='Reset Password'\n                />\n            );\n        }\n\n        let currentPassword = null;\n        let serverErrorCurrentPass = null;\n        let newPasswordFocus = true;\n        if (this.props.currentUserId === user.id) {\n            newPasswordFocus = false;\n            let urlClassCurrentPass = 'input-group input-group--limit';\n            if (this.state.serverErrorCurrentPass) {\n                urlClassCurrentPass += ' has-error';\n                serverErrorCurrentPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorCurrentPass}</p></div>;\n            }\n            currentPassword = (\n                <div className='col-sm-10 password__group-addon-space'>\n                    <div className={urlClassCurrentPass}>\n                        <span\n                            data-toggle='tooltip'\n                            title='Current Password'\n                            className='input-group-addon password__group-addon'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.curentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </span>\n                        <input\n                            type='password'\n                            ref='currentPassword'\n                            className='form-control'\n                            maxLength='22'\n                            autoFocus={true}\n                            tabIndex='1'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            {currentPassword}\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Password'\n                                        className='input-group-addon password__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newPassword'\n                                            defaultMessage='New Password'\n                                        />\n                                    </span>\n                                    <input\n                                        type='password'\n                                        ref='password'\n                                        className='form-control'\n                                        maxLength='22'\n                                        autoFocus={newPasswordFocus}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {serverErrorNewPass}\n                                {serverErrorCurrentPass}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ResetPasswordModal from './reset_password_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ResetPasswordModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {adminResetEmail} from 'actions/admin_actions.jsx';\n\nexport default class ResetEmailModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n    }\n\n    doSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.refs.email) {\n            const email = this.refs.email.value;\n            if (!isEmail(email)) {\n                const errMsg = (\n                    <FormattedMessage\n                        id='user.settings.general.validEmail'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                );\n                this.setState({error: errMsg});\n                return;\n            }\n        }\n\n        const user = Object.assign({}, this.props.user);\n        const email = this.refs.email.value.trim().toLowerCase();\n        user.email = email;\n\n        this.setState({error: null});\n\n        adminResetEmail(\n            user,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                const serverError = err.message ? err.message : err;\n                this.setState({error: serverError});\n            }\n        );\n    }\n\n    doCancel = () => {\n        this.setState({error: null});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        if (!this.props.user) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let errorMsg = null;\n        if (this.state.error) {\n            urlClass += ' has-error';\n            errorMsg = <div className='has-error'><p className='input__help error'>{this.state.error}</p></div>;\n        }\n\n        const title = (\n            <FormattedMessage\n                id='admin.reset_email.titleReset'\n                defaultMessage='Update Email'\n            />\n        );\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Email'\n                                        className='input-group-addon email__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_email.newEmail'\n                                            defaultMessage='New Email'\n                                        />\n                                    </span>\n                                    <input\n                                        type='email'\n                                        ref='email'\n                                        className='form-control'\n                                        maxLength='128'\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {errorMsg}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserListRowWithError extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        extraInfo: PropTypes.arrayOf(PropTypes.object),\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        this.onError = this.onError.bind(this);\n    }\n\n    onError(errorObj) {\n        this.setState({\n            error: errorObj,\n        });\n    }\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                        onError={this.onError}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = this.props.status;\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.error.message}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__right'>\n                    <div className='more-modal__top'>\n                        <div className='more-modal__details'>\n                            <div\n                                id={userCountID}\n                                className='more-modal__name'\n                            >\n                                {Utils.displayEntireNameForUser(this.props.user)}\n                            </div>\n                            <div\n                                id={userCountEmail}\n                                className={emailStyle}\n                            >\n                                {email}\n                            </div>\n                            {this.props.extraInfo}\n                        </div>\n                        <div\n                            className='more-modal__actions'\n                        >\n                            {buttons}\n                        </div>\n                    </div>\n                    <div\n                        className='more-modal__bottom'\n                    >\n                        {error}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport UserListRow from './user_list_row_with_error.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const user = ownProps.user || {};\n    return {\n        status: getStatusForUserId(state, user.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {adminResetMfa} from 'actions/admin_actions.jsx';\nimport {updateActive, revokeAllSessions} from 'actions/user_actions.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class SystemUsersDropdown extends React.Component {\n    static propTypes = {\n\n        /*\n         * User to manage with dropdown\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        /*\n         * Function to open password reset, takes user as an argument\n         */\n        doPasswordReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open email reset, takes user as an argument\n         */\n        doEmailReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage teams, takes user as an argument\n         */\n        doManageTeams: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage roles, takes user as an argument\n         */\n        doManageRoles: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage tokens, takes user as an argument\n         */\n        doManageTokens: PropTypes.func.isRequired,\n\n        /*\n         * The function to call when an error occurs\n         */\n        onError: PropTypes.func.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        teamUrl: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showDemoteModal: false,\n            showDeactivateMemberModal: false,\n            showRevokeSessionsModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeActive = (e) => {\n        e.preventDefault();\n        updateActive(this.props.user.id, true, null, this.props.onError);\n    }\n\n    handleManageTeams = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTeams(this.props.user);\n    }\n\n    handleManageRoles = (e) => {\n        e.preventDefault();\n\n        this.props.doManageRoles(this.props.user);\n    }\n\n    handleManageTokens = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTokens(this.props.user);\n    }\n\n    handleResetPassword = (e) => {\n        e.preventDefault();\n        this.props.doPasswordReset(this.props.user);\n    }\n\n    handleResetEmail = (e) => {\n        e.preventDefault();\n        this.props.doEmailReset(this.props.user);\n    }\n\n    handleResetMfa = (e) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, this.props.onError);\n    }\n\n    handleDemoteSystemAdmin = (user, role) => {\n        this.setState({\n            showDemoteModal: true,\n            user,\n            role,\n        });\n    }\n\n    handleDemoteCancel = () => {\n        this.setState({\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        });\n        this.props.onError(null);\n    }\n\n    handleDemoteSubmit = () => {\n        if (this.state.role === 'member') {\n            this.doMakeMember();\n        }\n\n        const teamUrl = this.props.teamUrl;\n        if (teamUrl) {\n            // the channel is added to the URL cause endless loading not being fully fixed\n            browserHistory.push(teamUrl + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            browserHistory.push('/');\n        }\n    }\n\n    handleShowDeactivateMemberModal = (e) => {\n        e.preventDefault();\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        updateActive(this.props.user.id, false, null, this.props.onError);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    renderDeactivateMemberModal = () => {\n        const user = this.props.user;\n\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const message = (\n            <div>\n                <FormattedMessage\n                    id='deactivate_member_modal.desc'\n                    defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system. Are you sure you want to deactivate {username}?'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    handleShowRevokeSessionsModal = (e) => {\n        e.preventDefault();\n        this.setState({showRevokeSessionsModal: true});\n    }\n\n    handleRevokeSessions = () => {\n        const me = this.props.currentUser;\n        revokeAllSessions(this.props.user.id,\n            () => {\n                if (this.props.user.id === me.id) {\n                    emitUserLoggedOutEvent();\n                }\n            },\n            this.props.onError\n        );\n\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handleRevokeSessionsCancel = () => {\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    renderRevokeSessionsModal = () => {\n        const title = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.title'\n                defaultMessage='Revoke Sessions for {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.desc'\n                defaultMessage='This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const revokeUserButtonButton = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.revoke'\n                defaultMessage='Revoke'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={revokeUserButtonButton}\n                onConfirm={this.handleRevokeSessions}\n                onCancel={this.handleRevokeSessionsCancel}\n            />\n        );\n    }\n\n    renderAccessToken = () => {\n        const userAccessTokensEnabled = this.props.enableUserAccessTokens;\n        if (!userAccessTokensEnabled) {\n            return null;\n        }\n\n        const user = this.props.user;\n        const hasPostAllRole = UserUtils.hasPostAllRole(user.roles);\n        const hasPostAllPublicRole = UserUtils.hasPostAllPublicRole(user.roles);\n        const hasUserAccessTokenRole = UserUtils.hasUserAccessTokenRole(user.roles);\n        const isSystemAdmin = UserUtils.isSystemAdmin(user.roles);\n\n        let messageId = '';\n        if (hasUserAccessTokenRole || isSystemAdmin) {\n            if (hasPostAllRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAll');\n            } else if (hasPostAllPublicRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAllPublic');\n            } else {\n                messageId = t('admin.user_item.userAccessTokenYes');\n            }\n        }\n\n        if (!messageId) {\n            return null;\n        }\n\n        return (\n            <div className='light margin-top half'>\n                <FormattedMessage\n                    key='admin.user_item.userAccessToken'\n                    id={messageId}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n        if (!user) {\n            return <div/>;\n        }\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        const me = this.props.currentUser;\n        let showMakeActive = false;\n        let showMakeNotActive = !Utils.isSystemAdmin(user.roles);\n        let showManageTeams = true;\n        let showRevokeSessions = true;\n        const showMfaReset = this.props.mfaEnabled && user.mfa_active;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='admin.user_item.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeActive = true;\n            showMakeNotActive = false;\n            showManageTeams = false;\n            showRevokeSessions = false;\n        }\n\n        let disableActivationToggle = false;\n        if (user.auth_service === Constants.LDAP_SERVICE) {\n            disableActivationToggle = true;\n        }\n\n        let menuClass = '';\n        if (disableActivationToggle) {\n            menuClass = 'disabled';\n        }\n\n        let makeActive = null;\n        if (showMakeActive) {\n            makeActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='activate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleMakeActive}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeActive'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeNotActive = null;\n        if (showMakeNotActive) {\n            makeNotActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='deactivate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleShowDeactivateMemberModal}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeInactive'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let manageTeams = null;\n        if (showManageTeams) {\n            manageTeams = (\n                <li role='presentation'>\n                    <a\n                        id='manageTeams'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTeams}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let mfaReset = null;\n        if (showMfaReset) {\n            mfaReset = (\n                <li role='presentation'>\n                    <a\n                        id='removeMFA'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetMfa}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetMfa'\n                            defaultMessage='Remove MFA'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let passwordReset;\n        if (user.auth_service) {\n            if (this.props.experimentalEnableAuthenticationTransfer) {\n                passwordReset = (\n                    <li role='presentation'>\n                        <a\n                            id='switchEmailPassword'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleResetPassword}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.switchToEmail'\n                                defaultMessage='Switch to Email/Password'\n                            />\n                        </a>\n                    </li>\n                );\n            }\n        } else {\n            passwordReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetPassword'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetPassword}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetPwd'\n                            defaultMessage='Reset Password'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let emailReset;\n        if (!user.auth_service) {\n            emailReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetEmail'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetEmail}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetEmail'\n                            defaultMessage='Update Email'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let revokeSessions;\n        if (showRevokeSessions) {\n            revokeSessions = (\n                <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                    <li role='presentation'>\n                        <a\n                            id='revokeSessions'\n                            role='menuItem'\n                            href='#'\n                            onClick={this.handleShowRevokeSessionsModal}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.revokeSessions'\n                                defaultMessage='Revoke Sessions'\n                            />\n                        </a>\n                    </li>\n                </SystemPermissionGate>\n            );\n        }\n\n        let manageTokens;\n        if (this.props.enableUserAccessTokens) {\n            manageTokens = (\n                <li role='presentation'>\n                    <a\n                        id='manageTokens'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTokens}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTokens'\n                            defaultMessage='Manage Tokens'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeDemoteModal = null;\n        if (this.props.user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm demotion from System Admin role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        values={{\n                            username: me.username,\n                        }}\n                    />\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        const deactivateMemberModal = this.renderDeactivateMemberModal();\n        const revokeSessionsModal = this.renderRevokeSessionsModal();\n\n        return (\n            <div className='dropdown member-drop text-right'>\n                <a\n                    id='memberDropdown'\n                    href='#'\n                    className='dropdown-toggle theme'\n                    type='button'\n                    data-toggle='dropdown'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <span className='caret'/>\n                </a>\n                {this.renderAccessToken()}\n                <ul\n                    className='dropdown-menu member-menu'\n                    role='menu'\n                >\n                    {makeActive}\n                    {makeNotActive}\n                    <li role='presentation'>\n                        <a\n                            id='manageRoles'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleManageRoles}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.manageRoles'\n                                defaultMessage='Manage Roles'\n                            />\n                        </a>\n                    </li>\n                    {manageTeams}\n                    {manageTokens}\n                    {mfaReset}\n                    {passwordReset}\n                    {emailReset}\n                    {revokeSessions}\n                </ul>\n                {makeDemoteModal}\n                {deactivateMemberModal}\n                {revokeSessionsModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport SystemUsersDropdown from './system_users_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SystemUsersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ManageRolesModal from 'components/admin_console/manage_roles_modal';\nimport ManageTeamsModal from 'components/admin_console/manage_teams_modal';\nimport ManageTokensModal from 'components/admin_console/manage_tokens_modal';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport ResetEmailModal from 'components/admin_console/reset_email_modal/reset_email_modal.jsx';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list.jsx';\nimport UserListRowWithError from 'components/user_list_row_with_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport SystemUsersDropdown from '../system_users_dropdown';\n\nexport default class SystemUsersList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        nextPage: PropTypes.func,\n        search: PropTypes.func.isRequired,\n        focusOnMount: PropTypes.bool,\n        renderFilterRow: PropTypes.func,\n\n        teamId: PropTypes.string.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n\n            showManageTeamsModal: false,\n            showManageRolesModal: false,\n            showManageTokensModal: false,\n            showPasswordModal: false,\n            showEmailModal: false,\n            user: null,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.teamId !== this.props.teamId) {\n            this.setState({page: 0});\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    doManageTeams = (user) => {\n        this.setState({\n            showManageTeamsModal: true,\n            user,\n        });\n    }\n\n    doManageRoles = (user) => {\n        this.setState({\n            showManageRolesModal: true,\n            user,\n        });\n    }\n\n    doManageTokens = (user) => {\n        this.setState({\n            showManageTokensModal: true,\n            user,\n        });\n    }\n\n    doManageTeamsDismiss = () => {\n        this.setState({\n            showManageTeamsModal: false,\n            user: null,\n        });\n    }\n\n    doManageRolesDismiss = () => {\n        this.setState({\n            showManageRolesModal: false,\n            user: null,\n        });\n    }\n\n    doManageTokensDismiss = () => {\n        this.setState({\n            showManageTokensModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordReset = (user) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doEmailReset = (user) => {\n        this.setState({\n            showEmailModal: true,\n            user,\n        });\n    }\n\n    doEmailResetDismiss = () => {\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    doEmailResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    getInfoForUser(user) {\n        const info = [];\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceNotEmail'\n                    id='admin.user_item.authServiceNotEmail'\n                    defaultMessage='**Sign-in Method:** {service}'\n                    values={{\n                        service,\n                    }}\n                />\n            );\n        } else {\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceEmail'\n                    id='admin.user_item.authServiceEmail'\n                    defaultMessage='**Sign-in Method:** Email'\n                />\n            );\n        }\n\n        if (this.props.mfaEnabled) {\n            info.push(', ');\n\n            if (user.mfa_active) {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaYes'\n                        id='admin.user_item.mfaYes'\n                        defaultMessage='**MFA**: Yes'\n                    />\n                );\n            } else {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaNo'\n                        id='admin.user_item.mfaNo'\n                        defaultMessage='**MFA**: No'\n                    />\n                );\n            }\n        }\n\n        return info;\n    }\n\n    renderCount(count, total, startCount, endCount, isSearch) {\n        if (total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countSearch'\n                        defaultMessage='{count, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            } else if (startCount !== 0 || endCount !== total) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countPage'\n                        defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            startCount: startCount + 1,\n                            endCount,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='system_users_list.count'\n                    defaultMessage='{count, number} {count, plural, one {user} other {users}}'\n                    values={{\n                        count,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const extraInfo = {};\n        if (this.props.users) {\n            for (const user of this.props.users) {\n                extraInfo[user.id] = this.getInfoForUser(user);\n            }\n        }\n\n        return (\n            <div>\n                <SearchableUserList\n                    {...this.props}\n                    renderCount={this.renderCount}\n                    extraInfo={extraInfo}\n                    actions={[SystemUsersDropdown]}\n                    actionProps={{\n                        mfaEnabled: this.props.mfaEnabled,\n                        enableUserAccessTokens: this.props.enableUserAccessTokens,\n                        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,\n                        doPasswordReset: this.doPasswordReset,\n                        doEmailReset: this.doEmailReset,\n                        doManageTeams: this.doManageTeams,\n                        doManageRoles: this.doManageRoles,\n                        doManageTokens: this.doManageTokens,\n                    }}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    search={this.search}\n                    page={this.state.page}\n                    term={this.props.term}\n                    onTermChange={this.props.onTermChange}\n                    rowComponentType={UserListRowWithError}\n                />\n                <ManageTeamsModal\n                    user={this.state.user}\n                    show={this.state.showManageTeamsModal}\n                    onModalDismissed={this.doManageTeamsDismiss}\n                />\n                <ManageRolesModal\n                    user={this.state.user}\n                    show={this.state.showManageRolesModal}\n                    onModalDismissed={this.doManageRolesDismiss}\n                />\n                <ManageTokensModal\n                    user={this.state.user}\n                    show={this.state.showManageTokensModal}\n                    onModalDismissed={this.doManageTokensDismiss}\n                />\n                <ResetPasswordModal\n                    user={this.state.user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                <ResetEmailModal\n                    user={this.state.user}\n                    show={this.state.showEmailModal}\n                    onModalSubmit={this.doEmailResetSubmit}\n                    onModalDismissed={this.doEmailResetDismiss}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getUser, getProfiles, getProfilesInTeam, getProfilesWithoutTeam, searchProfiles, searchProfilesInTeam} from 'mattermost-redux/selectors/entities/users';\n\nconst ALL_USERS = '';\nconst NO_TEAM = 'no_team';\nconst USER_ID_LENGTH = 26;\n\nexport function getUsers(state, loading, teamId, term) {\n    if (loading) {\n        // Show no users while loading.\n        return [];\n    }\n\n    if (term) {\n        let users = [];\n        if (teamId) {\n            users = searchProfilesInTeam(state, teamId, term);\n        } else {\n            users = searchProfiles(state, term);\n        }\n\n        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n            const user = getUser(state, term);\n            if (user) {\n                users = [user];\n            }\n        }\n\n        return users;\n    }\n\n    if (teamId === ALL_USERS) {\n        return getProfiles(state);\n    } else if (teamId === NO_TEAM) {\n        return getProfilesWithoutTeam(state);\n    }\n\n    return getProfilesInTeam(state, teamId);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser} from 'mattermost-redux/actions/users';\n\nimport SystemUsersList from './system_users_list.jsx';\nimport {getUsers} from './selectors.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        users: getUsers(state, ownProps.loading, ownProps.teamId, ownProps.term),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getStandardAnalytics} from 'actions/admin_actions.jsx';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport {loadProfiles, loadProfilesAndTeamMembers, loadProfilesWithoutTeam, searchUsers} from 'actions/user_actions.jsx';\nimport {Constants, UserSearchOptions, SearchUserTeamFilter} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SystemUsersList from './list';\n\nconst USER_ID_LENGTH = 26;\nconst USERS_PER_PAGE = 50;\n\nexport default class SystemUsers extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /**\n         * Whether or not MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        users: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get statistics for a team\n             */\n            getTeamStats: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user\n             */\n            getUser: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user access token\n             */\n            getUserAccessToken: PropTypes.func.isRequired,\n            setSystemUsersSearch: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.loadDataForTeam = this.loadDataForTeam.bind(this);\n        this.loadComplete = this.loadComplete.bind(this);\n\n        this.handleTeamChange = this.handleTeamChange.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n\n        this.doSearch = this.doSearch.bind(this);\n        this.search = this.search.bind(this);\n        this.getUserById = this.getUserById.bind(this);\n\n        this.renderFilterRow = this.renderFilterRow.bind(this);\n\n        this.state = {\n            loading: true,\n            searching: false,\n        };\n    }\n\n    componentDidMount() {\n        this.loadDataForTeam(this.props.teamId);\n        this.props.actions.getTeams(0, 1000).then(reloadIfServerVersionChanged);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setSystemUsersSearch('', '');\n    }\n\n    loadDataForTeam(teamId) {\n        if (this.props.searchTerm) {\n            this.search(this.props.searchTerm, teamId);\n            return;\n        }\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n            getStandardAnalytics();\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, teamId, this.loadComplete);\n            this.props.actions.getTeamStats(teamId);\n        }\n    }\n\n    loadComplete() {\n        this.setState({loading: false});\n    }\n\n    handleTeamChange(e) {\n        const teamId = e.target.value;\n        this.loadDataForTeam(teamId);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId);\n    }\n\n    handleTermChange(term) {\n        this.props.actions.setSystemUsersSearch(term, this.props.teamId);\n    }\n\n    nextPage(page) {\n        // Paging isn't supported while searching\n\n        if (this.props.teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else if (this.props.teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, this.props.teamId, this.loadComplete);\n        }\n    }\n\n    search(term, teamId = this.props.teamId) {\n        if (term === '') {\n            this.setState({\n                loading: false,\n            });\n\n            this.searchTimeoutId = '';\n            return;\n        }\n\n        this.doSearch(teamId, term);\n    }\n\n    doSearch(teamId, term, now = false) {\n        clearTimeout(this.searchTimeoutId);\n\n        this.setState({loading: true});\n\n        const options = {\n            [UserSearchOptions.ALLOW_INACTIVE]: true,\n        };\n        if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            options[UserSearchOptions.WITHOUT_TEAM] = true;\n        }\n\n        this.searchTimeoutId = setTimeout(\n            () => {\n                searchUsers(\n                    term,\n                    teamId,\n                    options,\n                    (users) => {\n                        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n                            // This term didn't match any users name, but it does look like it might be a user's ID\n                            this.getUserByTokenOrId(term);\n                        } else {\n                            this.setState({loading: false});\n                        }\n                    },\n                    () => {\n                        this.setState({loading: false});\n                    }\n                );\n            },\n            now ? 0 : Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n    }\n\n    getUserById(id) {\n        if (this.props.users[id]) {\n            this.setState({loading: false});\n            return;\n        }\n\n        this.props.actions.getUser(id).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    }\n\n    getUserByTokenOrId = async (id) => {\n        if (this.props.enableUserAccessTokens) {\n            const {data} = await this.props.actions.getUserAccessToken(id);\n\n            if (data) {\n                this.setState({term: data.user_id});\n                this.getUserById(data.user_id);\n                return;\n            }\n        }\n\n        this.getUserById(id);\n    }\n\n    renderFilterRow(doSearch) {\n        const teams = this.props.teams.map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='system-users__filter-row'>\n                <div className='system-users__filter'>\n                    <input\n                        id='searchUsers'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={Utils.localizeMessage('filtered_user_list.search', 'Search users')}\n                        onInput={doSearch}\n                    />\n                </div>\n                <label>\n                    <span className='system-users__team-filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.show'\n                            defaultMessage='Filter:'\n                        />\n                    </span>\n                    <select\n                        className='form-control system-users__team-filter'\n                        onChange={this.handleTeamChange}\n                        value={this.props.teamId}\n                    >\n                        <option value={SearchUserTeamFilter.ALL_USERS}>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={SearchUserTeamFilter.NO_TEAM}>{Utils.localizeMessage('admin.system_users.noTeams', 'No Teams')}</option>\n                        {teams}\n                    </select>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.system_users.title'\n                        defaultMessage='{siteName} Users'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </h3>\n                <div className='more-modal__list member-list-holder'>\n                    <SystemUsersList\n                        loading={this.state.loading}\n                        renderFilterRow={this.renderFilterRow}\n                        search={this.search}\n                        nextPage={this.nextPage}\n                        usersPerPage={USERS_PER_PAGE}\n                        total={this.props.totalUsers}\n                        teams={this.props.teams}\n                        teamId={this.props.teamId}\n                        term={this.props.searchTerm}\n                        onTermChange={this.handleTermChange}\n                        mfaEnabled={this.props.mfaEnabled}\n                        enableUserAccessTokens={this.props.enableUserAccessTokens}\n                        experimentalEnableAuthenticationTransfer={this.props.experimentalEnableAuthenticationTransfer}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams, getTeamStats} from 'mattermost-redux/actions/teams';\nimport {getUser, getUserAccessToken} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {Stats} from 'mattermost-redux/constants';\n\nimport {setSystemUsersSearch} from 'actions/views/search';\nimport {SearchUserTeamFilter} from 'utils/constants.jsx';\n\nimport SystemUsers from './system_users.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const mfaEnabled = (license && license.IsLicensed === 'true' && license.MFA === 'true') &&\n        config.EnableMultifactorAuthentication === 'true';\n    const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    const search = state.views.search.systemUsersSearch;\n    let totalUsers = 0;\n    let searchTerm = '';\n    let teamId = '';\n    if (search) {\n        searchTerm = search.term || '';\n        teamId = search.team || '';\n\n        if (!teamId || teamId === SearchUserTeamFilter.ALL_USERS) {\n            const stats = state.entities.admin.analytics || {[Stats.TOTAL_USERS]: 0, [Stats.TOTAL_INACTIVE_USERS]: 0};\n            totalUsers = stats[Stats.TOTAL_USERS] + stats[Stats.TOTAL_INACTIVE_USERS];\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            totalUsers = 0;\n        } else {\n            const stats = state.entities.teams.stats[teamId] || {total_member_count: 0};\n            totalUsers = stats.total_member_count;\n        }\n    }\n\n    return {\n        teams: getTeamsList(state),\n        siteName,\n        mfaEnabled,\n        totalUsers,\n        searchTerm,\n        teamId,\n        enableUserAccessTokens,\n        users: getUsers(state),\n        experimentalEnableAuthenticationTransfer,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getTeamStats,\n            getUser,\n            getUserAccessToken,\n            setSystemUsersSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class Logs extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        page: PropTypes.number.isRequired,\n        perPage: PropTypes.number.isRequired,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    componentDidUpdate() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n\n        this.props.previousPage();\n    }\n\n    render() {\n        let content = null;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.logs.length >= this.props.perPage) {\n            nextButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__next pull-right'\n                    onClick={this.nextPage}\n                    disabled={this.state.nextDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.logs.next'\n                        defaultMessage='Next'\n                    />\n                    <i\n                        className='fa fa-chevron-right margin-left'\n                        title={localizeMessage('generic_icons.next', 'Next Icon')}\n                    />\n                </button>\n            );\n        }\n\n        if (this.props.page > 0) {\n            previousButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__prev'\n                    onClick={this.previousPage}\n                >\n                    <i\n                        className='fa fa-angle-left'\n                        title={localizeMessage('generic_icons.previous', 'Previous Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.logs.prev'\n                        defaultMessage='Previous'\n                    />\n                </button>\n            );\n        }\n\n        content = [];\n\n        for (let i = 0; i < this.props.logs.length; i++) {\n            const style = {\n                whiteSpace: 'nowrap',\n                fontFamily: 'monospace',\n            };\n\n            if (this.props.logs[i].indexOf('[EROR]') > 0) {\n                style.color = 'red';\n            }\n\n            content.push(<br key={'br_' + i}/>);\n            content.push(\n                <span\n                    key={'log_' + i}\n                    style={style}\n                >\n                    {this.props.logs[i]}\n                </span>\n            );\n        }\n\n        return (\n            <div>\n                <div\n                    tabIndex='-1'\n                    ref='logPanel'\n                    className='log__panel'\n                >\n                    {content}\n                </div>\n                <div className='padding-top padding-bottom x2 filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport LogList from './log_list.jsx';\n\nexport default class Logs extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        nextPage: PropTypes.func,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch logs\n             */\n            getLogs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingLogs: true,\n            page: 0,\n            perPage: 1000,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (this.state.page !== nextState.page) {\n            this.props.actions.getLogs(nextState.page, nextState.perPage).then(\n                () => this.setState({loadingLogs: false})\n            );\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    reload = () => {\n        this.setState({loadingLogs: true});\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingLogs) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <LogList\n                    {...this.props}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={this.state.page}\n                    perPage={this.state.perPage}\n                />\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.logs.title'\n                        defaultMessage='Server Logs'\n                    />\n                </h3>\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.logs.bannerDesc'\n                            defaultMessage='To look up users by User ID or Token ID, go to Reporting > Users and paste the ID into the search filter.'\n                        />\n                    </div>\n                </div>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                    onClick={this.reload}\n                >\n                    <FormattedMessage\n                        id='admin.logs.reload'\n                        defaultMessage='Reload'\n                    />\n                </button>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getLogs} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport Logs from './logs.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        logs: Selectors.getLogs(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLogs,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\n\nexport default class UploadButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Upload status - loading, complete, default ('')\n         */\n        status: PropTypes.string,\n\n        /*\n         * Primary class of the button\n         */\n        primaryClass: PropTypes.string,\n\n        /*\n         * Disable the button\n         */\n        disabled: PropTypes.bool,\n\n        /*\n         * Funtion to call on button click\n         */\n        onClick: PropTypes.func,\n    }\n\n    render() {\n        const {\n            status,\n            primaryClass,\n            disabled,\n            onClick,\n        } = this.props;\n\n        let buttonIcon;\n        let buttonText;\n\n        switch (status) {\n        case UploadStatuses.LOADING:\n            buttonIcon = (\n                <i\n                    className='fa fa-refresh icon--rotate'\n                    title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploading', 'Uploading..');\n            break;\n        case UploadStatuses.COMPLETE:\n            buttonIcon = (\n                <i\n                    className='fa fa-check'\n                    title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploaded', 'Uploaded!');\n            break;\n        default:\n            buttonText = Utils.localizeMessage('admin.team.upload', 'Upload');\n        }\n\n        return (\n            <button\n                className={primaryClass}\n                disabled={disabled}\n                onClick={onClick}\n                id='upload-button'\n            >\n                {buttonIcon}\n                {' '}\n                {buttonText}\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {uploadBrandImage} from 'actions/admin_actions.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport UploadButton from './upload_button.jsx';\n\nconst HTTP_STATUS_OK = 200;\n\nexport default class BrandImageSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleImageChange = this.handleImageChange.bind(this);\n        this.handleImageSubmit = this.handleImageSubmit.bind(this);\n\n        this.state = {\n            brandImage: null,\n            brandImageExists: false,\n            brandImageTimestamp: Date.now(),\n            error: '',\n            status: UploadStatuses.DEFAULT,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        fetch(Client4.getBrandImageUrl(this.state.brandImageTimestamp)).then(\n            (resp) => {\n                if (resp.status === HTTP_STATUS_OK) {\n                    this.setState({brandImageExists: true});\n                } else {\n                    this.setState({brandImageExists: false});\n                }\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        if (this.refs.image) {\n            const reader = new FileReader();\n\n            const img = this.refs.image;\n            reader.onload = (e) => {\n                $(img).attr('src', e.target.result);\n            };\n\n            reader.readAsDataURL(this.state.brandImage);\n        }\n    }\n\n    handleImageChange() {\n        const element = $(this.refs.fileInput);\n\n        if (element.prop('files').length > 0) {\n            this.setState({\n                brandImage: element.prop('files')[0],\n                status: UploadStatuses.DEFAULT,\n            });\n        }\n    }\n\n    handleImageSubmit(e) {\n        e.preventDefault();\n\n        if (!this.state.brandImage) {\n            return;\n        }\n\n        if (this.state.status === UploadStatuses.LOADING) {\n            return;\n        }\n\n        this.setState({\n            error: '',\n            status: UploadStatuses.LOADING,\n        });\n\n        uploadBrandImage(\n            this.state.brandImage,\n            () => {\n                this.setState({\n                    brandImageExists: true,\n                    brandImage: null,\n                    brandImageTimestamp: Date.now(),\n                    status: UploadStatuses.COMPLETE,\n                });\n            },\n            (err) => {\n                this.setState({\n                    error: err.message,\n                    status: UploadStatuses.DEFAULT,\n                });\n            }\n        );\n    }\n\n    render() {\n        let btnPrimaryClass = 'btn';\n        if (this.state.brandImage) {\n            btnPrimaryClass += ' btn-primary';\n        }\n\n        let letbtnDefaultClass = 'btn';\n        if (!this.props.disabled) {\n            letbtnDefaultClass += ' btn-default';\n        }\n\n        let img = null;\n        if (this.state.brandImage) {\n            img = (\n                <img\n                    ref='image'\n                    className='brand-img'\n                    src=''\n                />\n            );\n        } else if (this.state.brandImageExists) {\n            img = (\n                <img\n                    className='brand-img'\n                    src={Client4.getBrandImageUrl(this.state.brandImageTimestamp)}\n                />\n            );\n        } else {\n            img = (\n                <p>\n                    <FormattedMessage\n                        id='admin.team.noBrandImage'\n                        defaultMessage='No brand image uploaded'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label className='control-label col-sm-4'>\n                    <FormattedMessage\n                        id='admin.team.brandImageTitle'\n                        defaultMessage='Custom Brand Image:'\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    {img}\n                </div>\n                <div className='col-sm-4'/>\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button\n                            className={letbtnDefaultClass}\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.team.chooseImage'\n                                defaultMessage='Choose New Image'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.jpg,.png,.bmp'\n                            disabled={this.props.disabled}\n                            onChange={this.handleImageChange}\n                        />\n                    </div>\n                    <UploadButton\n                        primaryClass={btnPrimaryClass}\n                        status={this.state.status}\n                        disabled={this.props.disabled || !this.state.brandImage}\n                        onClick={this.handleImageSubmit}\n                    />\n                    <br/>\n                    <FormError error={this.state.error}/>\n                    <p className='help-text no-margin'>\n                        <FormattedHTMLMessage\n                            id='admin.team.uploadDesc'\n                            defaultMessage='Customize your user experience by adding a custom image to your login screen. See examples at <a href=\"http://docs.mattermost.com/administration/config-settings.html#custom-branding\" target=\"_blank\">docs.mattermost.com/administration/config-settings.html#custom-branding</a>.'\n                        />\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n';\nimport {\n    ldapTest, invalidateAllCaches, reloadConfig, testS3Connection,\n    removeIdpSamlCertificate, uploadIdpSamlCertificate,\n    removePrivateSamlCertificate, uploadPrivateSamlCertificate,\n    removePublicSamlCertificate, uploadPublicSamlCertificate,\n} from 'actions/admin_actions';\nimport SystemAnalytics from 'components/analytics/system_analytics';\nimport TeamAnalytics from 'components/analytics/team_analytics';\nimport PluginManagement from 'components/admin_console/plugin_management';\nimport CustomPluginSettings from 'components/admin_console/custom_plugin_settings';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Audits from './audits';\nimport CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';\nimport LicenseSettings from './license_settings';\nimport PermissionSchemesSettings from './permission_schemes_settings';\nimport PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';\nimport PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';\nimport SystemUsers from './system_users';\nimport ServerLogs from './server_logs';\nimport BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';\n\nimport * as DefinitionConstants from './admin_definition_constants';\n\nconst FILE_STORAGE_DRIVER_LOCAL = 'local';\nconst FILE_STORAGE_DRIVER_S3 = 'amazons3';\nconst MEBIBYTE = Math.pow(1024, 2);\nconst MINIMUM_IDLE_TIMEOUT = 5;\n\n// admin_definitions data structure define the autogenerated admin_console\n// section. It defines the structure of the menu based on sections, subsections\n// and pages. Each page contains an schema which defines a component to use for\n// render the entire section or the name of the section (name and\n// name_default), the section in the config file (id), and a list of options to\n// configure (settings).\n//\n// All text fiels contains a transation key, and the <field>_default string are the\n// default text when the translation is still not avaiable (the english version\n// of the text).\n//\n// We can define different types of settings configuration widgets:\n//\n// Widget:\n//   - type: which define the widget type.\n//   - label (and label_default): which define the main text of the setting.\n//   - isDisabled: a function which receive current config, the state of the page and the license.\n//   - isHidden: a function which receive current config, the state of the page and the license.\n//\n// Custom Widget (extends from Widget):\n//   - component: The component used to render the widget\n//\n// JobsTable Widget (extends from Widget):\n//   - job_type: The kind of job from Constants.JobTypes\n//   - render_job: Function to convert a job object into a react component.\n//\n// Banner Widget (extends from Widget):\n//   - banner_type: The type of banner (options: info or warning)\n//\n// Setting Widget (extends from Widget):\n//   - key: The key to store the configuration in the config file.\n//   - help_text (and help_text_default): Long description of the field.\n//   - help_text_markdown: True if the translation text contains markdown.\n//   - help_text_values: Values to fill the translation (if needed).\n//\n// Bool Widget (extends from Setting Widget)\n//\n// Number Widget (extends from Setting Widget)\n//\n// Color Widget (extends from Setting Widget)\n//\n// Text Widget (extends from Setting Widget)\n//   - placeholder (and placeholder_default): Placeholder text to show in the input.\n//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.\n//   - default_value: function that generate the default value of the field based on the config, the state and the license.\n//   - max_length: The maximun length allowed\n//\n// Button Widget (extends from Setting Widget)\n//   - action: A redux action to execute on click.\n//   - error_message (and error_message_default): Error to show if action doesn't work.\n//   - success_message (and success_message_default): Success message to show if action doesn't work.\n//\n// Language Widget (extends from Setting Widget)\n//   - multiple: If you can select multiple languages.\n//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).\n//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).\n//\n// Dropdown Widget (extends from Setting Widget)\n//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).\n//\n// Permissions Flag (extends from Setting Widget)\n//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.\n//\n// FileUpload (extends from Setting Widget)\n//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.\n//   - remove_help_text_markdown: True if the translation text contains markdown.\n//   - remove_help_text_values: Values to fill the translation (if needed).\n//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.\n//   - removing_text (and removing_text_default): Text shown while the system is removing the file.\n//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.\n//   - upload_action: An store action to upload the file.\n//   - remove_action: An store action to remove the file.\n//   - fileType: A list of extensions separated by \",\". E.g. \".jpg,.png,.gif\".\n\nexport const needsUtils = {\n    not: (func) => (config, state, license) => !func(config, state, license),\n    and: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (!func(config, state, license)) {\n                return false;\n            }\n        }\n        return true;\n    },\n    or: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (func(config, state, license)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    stateValueMatch: (key, regex) => (config, state) => state[key].match(regex),\n    stateValueEqual: (key, value) => (config, state) => state[key] === value,\n    stateValueTrue: (key) => (config, state) => Boolean(state[key]),\n    stateValueFalse: (key) => (config, state) => !state[key],\n    hasLicense: (config, state, license) => license.IsLicensed === 'true',\n    hasLicenseFeature: (feature) => (config, state, license) => license.IsLicensed && license[feature] === 'true',\n};\n\nexport default {\n    reporting: {\n        system_analytics: {\n            schema: {\n                id: 'SystemAnalytics',\n                component: SystemAnalytics,\n            },\n        },\n        team_analytics: {\n            schema: {\n                id: 'TeamAnalytics',\n                component: TeamAnalytics,\n            },\n        },\n        system_users: {\n            schema: {\n                id: 'SystemUsers',\n                component: SystemUsers,\n            },\n        },\n        server_logs: {\n            schema: {\n                id: 'ServerLogs',\n                component: ServerLogs,\n            },\n        },\n    },\n    settings: {\n        general: {\n            configuration: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.general.configuration'),\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.rate.noteDescription'),\n                            label_default: 'Changing properties in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.SiteURL',\n                            label: t('admin.service.siteURL'),\n                            label_default: 'Site URL:',\n                            help_text: t('admin.service.siteURLDescription'),\n                            help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\\n \\nMattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',\n                            help_text_markdown: true,\n                            placeholder: t('admin.service.siteURLExample'),\n                            placeholder_default: 'E.g.: \"http://example.com:8065\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ListenAddress',\n                            label: t('admin.service.listenAddress'),\n                            label_default: 'Listen Address:',\n                            placeholder: t('admin.service.listenExample'),\n                            placeholder_default: 'E.g.: \":8065\"',\n                            help_text: t('admin.service.listenDescription'),\n                            help_text_default: 'The address and port to which to bind and listen. Specifying \":8065\" will bind to all network interfaces. Specifying \"127.0.0.1:8065\" will only bind to the network interface having that IP address. If you choose a port of a lower level (called \"system ports\" or \"well-known ports\", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: \"sudo setcap cap_net_bind_service=+ep ./bin/mattermost\" to allow Mattermost to bind to well-known ports.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.Forward80To443',\n                            label: t('admin.service.forward80To443'),\n                            label_default: 'Forward port 80 to 443:',\n                            help_text: t('admin.service.forward80To443Description'),\n                            help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',\n                            disabled_help_text: t('admin.service.forward80To443Description.disabled'),\n                            disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\\n \\nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',\n                            disabled_help_text_markdown: true,\n                            isDisabled: needsUtils.not(needsUtils.stateValueMatch('ServiceSettings.ListenAddress', /:443$/)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ConnectionSecurity',\n                            label: t('admin.connectionSecurityTitle'),\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.connectionSecurityNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: t('admin.connectionSecurityTls'),\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSCertFile',\n                            label: t('admin.service.tlsCertFile'),\n                            label_default: 'TLS Certificate File:',\n                            help_text: t('admin.service.tlsCertFileDescription'),\n                            help_text_default: 'The certificate file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSKeyFile',\n                            label: t('admin.service.tlsKeyFile'),\n                            label_default: 'TLS Key File:',\n                            help_text: t('admin.service.tlsKeyFileDescription'),\n                            help_text_default: 'The private key file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.UseLetsEncrypt',\n                            label: t('admin.service.useLetsEncrypt'),\n                            label_default: 'Use Let\\'s Encrypt:',\n                            help_text: t('admin.service.useLetsEncryptDescription'),\n                            help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',\n                            disabled_help_text: t('admin.service.useLetsEncryptDescription.disabled'),\n                            disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\\n \\nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',\n                            disabled_help_text_markdown: true,\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.Forward80To443'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.LetsEncryptCertificateCacheFile',\n                            label: t('admin.service.letsEncryptCertificateCacheFile'),\n                            label_default: 'Let\\'s Encrypt Certificate Cache File:',\n                            help_text: t('admin.service.letsEncryptCertificateCacheFileDescription'),\n                            help_text_default: 'Certificates retrieved and other data about the Let\\'s Encrypt service will be stored in this file.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.ReadTimeout',\n                            label: t('admin.service.readTimeout'),\n                            label_default: 'Read Timeout:',\n                            help_text: t('admin.service.readTimeoutDescription'),\n                            help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.WriteTimeout',\n                            label: t('admin.service.writeTimeout'),\n                            label_default: 'Write Timeout:',\n                            help_text: t('admin.service.writeTimeoutDescription'),\n                            help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.WebserverMode',\n                            label: t('admin.webserverModeTitle'),\n                            label_default: 'Webserver Mode:',\n                            help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,\n                            options: [\n                                {\n                                    value: 'gzip',\n                                    display_name: t('admin.webserverModeGzip'),\n                                    display_name_default: 'gzip',\n                                },\n                                {\n                                    value: 'uncompressed',\n                                    display_name: t('admin.webserverModeUncompressed'),\n                                    display_name_default: 'Uncompressed',\n                                },\n                                {\n                                    value: 'disabled',\n                                    display_name: t('admin.webserverModeDisabled'),\n                                    display_name_default: 'Disabled',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: reloadConfig,\n                            key: 'ReloadConfigButton',\n                            label: t('admin.reload.button'),\n                            label_default: 'Reload Configuration From Disk',\n                            help_text: t('admin.reload.reloadDescription'),\n                            help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',\n                            help_text_values: {\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.reload.reloadDescription.featureName'\n                                            defaultMessage='Reload Configuration from Disk'\n                                        />\n                                    </b>\n                                ),\n                                recycleDatabaseConnections: (\n                                    <a href='../advanced/database'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.reload.reloadDescription.recycleDatabaseConnections'\n                                                defaultMessage='Database > Recycle Database Connections'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            },\n                            error_message: t('admin.reload.reloadFail'),\n                            error_message_default: 'Reload unsuccessful: {error}',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            key: 'PurgeButton',\n                            action: invalidateAllCaches,\n                            label: t('admin.purge.button'),\n                            label_default: 'Purge All Caches',\n                            help_text: t('admin.purge.purgeDescription'),\n                            help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',\n                            error_message: t('admin.purge.purgeFail'),\n                            error_message_default: 'Purging unsuccessful: {error}',\n                        },\n                    ],\n                },\n            },\n            localization: {\n                schema: {\n                    id: 'LocalizationSettings',\n                    name: t('admin.general.localization'),\n                    name_default: 'Localization',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultServerLocale',\n                            label: t('admin.general.localization.serverLocaleTitle'),\n                            label_default: 'Default Server Language:',\n                            help_text: t('admin.general.localization.serverLocaleDescription'),\n                            help_text_default: 'Default language for system messages. Changing this will require a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultClientLocale',\n                            label: t('admin.general.localization.clientLocaleTitle'),\n                            label_default: 'Default Client Language:',\n                            help_text: t('admin.general.localization.clientLocaleDescription'),\n                            help_text_default: 'Default language for newly created users and pages where the user hasn\\'t logged in.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.AvailableLocales',\n                            label: t('admin.general.localization.availableLocalesTitle'),\n                            label_default: 'Available Languages:',\n                            help_text: t('admin.general.localization.availableLocalesDescription'),\n                            help_text_markdown: true,\n                            help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\\n \\nWould like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.',\n                            multiple: true,\n                            no_result: t('admin.general.localization.availableLocalesNoResults'),\n                            no_result_default: 'No results found',\n                            not_present: t('admin.general.localization.availableLocalesNotPresent'),\n                            not_present_default: 'The default client language must be included in the available list',\n                        },\n                    ],\n                },\n            },\n            users_and_teams: {\n                schema: {\n                    id: 'UserAndTeamsSettings',\n                    name: t('admin.general.usersAndTeams'),\n                    name_default: 'Users and Teams',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableUserCreation',\n                            label: t('admin.team.userCreationTitle'),\n                            label_default: 'Enable Account Creation: ',\n                            help_text: t('admin.team.userCreationDescription'),\n                            help_text_default: 'When false, the ability to create accounts is disabled. The create account button displays error when pressed.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'TeamSettings.EnableTeamCreation',\n                            label: t('admin.team.teamCreationTitle'),\n                            label_default: 'Enable Team Creation: ',\n                            help_text: t('admin.team.teamCreationDescription'),\n                            help_text_default: 'When false, only System Administrators can create teams.',\n                            permissions_mapping_name: 'enableTeamCreation',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxUsersPerTeam',\n                            label: t('admin.team.maxUsersTitle'),\n                            label_default: 'Max Users Per Team:',\n                            help_text: t('admin.team.maxUsersDescription'),\n                            help_text_default: 'Maximum total number of users per team, including both active and inactive users.',\n                            placeholder: t('admin.team.maxUsersExample'),\n                            placeholder_default: 'E.g.: \"25\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxChannelsPerTeam',\n                            label: t('admin.team.maxChannelsTitle'),\n                            label_default: 'Max Channels Per Team:',\n                            help_text: t('admin.team.maxChannelsDescription'),\n                            help_text_default: 'Maximum total number of channels per team, including both active and archived channels.',\n                            placeholder: t('admin.team.maxChannelsExample'),\n                            placeholder_default: 'E.g.: \"100\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxNotificationsPerChannel',\n                            label: t('admin.team.maxNotificationsPerChannelTitle'),\n                            label_default: 'Max Notifications Per Channel:',\n                            help_text: t('admin.team.maxNotificationsPerChannelDescription'),\n                            help_text_default: 'Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance.',\n                            placeholder: t('admin.team.maxNotificationsPerChannelExample'),\n                            placeholder_default: 'E.g.: \"1000\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableConfirmNotificationsToChannel',\n                            label: t('admin.team.enableConfirmNotificationsToChannelTitle'),\n                            label_default: 'Show @channel and @all confirmation dialog: ',\n                            help_text: t('admin.team.enableConfirmNotificationsToChannelDescription'),\n                            help_text_default: 'When true, users will be prompted to confirm when posting @channel and @all in channels with over five members. When false, no confirmation is required.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.RestrictCreationToDomains',\n                            label: t('admin.team.restrictTitle'),\n                            label_default: 'Restrict account creation to specified email domains:',\n                            help_text: t('admin.team.restrictDescription'),\n                            help_text_default: 'Teams and user accounts can only be created from a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").',\n                            placeholder: t('admin.team.restrictExample'),\n                            placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'TeamSettings.RestrictDirectMessage',\n                            label: t('admin.team.restrictDirectMessage'),\n                            label_default: 'Enable users to open Direct Message channels with:',\n                            help_text: t('admin.team.restrictDirectMessageDesc'),\n                            help_text_default: '\"Any user on the Mattermost server\" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. \"Any member of the team\" limits the ability in the Direct Messages \"More\" menu to only open Direct Message channels with users who are in the same team.\\n \\nNote: This setting only affects the UI, not permissions on the server.',\n                            options: [\n                                {\n                                    value: 'any',\n                                    display_name: t('admin.team.restrict_direct_message_any'),\n                                    display_name_default: 'Any user on the Mattermost server',\n                                },\n                                {\n                                    value: 'team',\n                                    display_name: t('admin.team.restrict_direct_message_team'),\n                                    display_name_default: 'Any member of the team',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'TeamSettings.TeammateNameDisplay',\n                            label: t('admin.team.teammateNameDisplay'),\n                            label_default: 'Teammate Name Display:',\n                            help_text: t('admin.team.teammateNameDisplayDesc'),\n                            help_text_default: 'Set how to display users\\' names in posts and the Direct Messages list.',\n                            options: [\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                                    display_name: t('admin.team.showUsername'),\n                                    display_name_default: 'Show username (default)',\n                                },\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                                    display_name: t('admin.team.showNickname'),\n                                    display_name_default: 'Show nickname if one exists, otherwise show first and last name',\n                                },\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                                    display_name: t('admin.team.showFullname'),\n                                    display_name_default: 'Show first and last name',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'TeamSettings.EditOthersPosts',\n                            label: t('admin.team.editOthersPostsTitle'),\n                            label_default: 'Allow Team Administrators to edit others posts:',\n                            help_text: t('admin.team.editOthersPostsDesc'),\n                            help_text_default: 'When true, Team Administrators and System Administrators can edit other user\\'s posts.  When false, only System Administrators can edit other user\\'s posts.',\n                            permissions_mapping_name: 'editOthersPosts',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.ExperimentalViewArchivedChannels',\n                            label: t('admin.viewArchivedChannelsTitle'),\n                            label_default: 'Allow users to view archived channels: ',\n                            help_text: t('admin.viewArchivedChannelsHelpText'),\n                            help_text_default: '(Experimental) When true, allows users to share permalinks and search for content of channels that have been archived. Users can only view the content in channels of which they were a member before the channel was archived.',\n                        },\n                    ],\n                },\n            },\n            privacy: {\n                schema: {\n                    id: 'PrivacySettings',\n                    name: t('admin.general.privacy'),\n                    name_default: 'Privacy',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowEmailAddress',\n                            label: t('admin.privacy.showEmailTitle'),\n                            label_default: 'Show Email Address:',\n                            help_text: t('admin.privacy.showEmailDescription'),\n                            help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowFullName',\n                            label: t('admin.privacy.showFullNameTitle'),\n                            label_default: 'Show Full Name:',\n                            help_text: t('admin.privacy.showFullNameDescription'),\n                            help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',\n                        },\n                    ],\n                },\n            },\n            compliance: {\n                schema: {\n                    id: 'ComplianceSettings',\n                    name: t('admin.compliance.title'),\n                    name_default: 'Compliance Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.compliance.newComplianceExportBanner'),\n                            label_markdown: true,\n                            label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/message_export) feature, and will be removed in a future release. We recommend migrating to the new system.',\n                            label_values: {siteURL: getSiteURL()},\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.Enable',\n                            label: t('admin.compliance.enableTitle'),\n                            label_default: 'Enable Compliance Reporting:',\n                            help_text: t('admin.compliance.enableDesc'),\n                            help_text_default: 'When true, Mattermost allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',\n                            help_text_markdown: true,\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ComplianceSettings.Directory',\n                            label: t('admin.compliance.directoryTitle'),\n                            label_default: 'Compliance Report Directory:',\n                            help_text: t('admin.compliance.directoryDescription'),\n                            help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',\n                            placeholder: t('admin.compliance.directoryExample'),\n                            placeholder_default: 'E.g.: \"./data/\"',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.EnableDaily',\n                            label: t('admin.compliance.enableDailyTitle'),\n                            label_default: 'Enable Daily Report:',\n                            help_text: t('admin.compliance.enableDailyDesc'),\n                            help_text_default: 'When true, Mattermost will generate a daily compliance report.',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                    ],\n                },\n            },\n            logging: {\n                schema: {\n                    id: 'LogSettings',\n                    name: t('admin.general.log'),\n                    name_default: 'Logging',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableConsole',\n                            label: t('admin.log.consoleTitle'),\n                            label_default: 'Output logs to console: ',\n                            help_text: t('admin.log.consoleDescription'),\n                            help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.ConsoleLevel',\n                            label: t('admin.log.levelTitle'),\n                            label_default: 'Console Log Level:',\n                            help_text: t('admin.log.levelDescription'),\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.ConsoleJson',\n                            label: t('admin.log.consoleJsonTitle'),\n                            label_default: 'Output console logs as JSON:',\n                            help_text: t('admin.log.jsonDescription'),\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableFile',\n                            label: t('admin.log.fileTitle'),\n                            label_default: 'Output logs to file: ',\n                            help_text: t('admin.log.fileDescription'),\n                            help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.FileLevel',\n                            label: t('admin.log.fileLevelTitle'),\n                            label_default: 'File Log Level:',\n                            help_text: t('admin.log.fileLevelDescription'),\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.FileJson',\n                            label: t('admin.log.fileJsonTitle'),\n                            label_default: 'Output file logs as JSON:',\n                            help_text: t('admin.log.jsonDescription'),\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LogSettings.FileLocation',\n                            label: t('admin.log.locationTitle'),\n                            label_default: 'File Log Directory:',\n                            help_text: t('admin.log.locationDescription'),\n                            help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',\n                            placeholder: t('admin.log.locationPlaceholder'),\n                            placeholder_default: 'Enter your file location',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableWebhookDebugging',\n                            label: t('admin.log.enableWebhookDebugging'),\n                            label_default: 'Enable Webhook Debugging:',\n                            help_text: t('admin.log.enableWebhookDebuggingDescription'),\n                            help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to \"DEBUG\".',\n                            help_text_values: {\n                                boldedLogLevel: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id='admin.log.logLevel'\n                                            defaultMessage='Log Level'\n                                        />\n                                    </strong>\n                                ),\n                            },\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableDiagnostics',\n                            label: t('admin.log.enableDiagnostics'),\n                            label_default: 'Enable Diagnostics and Error Reporting:',\n                            help_text: t('admin.log.enableDiagnosticsDescription'),\n                            help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our [privacy policy](!https://about.mattermost.com/default-privacy-policy/) to learn more.',\n                            help_text_markdown: true,\n                            onConfigSave: (displayVal, previousVal) => {\n                                if (previousVal && previousVal !== displayVal) {\n                                    trackEvent('ui', 'diagnostics_disabled');\n                                }\n                                return displayVal;\n                            },\n                        },\n                    ],\n                },\n            },\n        },\n        permissions: {\n            schemes: {\n                schema: {\n                    id: 'PermissionSchemes',\n                    component: PermissionSchemesSettings,\n                },\n            },\n            systemScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionSystemSchemeSettings,\n                },\n            },\n            teamScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionTeamSchemeSettings,\n                },\n            },\n        },\n        authentication: {\n            gitlab: {\n                schema: {\n                    id: 'GitLabSettings',\n                    name: t('admin.authentication.gitlab'),\n                    name_default: 'GitLab',\n                    onConfigLoad: (config) => {\n                        const newState = {};\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n                        return newState;\n                    },\n                    onConfigSave: (config) => {\n                        const newConfig = {...config};\n                        newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n                        return newConfig;\n                    },\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'GitLabSettings.Enable',\n                            label: t('admin.gitlab.enableTitle'),\n                            label_default: 'Enable authentication with GitLab: ',\n                            help_text: t('admin.gitlab.enableDescription'),\n                            help_text_default: 'When true, Mattermost allows team creation and account signup using GitLab OAuth.\\n \\n1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Id',\n                            label: t('admin.gitlab.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.gitlab.clientIdDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientIdExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Secret',\n                            label: t('admin.gitlab.clientSecretTitle'),\n                            label_default: 'Application Secret Key:',\n                            help_text: t('admin.gitlab.clientSecretDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Url',\n                            label: t('admin.gitlab.siteUrl'),\n                            label_default: 'GitLab Site URL:',\n                            help_text: t('admin.gitlab.siteUrlDescription'),\n                            help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                            placeholder: t('admin.gitlab.siteUrlExample'),\n                            placeholder_default: 'E.g.: https://',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.UserApiEndpoint',\n                            label: t('admin.gitlab.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.AuthEndpoint',\n                            label: t('admin.gitlab.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.TokenEndpoint',\n                            label: t('admin.gitlab.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                        },\n                    ],\n                },\n            },\n            oauth: {\n                schema: {\n                    id: 'OAuthSettings',\n                    name: t('admin.authentication.oauth'),\n                    name_default: 'OAuth 2.0',\n                    onConfigLoad: (config) => {\n                        const newState = {};\n                        if (config.GitLabSettings && config.GitLabSettings.Enable) {\n                            newState.oauthType = Constants.GITLAB_SERVICE;\n                        }\n                        if (config.Office365Settings && config.Office365Settings.Enable) {\n                            newState.oauthType = Constants.OFFICE365_SERVICE;\n                        }\n                        if (config.GoogleSettings && config.GoogleSettings.Enable) {\n                            newState.oauthType = Constants.GOOGLE_SERVICE;\n                        }\n\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n\n                        return newState;\n                    },\n                    onConfigSave: (config) => {\n                        const newConfig = {...config};\n                        newConfig.GitLabSettings = config.GitLabSettings || {};\n                        newConfig.Office365Settings = config.Office365Settings || {};\n                        newConfig.GoogleSettings = config.GoogleSettings || {};\n\n                        newConfig.GitLabSettings.Enable = false;\n                        newConfig.Office365Settings.Enable = false;\n                        newConfig.GoogleSettings.Enable = false;\n                        newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n\n                        if (config.oauthType === Constants.GITLAB_SERVICE) {\n                            newConfig.GitLabSettings.Enable = true;\n                        }\n                        if (config.oauthType === Constants.OFFICE365_SERVICE) {\n                            newConfig.Office365Settings.Enable = true;\n                        }\n                        if (config.oauthType === Constants.GOOGLE_SERVICE) {\n                            newConfig.GoogleSettings.Enable = true;\n                        }\n                        delete newConfig.oauthType;\n                        return newConfig;\n                    },\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'oauthType',\n                            label: t('admin.oauth.select'),\n                            label_default: 'Select OAuth 2.0 Service Provider:',\n                            options: [\n                                {\n                                    value: 'off',\n                                    display_name: t('admin.oauth.off'),\n                                    display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.',\n                                },\n                                {\n                                    value: Constants.GITLAB_SERVICE,\n                                    display_name: t('admin.oauth.gitlab'),\n                                    display_name_default: 'GitLab',\n                                    help_text: t('admin.gitlab.EnableMarkdownDesc'),\n                                    help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                                    help_text_markdown: true,\n                                },\n                                {\n                                    value: Constants.GOOGLE_SERVICE,\n                                    display_name: t('admin.oauth.google'),\n                                    display_name_default: 'Google Apps',\n                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('GoogleOAuth')),\n                                    help_text: t('admin.google.EnableMarkdownDesc'),\n                                    help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter \"Mattermost - your-company-name\" as the **Project Name**, then click **Create**.\\n3. Click the **OAuth consent screen** header and enter \"Mattermost\" as the **Product name shown to users**, then click **Save**.\\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\\n7. Finally, go to [Google+ API](!https://console.developers.google.com/apis/api/plus/overview\") and click *Enable*. This might take a few minutes to propagate through Google`s systems.',\n                                    help_text_markdown: true,\n                                },\n                                {\n                                    value: Constants.OFFICE365_SERVICE,\n                                    display_name: t('admin.oauth.office365'),\n                                    display_name_default: 'Office 365 (Beta)',\n                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('Office365OAuth')),\n                                    help_text: t('admin.office365.EnableMarkdownDesc'),\n                                    help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use \"Mattermost - your-company-name\" as the **Application Name**.\\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\\n5. Finally, click **Save** and then paste the **Application ID** below.',\n                                    help_text_markdown: true,\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Id',\n                            label: t('admin.gitlab.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.gitlab.clientIdDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientIdExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Secret',\n                            label: t('admin.gitlab.clientSecretTitle'),\n                            label_default: 'Application Secret Key:',\n                            help_text: t('admin.gitlab.clientSecretDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Url',\n                            label: t('admin.gitlab.siteUrl'),\n                            label_default: 'GitLab Site URL:',\n                            help_text: t('admin.gitlab.siteUrlDescription'),\n                            help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                            placeholder: t('admin.gitlab.siteUrlExample'),\n                            placeholder_default: 'E.g.: https://',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.UserApiEndpoint',\n                            label: t('admin.gitlab.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.AuthEndpoint',\n                            label: t('admin.gitlab.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.TokenEndpoint',\n                            label: t('admin.gitlab.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                                }\n                                return '';\n                            },\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.Id',\n                            label: t('admin.google.clientIdTitle'),\n                            label_default: 'Client ID:',\n                            help_text: t('admin.google.clientIdDescription'),\n                            help_text_default: 'The Client ID you received when registering your application with Google.',\n                            placeholder: t('admin.google.clientIdExample'),\n                            placeholder_default: 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.Secret',\n                            label: t('admin.google.clientSecretTitle'),\n                            label_default: 'Client Secret:',\n                            help_text: t('admin.google.clientSecretDescription'),\n                            help_text_default: 'The Client Secret you received when registering your application with Google.',\n                            placeholder: t('admin.google.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.UserApiEndpoint',\n                            label: t('admin.google.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: () => 'https://www.googleapis.com/plus/v1/people/me',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.AuthEndpoint',\n                            label: t('admin.google.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.TokenEndpoint',\n                            label: t('admin.google.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.Id',\n                            label: t('admin.office365.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.office365.clientIdDescription'),\n                            help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',\n                            placeholder: t('admin.office365.clientIdExample'),\n                            placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.Secret',\n                            label: t('admin.office365.clientSecretTitle'),\n                            label_default: 'Application Secret Password:',\n                            help_text: t('admin.office365.clientSecretDescription'),\n                            help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',\n                            placeholder: t('admin.office365.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"shAieM47sNBfgl20f8ci294\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.UserApiEndpoint',\n                            label: t('admin.office365.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.AuthEndpoint',\n                            label: t('admin.office365.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.TokenEndpoint',\n                            label: t('admin.office365.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n                            isDisabled: true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                    ],\n                },\n            },\n            email: {\n                schema: {\n                    id: 'EmailSettings',\n                    name: t('admin.authentication.email'),\n                    name_default: 'Email Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignUpWithEmail',\n                            label: t('admin.email.allowSignupTitle'),\n                            label_default: 'Enable account creation with email:',\n                            help_text: t('admin.email.allowSignupDescription'),\n                            help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithEmail',\n                            label: t('admin.email.allowEmailSignInTitle'),\n                            label_default: 'Enable sign-in with email:',\n                            help_text: t('admin.email.allowEmailSignInDescription'),\n                            help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithUsername',\n                            label: t('admin.email.allowUsernameSignInTitle'),\n                            label_default: 'Enable sign-in with username:',\n                            help_text: t('admin.email.allowUsernameSignInDescription'),\n                            help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',\n                        },\n                    ],\n                },\n            },\n            ldap: {\n                schema: {\n                    id: 'LdapSettings',\n                    name: t('admin.authentication.ldap'),\n                    name_default: 'AD/LDAP',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.Enable',\n                            label: t('admin.ldap.enableTitle'),\n                            label_default: 'Enable sign-in with AD/LDAP:',\n                            help_text: t('admin.ldap.enableDesc'),\n                            help_text_default: 'When true, Mattermost allows login using AD/LDAP',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.EnableSync',\n                            label: t('admin.ldap.enableSyncTitle'),\n                            label_default: 'Enable Synchronization with AD/LDAP:',\n                            help_text: t('admin.ldap.enableSyncDesc'),\n                            help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LdapServer',\n                            label: t('admin.ldap.serverTitle'),\n                            label_default: 'AD/LDAP Server:',\n                            help_text: t('admin.ldap.serverDesc'),\n                            help_text_default: 'The domain or IP address of AD/LDAP server.',\n                            placeholder: t('admin.ldap.serverEx'),\n                            placeholder_default: 'E.g.: \"10.0.0.23\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.LdapPort',\n                            label: t('admin.ldap.portTitle'),\n                            label_default: 'AD/LDAP Port:',\n                            help_text: t('admin.ldap.portDesc'),\n                            help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',\n                            placeholder: t('admin.ldap.portEx'),\n                            placeholder_default: 'E.g.: \"389\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LdapSettings.ConnectionSecurity',\n                            label: t('admin.connectionSecurityTitle'),\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.connectionSecurityNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: t('admin.connectionSecurityTls'),\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                                {\n                                    value: 'STARTTLS',\n                                    display_name: t('admin.connectionSecurityStart'),\n                                    display_name_default: 'STARTTLS',\n                                },\n                            ],\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.SkipCertificateVerification',\n                            label: t('admin.ldap.skipCertificateVerification'),\n                            label_default: 'Skip Certificate Verification:',\n                            help_text: t('admin.ldap.skipCertificateVerificationDesc'),\n                            help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.ConnectionSecurity'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BaseDN',\n                            label: t('admin.ldap.baseTitle'),\n                            label_default: 'BaseDN:',\n                            help_text: t('admin.ldap.baseDesc'),\n                            help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',\n                            placeholder: t('admin.ldap.baseEx'),\n                            placeholder_default: 'E.g.: \"ou=Unit Name,dc=corp,dc=example,dc=com\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindUsername',\n                            label: t('admin.ldap.bindUserTitle'),\n                            label_default: 'Bind Username:',\n                            help_text: t('admin.ldap.bindUserDesc'),\n                            help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindPassword',\n                            label: t('admin.ldap.bindPwdTitle'),\n                            label_default: 'Bind Password:',\n                            help_text: t('admin.ldap.bindPwdDesc'),\n                            help_text_default: 'Password of the user given in \"Bind Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UserFilter',\n                            label: t('admin.ldap.userFilterTitle'),\n                            label_default: 'User Filter:',\n                            help_text: t('admin.ldap.userFilterDisc'),\n                            help_text_default: '(Optional) Enter an AD/LDAP Filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',\n                            placeholder: t('admin.ldap.userFilterEx'),\n                            placeholder_default: 'Ex. \"(objectClass=user)\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.FirstNameAttribute',\n                            label: t('admin.ldap.firstnameAttrTitle'),\n                            label_default: 'First Name Attribute:',\n                            placeholder: t('admin.ldap.firstnameAttrEx'),\n                            placeholder_default: 'E.g.: \"givenName\"',\n                            help_text: t('admin.ldap.firstnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LastNameAttribute',\n                            label: t('admin.ldap.lastnameAttrTitle'),\n                            label_default: 'Last Name Attribute:',\n                            placeholder: t('admin.ldap.lastnameAttrEx'),\n                            placeholder_default: 'E.g.: \"sn\"',\n                            help_text: t('admin.ldap.lastnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.NicknameAttribute',\n                            label: t('admin.ldap.nicknameAttrTitle'),\n                            label_default: 'Nickname Attribute:',\n                            placeholder: t('admin.ldap.nicknameAttrEx'),\n                            placeholder_default: 'E.g.: \"nickname\"',\n                            help_text: t('admin.ldap.nicknameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.PositionAttribute',\n                            label: t('admin.ldap.positionAttrTitle'),\n                            label_default: 'Position Attribute:',\n                            placeholder: t('admin.ldap.positionAttrEx'),\n                            placeholder_default: 'E.g.: \"title\"',\n                            help_text: t('admin.ldap.positionAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.EmailAttribute',\n                            label: t('admin.ldap.emailAttrTitle'),\n                            label_default: 'Email Attribute:',\n                            placeholder: t('admin.ldap.emailAttrEx'),\n                            placeholder_default: 'E.g.: \"mail\" or \"userPrincipalName\"',\n                            help_text: t('admin.ldap.emailAttrDesc'),\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UsernameAttribute',\n                            label: t('admin.ldap.usernameAttrTitle'),\n                            label_default: 'Username Attribute:',\n                            placeholder: t('admin.ldap.usernameAttrEx'),\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: t('admin.ldap.usernameAttrDesc'),\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.IdAttribute',\n                            label: t('admin.ldap.idAttrTitle'),\n                            label_default: 'ID Attribute: ',\n                            placeholder: t('admin.ldap.idAttrEx'),\n                            placeholder_default: 'E.g.: \"objectGUID\"',\n                            help_text: t('admin.ldap.idAttrDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change. If a user\\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.\\n \\nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueEqual('LdapSettings.Enable', false),\n                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginIdAttribute',\n                            label: t('admin.ldap.loginAttrTitle'),\n                            label_default: 'Login ID Attribute: ',\n                            placeholder: t('admin.ldap.loginIdAttrEx'),\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: t('admin.ldap.loginAttrDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the \"Username Attribute\" field above.\\n \\nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginFieldName',\n                            label: t('admin.ldap.loginNameTitle'),\n                            label_default: 'Sign-in Field Default Text:',\n                            placeholder: t('admin.ldap.loginNameEx'),\n                            placeholder_default: 'E.g.: \"AD/LDAP Username\"',\n                            help_text: t('admin.ldap.loginNameDesc'),\n                            help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to \"AD/LDAP Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.SyncIntervalMinutes',\n                            label: t('admin.ldap.syncIntervalTitle'),\n                            label_default: 'Synchronization Interval (minutes):',\n                            help_text: t('admin.ldap.syncIntervalHelpText'),\n                            help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to \"Inactive\" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.MaxPageSize',\n                            label: t('admin.ldap.maxPageSizeTitle'),\n                            label_default: 'Maximum Page Size:',\n                            placeholder: t('admin.ldap.maxPageSizeEx'),\n                            placeholder_default: 'E.g.: \"2000\"',\n                            help_text: t('admin.ldap.maxPageSizeHelpText'),\n                            help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.QueryTimeout',\n                            label: t('admin.ldap.queryTitle'),\n                            label_default: 'Query Timeout (seconds):',\n                            placeholder: t('admin.ldap.queryEx'),\n                            placeholder_default: 'E.g.: \"60\"',\n                            help_text: t('admin.ldap.queryDesc'),\n                            help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: ldapTest,\n                            key: 'LdapSettings.LdapTest',\n                            label: t('admin.ldap.ldap_test_button'),\n                            label_default: 'AD/LDAP Test',\n                            help_text: t('admin.ldap.testHelpText'),\n                            help_text_markdown: true,\n                            help_text_default: 'Tests if the Mattemost server can connect to the AD/LDAP server specified. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                            error_message: t('admin.ldap.testFailure'),\n                            error_message_default: 'AD/LDAP Test Failure: {error}',\n                            success_message: t('admin.ldap.testSuccess'),\n                            success_message_default: 'AD/LDAP Test Successful',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_JOBSTABLE,\n                            job_type: Constants.JobTypes.LDAP_SYNC,\n                            label: t('admin.ldap.sync_button'),\n                            label_default: 'AD/LDAP Synchronize Now',\n                            help_text: t('admin.ldap.syncNowHelpText'),\n                            help_text_markdown: true,\n                            help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            render_job: (job) => {\n                                let mattermostUsers = '0';\n                                let ldapUsers = '0';\n                                let deleteCount = '0';\n                                let updateCount = '0';\n\n                                if (job && job.data) {\n                                    if (job.data.mattermost_users_count && job.data.mattermost_users_count.length > 0) {\n                                        mattermostUsers = job.data.mattermost_users_count;\n                                    }\n\n                                    if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {\n                                        ldapUsers = job.data.ldap_users_count;\n                                    }\n\n                                    if (job.data.delete_count && job.data.delete_count.length > 0) {\n                                        deleteCount = job.data.delete_count;\n                                    }\n\n                                    if (job.data.update_count && job.data.update_count.length > 0) {\n                                        updateCount = job.data.update_count;\n                                    }\n                                }\n\n                                return (\n                                    <FormattedMessage\n                                        id='admin.ldap.jobExtraInfo'\n                                        defaultMessage='Scanned {ldapUsers} LDAP users, updated {updateCount}, deactivated {deleteCount}'\n                                        values={{\n                                            mattermostUsers,\n                                            ldapUsers,\n                                            deleteCount,\n                                            updateCount,\n                                        }}\n                                    />\n                                );\n                            },\n                        },\n                    ],\n                },\n            },\n            saml: {\n                schema: {\n                    id: 'SamlSettings',\n                    name: t('admin.authentication.saml'),\n                    name_default: 'SAML 2.0',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Enable',\n                            label: t('admin.saml.enableTitle'),\n                            label_default: 'Enable Login With SAML 2.0:',\n                            help_text: t('admin.saml.enableDescription'),\n                            help_text_default: 'When true, Mattermost allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for Mattermost.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.EnableSyncWithLdap',\n                            label: t('admin.saml.enableSyncWithLdapTitle'),\n                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                            help_text: t('admin.saml.enableSyncWithLdapDescription'),\n                            help_text_default: 'When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',\n                            help_text_markdown: true,\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',\n                            label: t('admin.saml.enableSyncWithLdapIncludeAuthTitle'),\n                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                            help_text: t('admin.saml.enableSyncWithLdapIncludeAuthDescription'),\n                            help_text_default: 'When true, Mattermost will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\\n \\n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',\n                            help_text_markdown: true,\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.EnableSyncWithLdap'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdpUrl',\n                            label: t('admin.saml.idpUrlTitle'),\n                            label_default: 'SAML SSO URL:',\n                            help_text: t('admin.saml.idpUrlDesc'),\n                            help_text_default: 'The URL where Mattermost sends a SAML request to start login sequence.',\n                            placeholder: t('admin.saml.idpUrlEx'),\n                            placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/SSO/Login\"',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdpDescriptorUrl',\n                            label: t('admin.saml.idpDescriptorUrlTitle'),\n                            label_default: 'Identity Provider Issuer URL:',\n                            help_text: t('admin.saml.idpDescriptorUrlDesc'),\n                            help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',\n                            placeholder: t('admin.saml.idpDescriptorUrlEx'),\n                            placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/issuer\"',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.IdpCertificateFile',\n                            label: t('admin.saml.idpCertificateFileTitle'),\n                            label_default: 'Identity Provider Public Certificate:',\n                            help_text: t('admin.saml.idpCertificateFileDesc'),\n                            help_text_default: 'The public authentication certificate issued by your Identity Provider.',\n                            remove_help_text: t('admin.saml.idpCertificateFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',\n                            remove_button_text: t('admin.saml.remove.idp_certificate'),\n                            remove_button_text_default: 'Remove Identity Provider Certificate',\n                            removing_text: t('admin.saml.removing.certificate'),\n                            removing_text_default: 'Removing Certificate...',\n                            uploading_text: t('admin.saml.uploading.certificate'),\n                            uploading_text_default: 'Uploading Certificate...',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                            fileType: '.crt,.cer,.cert,.pem',\n                            upload_action: uploadIdpSamlCertificate,\n                            remove_action: removeIdpSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Verify',\n                            label: t('admin.saml.verifyTitle'),\n                            label_default: 'Verify Signature:',\n                            help_text: t('admin.saml.verifyDescription'),\n                            help_text_default: 'When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Not recommended for production environments. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.AssertionConsumerServiceURL',\n                            label: t('admin.saml.assertionConsumerServiceURLTitle'),\n                            label_default: 'Service Provider Login URL:',\n                            help_text: t('admin.saml.assertionConsumerServiceURLPopulatedDesc'),\n                            help_text_default: 'This field is also known as the Assertion Consumer Service URL.',\n                            placeholder: t('admin.saml.assertionConsumerServiceURLEx'),\n                            placeholder_default: 'E.g.: \"https://<your-mattermost-url>/login/sso/saml\"',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Verify'),\n                            ),\n                            onConfigLoad: (value, config) => {\n                                const siteUrl = config.ServiceSettings.SiteURL;\n                                if (siteUrl.length > 0 && value.length === 0) {\n                                    const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';\n                                    return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;\n                                }\n                                return value;\n                            },\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Encrypt',\n                            label: t('admin.saml.encryptTitle'),\n                            label_default: 'Enable Encryption:',\n                            help_text: t('admin.saml.encryptDescription'),\n                            help_text_default: 'When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Not recommended for production environments. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.PrivateKeyFile',\n                            label: t('admin.saml.privateKeyFileTitle'),\n                            label_default: 'Service Provider Private Key:',\n                            help_text: t('admin.saml.privateKeyFileFileDesc'),\n                            help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',\n                            remove_help_text: t('admin.saml.privateKeyFileFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',\n                            remove_button_text: t('admin.saml.remove.privKey'),\n                            remove_button_text_default: 'Remove Service Provider Private Key',\n                            removing_text: t('admin.saml.removing.privKey'),\n                            removing_text_default: 'Removing Private Key...',\n                            uploading_text: t('admin.saml.uploading.privateKey'),\n                            uploading_text_default: 'Uploading Private Key...',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),\n                            ),\n                            fileType: '.key',\n                            upload_action: uploadPrivateSamlCertificate,\n                            remove_action: removePrivateSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.PublicCertificateFile',\n                            label: t('admin.saml.publicCertificateFileTitle'),\n                            label_default: 'Service Provider Public Certificate:',\n                            help_text: t('admin.saml.publicCertificateFileDesc'),\n                            help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                            remove_help_text: t('admin.saml.publicCertificateFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                            remove_button_text: t('admin.saml.remove.sp_certificate'),\n                            remove_button_text_default: 'Remove Service Provider Certificate',\n                            removing_text: t('admin.saml.removing.certificate'),\n                            removing_text_default: 'Removing Certificate...',\n                            uploading_text: t('admin.saml.uploading.certificate'),\n                            uploading_text_default: 'Uploading Certificate...',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),\n                            ),\n                            fileType: '.crt,.cer',\n                            upload_action: uploadPublicSamlCertificate,\n                            remove_action: removePublicSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.EmailAttribute',\n                            label: t('admin.saml.emailAttrTitle'),\n                            label_default: 'Email Attribute:',\n                            placeholder: t('admin.saml.emailAttrEx'),\n                            placeholder_default: 'E.g.: \"Email\" or \"PrimaryEmail\"',\n                            help_text: t('admin.saml.emailAttrDesc'),\n                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.UsernameAttribute',\n                            label: t('admin.saml.usernameAttrTitle'),\n                            label_default: 'Username Attribute:',\n                            placeholder: t('admin.saml.usernameAttrEx'),\n                            placeholder_default: 'E.g.: \"Username\"',\n                            help_text: t('admin.saml.usernameAttrDesc'),\n                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdAttribute',\n                            label: t('admin.saml.idAttrTitle'),\n                            label_default: 'Id Attribute:',\n                            placeholder: t('admin.saml.idAttrEx'),\n                            placeholder_default: 'E.g.: \"Id\"',\n                            help_text: t('admin.saml.idAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.FirstNameAttribute',\n                            label: t('admin.saml.firstnameAttrTitle'),\n                            label_default: 'First Name Attribute:',\n                            placeholder: t('admin.saml.firstnameAttrEx'),\n                            placeholder_default: 'E.g.: \"FirstName\"',\n                            help_text: t('admin.saml.firstnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LastNameAttribute',\n                            label: t('admin.saml.lastnameAttrTitle'),\n                            label_default: 'Last Name Attribute:',\n                            placeholder: t('admin.saml.lastnameAttrEx'),\n                            placeholder_default: 'E.g.: \"LastName\"',\n                            help_text: t('admin.saml.lastnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.NicknameAttribute',\n                            label: t('admin.saml.nicknameAttrTitle'),\n                            label_default: 'Nickname Attribute:',\n                            placeholder: t('admin.saml.nicknameAttrEx'),\n                            placeholder_default: 'E.g.: \"Nickname\"',\n                            help_text: t('admin.saml.nicknameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.PositionAttribute',\n                            label: t('admin.saml.positionAttrTitle'),\n                            label_default: 'Position Attribute:',\n                            placeholder: t('admin.saml.positionAttrEx'),\n                            placeholder_default: 'E.g.: \"Role\"',\n                            help_text: t('admin.saml.positionAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LocaleAttribute',\n                            label: t('admin.saml.localeAttrTitle'),\n                            label_default: 'Preferred Language Attribute:',\n                            placeholder: t('admin.saml.localeAttrEx'),\n                            placeholder_default: 'E.g.: \"Locale\" or \"PrimaryLanguage\"',\n                            help_text: t('admin.saml.localeAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LoginButtonText',\n                            label: t('admin.saml.loginButtonTextTitle'),\n                            label_default: 'Login Button Text:',\n                            placeholder: t('admin.saml.loginButtonTextEx'),\n                            placeholder_default: 'E.g.: \"With OKTA\"',\n                            help_text: t('admin.saml.loginButtonTextDesc'),\n                            help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to \"With SAML\".',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                    ],\n                },\n            },\n            mfa: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.mfa.title'),\n                    name_default: 'Multi-factor Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.mfa.bannerDesc'),\n                            label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',\n                            label_markdown: true,\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableMultifactorAuthentication',\n                            label: t('admin.service.mfaTitle'),\n                            label_default: 'Enable Multi-factor Authentication:',\n                            help_text: t('admin.service.mfaDesc'),\n                            help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnforceMultifactorAuthentication',\n                            label: t('admin.service.enforceMfaTitle'),\n                            label_default: 'Enforce Multi-factor Authentication:',\n                            help_text: t('admin.service.enforceMfaDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.EnableMultifactorAuthentication'),\n                        },\n                    ],\n                },\n            },\n        },\n        security: {\n            signup: {\n                schema: {\n                    id: 'SignupSettings',\n                    name: t('admin.security.signup'),\n                    name_default: 'Signup',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.RequireEmailVerification',\n                            label: t('admin.email.requireVerificationTitle'),\n                            label_default: 'Require Email Verification: ',\n                            help_text: t('admin.email.requireVerificationDescription'),\n                            help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',\n                            disabled_help_text: t('admin.security.requireEmailVerification.disabled'),\n                            disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'EmailSettings.InviteSalt',\n                            label: t('admin.email.inviteSaltTitle'),\n                            label_default: 'Email Invite Salt:',\n                            help_text: t('admin.email.inviteSaltDescription'),\n                            help_text_default: '32-character salt added to signing of email invites. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                            disabled_help_text: t('admin.security.inviteSalt.disabled'),\n                            disabled_help_text_default: 'Invite salt cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableOpenServer',\n                            label: t('admin.team.openServerTitle'),\n                            label_default: 'Enable Open Server: ',\n                            help_text: t('admin.team.openServerDescription'),\n                            help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableEmailInvitations',\n                            label: t('admin.team.emailInvitationsTitle'),\n                            label_default: 'Enable Email Invitations: ',\n                            help_text: t('admin.team.emailInvitationsDescription'),\n                            help_text_default: 'When true users can invite others to the system using email.',\n                        },\n                    ],\n                },\n            },\n            public_links: {\n                schema: {\n                    id: 'PublicLinkSettings',\n                    name: t('admin.security.public_links'),\n                    name_default: 'Public Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnablePublicLink',\n                            label: t('admin.image.shareTitle'),\n                            label_default: 'Enable Public File Links: ',\n                            help_text: t('admin.image.shareDescription'),\n                            help_text_default: 'Allow users to share public links to files and images.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'FileSettings.PublicLinkSalt',\n                            label: t('admin.image.publicLinkTitle'),\n                            label_default: 'Public Link Salt:',\n                            help_text: t('admin.image.publicLinkDescription'),\n                            help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                        },\n                    ],\n                },\n            },\n            sessions: {\n                schema: {\n                    id: 'SessionsSettings',\n                    name: t('admin.security.session'),\n                    name_default: 'Sessions',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthWebInDays',\n                            label: t('admin.service.webSessionDays'),\n                            label_default: 'Session Length AD/LDAP and Email (days):',\n                            help_text: t('admin.service.webSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthMobileInDays',\n                            label: t('admin.service.mobileSessionDays'),\n                            label_default: 'Session Length Mobile (days):',\n                            help_text: t('admin.service.mobileSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthSSOInDays',\n                            label: t('admin.service.ssoSessionDays'),\n                            label_default: 'Session Length SSO (days):',\n                            help_text: t('admin.service.ssoSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to Mattermost if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionCacheInMinutes',\n                            label: t('admin.service.sessionCache'),\n                            label_default: 'Session Cache (minutes):',\n                            help_text: t('admin.service.sessionCacheDesc'),\n                            help_text_default: 'The number of minutes to cache a session in memory.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionIdleTimeoutInMinutes',\n                            label: t('admin.service.sessionIdleTimeout'),\n                            label_default: 'Session Idle Timeout (minutes):',\n                            help_text: t('admin.service.sessionIdleTimeoutDesc'),\n                            help_text_default: 'The number of minutes from the last time a user was active on the system to the expiry of the user\\'s session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.\\n \\nApplies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.',\n                            help_text_markdown: true,\n                            placeholder: t('admin.service.sessionIdleTimeoutEx'),\n                            placeholder_default: 'E.g.: \"60\"',\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('Compliance')),\n                            onConfigSave: (value) => {\n                                if (value !== 0 && value < MINIMUM_IDLE_TIMEOUT) {\n                                    return MINIMUM_IDLE_TIMEOUT;\n                                }\n                                return value;\n                            },\n                        },\n                    ],\n                },\n            },\n            connections: {\n                schema: {\n                    id: 'ConnectionSettings',\n                    name: t('admin.security.connection'),\n                    name_default: 'Connections',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowCorsFrom',\n                            label: t('admin.service.corsTitle'),\n                            label_default: 'Enable cross-origin requests from:',\n                            placeholder: t('admin.service.corsEx'),\n                            placeholder_default: 'http://example.com',\n                            help_text: t('admin.service.corsDescription'),\n                            help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use \"*\" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to \"*\" in production.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.CorsExposedHeaders',\n                            label: t('admin.service.corsExposedHeadersTitle'),\n                            label_default: 'CORS Exposed Headers:',\n                            placeholder: t('admin.service.corsHeadersEx'),\n                            placeholder_default: 'X-My-Header',\n                            help_text: t('admin.service.corsExposedHeadersDescription'),\n                            help_text_default: 'Whitelist of headers that will be accessible to the requester.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.CorsAllowCredentials',\n                            label: t('admin.service.corsAllowCredentialsLabel'),\n                            label_default: 'CORS Allow Credentials:',\n                            help_text: t('admin.service.corsAllowCredentialsDescription'),\n                            help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.CorsDebug',\n                            label: t('admin.service.CorsDebugLabel'),\n                            label_default: 'CORS Debug:',\n                            help_text: t('admin.service.corsDebugDescription'),\n                            help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair \"source\":\"cors\".',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableInsecureOutgoingConnections',\n                            label: t('admin.service.insecureTlsTitle'),\n                            label_default: 'Enable Insecure Outgoing Connections: ',\n                            help_text: t('admin.service.insecureTlsDesc'),\n                            help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',\n                        },\n                    ],\n                },\n            },\n            clientVersions: {\n                schema: {\n                    id: 'ClientVersionsSettings',\n                    name: t('admin.security.client_versions'),\n                    name_default: 'Client Versions',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.AndroidLatestVersion',\n                            label: t('admin.client_versions.androidLatestVersion'),\n                            label_default: 'Latest Android Version',\n                            help_text: t('admin.client_versions.androidLatestVersionHelp'),\n                            help_text_default: 'The latest released Android version',\n                            placeholder: t('admin.client_versions.androidLatestVersion'),\n                            placeholder_default: 'Latest Android Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.AndroidMinVersion',\n                            label: t('admin.client_versions.androidMinVersion'),\n                            label_default: 'Minimum Android Version',\n                            help_text: t('admin.client_versions.androidMinVersionHelp'),\n                            help_text_default: 'The minimum compliant Android version',\n                            placeholder: t('admin.client_versions.androidMinVersion'),\n                            placeholder_default: 'Minimum Android Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.DesktopLatestVersion',\n                            label: t('admin.client_versions.desktopLatestVersion'),\n                            label_default: 'Latest Desktop Version',\n                            help_text: t('admin.client_versions.desktopLatestVersionHelp'),\n                            help_text_default: 'The latest released Desktop version',\n                            placeholder: t('admin.client_versions.desktopLatestVersion'),\n                            placeholder_default: 'Latest Desktop Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.DesktopMinVersion',\n                            label: t('admin.client_versions.desktopMinVersion'),\n                            label_default: 'Minimum Desktop Version',\n                            help_text: t('admin.client_versions.desktopMinVersionHelp'),\n                            help_text_default: 'The minimum compliant Desktop version',\n                            placeholder: t('admin.client_versions.desktopMinVersion'),\n                            placeholder_default: 'Minimum Desktop Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.IosLatestVersion',\n                            label: t('admin.client_versions.iosLatestVersion'),\n                            label_default: 'Latest iOS Version',\n                            help_text: t('admin.client_versions.iosLatestVersionHelp'),\n                            help_text_default: 'The latest released iOS version',\n                            placeholder: t('admin.client_versions.iosLatestVersion'),\n                            placeholder_default: 'Latest iOS Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.IosMinVersion',\n                            label: t('admin.client_versions.iosMinVersion'),\n                            label_default: 'Minimum iOS Version',\n                            help_text: t('admin.client_versions.iosMinVersionHelp'),\n                            help_text_default: 'The minimum compliant iOS version',\n                            placeholder: t('admin.client_versions.iosMinVersion'),\n                            placeholder_default: 'Minimum iOS Version',\n                        },\n                    ],\n                },\n            },\n        },\n        notifications: {\n        },\n        integrations: {\n            custom_integrations: {\n                schema: {\n                    id: 'CustomIntegrationSettings',\n                    name: t('admin.integrations.custom'),\n                    name_default: 'Custom Integrations',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableIncomingWebhooks',\n                            label: t('admin.service.webhooksTitle'),\n                            label_default: 'Enable Incoming Webhooks: ',\n                            help_text: t('admin.service.webhooksDescription'),\n                            help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableOutgoingWebhooks',\n                            label: t('admin.service.outWebhooksTitle'),\n                            label_default: 'Enable Outgoing Webhooks: ',\n                            help_text: t('admin.service.outWebhooksDesc'),\n                            help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableCommands',\n                            label: t('admin.service.cmdsTitle'),\n                            label_default: 'Enable Custom Slash Commands: ',\n                            help_text: t('admin.service.cmdsDesc'),\n                            help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableOAuthServiceProvider',\n                            label: t('admin.oauth.providerTitle'),\n                            label_default: 'Enable OAuth 2.0 Service Provider: ',\n                            help_text: t('admin.oauth.providerDescription'),\n                            help_text_default: 'When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'ServiceSettings.EnableOnlyAdminIntegrations',\n                            label: t('admin.service.integrationAdmin'),\n                            label_default: 'Restrict managing integrations to Admins:',\n                            help_text: t('admin.service.integrationAdminDesc'),\n                            help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',\n                            permissions_mapping_name: 'enableOnlyAdminIntegrations',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnablePostUsernameOverride',\n                            label: t('admin.service.overrideTitle'),\n                            label_default: 'Enable integrations to override usernames:',\n                            help_text: t('admin.service.overrideDescription'),\n                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnablePostIconOverride',\n                            label: t('admin.service.iconTitle'),\n                            label_default: 'Enable integrations to override profile picture icons:',\n                            help_text: t('admin.service.iconDescription'),\n                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableUserAccessTokens',\n                            label: t('admin.service.userAccessTokensTitle'),\n                            label_default: 'Enable User Access Tokens: ',\n                            help_text: t('admin.service.userAccessTokensDescription'),\n                            help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\\n\\n To manage who can create personal access tokens or to search users by token ID, go to the **System Console > Users** page.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            external: {\n                schema: {\n                    id: 'ExternalServiceSettings',\n                    name: t('admin.integrations.external'),\n                    name_default: 'External Services',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GoogleDeveloperKey',\n                            label: t('admin.service.googleTitle'),\n                            label_default: 'Google API Key:',\n                            placeholder: t('admin.service.googleExample'),\n                            placeholder_default: 'E.g.: \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV\"',\n                            help_text: t('admin.service.googleDescription'),\n                            help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n        },\n        plugins: {\n            configuration: {\n                schema: {\n                    id: 'PluginSettings',\n                    name: t('admin.plugins.settings.title'),\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PluginSettings.Enable',\n                            label: t('admin.plugins.settings.enable'),\n                            label_default: 'Enable Plugins: ',\n                            help_text: t('admin.plugins.settings.enableDesc'),\n                            help_text_default: 'When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality or customize the user interface of your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugins) to learn more.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            management: {\n                schema: {\n                    id: 'PluginManagementSettings',\n                    component: PluginManagement,\n                },\n            },\n            custom: {\n                schema: {\n                    id: 'CustomPluginSettings',\n                    component: CustomPluginSettings,\n                },\n            },\n        },\n        files: {\n            storage: {\n                schema: {\n                    id: 'FileSettings',\n                    name: t('admin.files.storage'),\n                    name_default: 'Storage',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'FileSettings.DriverName',\n                            label: t('admin.image.storeTitle'),\n                            label_default: 'File Storage System:',\n                            help_text: t('admin.image.storeDescription'),\n                            help_text_default: 'Storage system where files and image attachments are saved.\\n \\nSelecting \"Amazon S3\" enables fields to enter your Amazon credentials and bucket details.\\n \\nSelecting \"Local File System\" enables the field to specify a local file directory.',\n                            help_text_markdown: true,\n                            options: [\n                                {\n                                    value: FILE_STORAGE_DRIVER_LOCAL,\n                                    display_name: t('admin.image.storeLocal'),\n                                    display_name_default: 'Local File System',\n                                },\n                                {\n                                    value: FILE_STORAGE_DRIVER_S3,\n                                    display_name: t('admin.image.storeAmazonS3'),\n                                    display_name_default: 'Amazon S3',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.Directory',\n                            label: t('admin.image.localTitle'),\n                            label_default: 'Local Storage Directory:',\n                            help_text: t('admin.image.localDescription'),\n                            help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',\n                            placeholder: t('admin.image.localExample'),\n                            placeholder_default: 'E.g.: \"./data/\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Bucket',\n                            label: t('admin.image.amazonS3BucketTitle'),\n                            label_default: 'Amazon S3 Bucket:',\n                            help_text: t('admin.image.amazonS3BucketDescription'),\n                            help_text_default: 'Name you selected for your S3 bucket in AWS.',\n                            placeholder: t('admin.image.amazonS3BucketExample'),\n                            placeholder_default: 'E.g.: \"mattermost-media\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Region',\n                            label: t('admin.image.amazonS3RegionTitle'),\n                            label_default: 'Amazon S3 Region:',\n                            help_text: t('admin.image.amazonS3RegionDescription'),\n                            help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to \"us-east-1\" if none found.',\n                            placeholder: t('admin.image.amazonS3RegionExample'),\n                            placeholder_default: 'E.g.: \"us-east-1\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3AccessKeyId',\n                            label: t('admin.image.amazonS3IdTitle'),\n                            label_default: 'Amazon S3 Access Key ID:',\n                            help_text: t('admin.image.amazonS3IdDescription'),\n                            help_text_markdown: true,\n                            help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',\n                            placeholder: t('admin.image.amazonS3IdExample'),\n                            placeholder_default: 'E.g.: \"AKIADTOVBGERKLCBV\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Endpoint',\n                            label: t('admin.image.amazonS3EndpointTitle'),\n                            label_default: 'Amazon S3 Endpoint:',\n                            help_text: t('admin.image.amazonS3EndpointDescription'),\n                            help_text_default: 'Hostname of your S3 Compatible Storage provider. Defaults to \"s3.amazonaws.com\".',\n                            placeholder: t('admin.image.amazonS3EndpointExample'),\n                            placeholder_default: 'E.g.: \"s3.amazonaws.com\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3SecretAccessKey',\n                            label: t('admin.image.amazonS3SecretTitle'),\n                            label_default: 'Amazon S3 Secret Access Key:',\n                            help_text: t('admin.image.amazonS3SecretDescription'),\n                            help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',\n                            placeholder: t('admin.image.amazonS3SecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSL',\n                            label: t('admin.image.amazonS3SSLTitle'),\n                            label_default: 'Enable Secure Amazon S3 Connections:',\n                            help_text: t('admin.image.amazonS3SSLDescription'),\n                            help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSE',\n                            label: t('admin.image.amazonS3SSETitle'),\n                            label_default: 'Enable Server-Side Encryption for Amazon S3:',\n                            help_text: t('admin.image.amazonS3SSEDescription'),\n                            help_text_markdown: true,\n                            help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3Trace',\n                            label: t('admin.image.amazonS3TraceTitle'),\n                            label_default: 'Enable Amazon S3 Debugging:',\n                            help_text: t('admin.image.amazonS3TraceDescription'),\n                            help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: testS3Connection,\n                            key: 'TestS3Connection',\n                            label: t('admin.s3.connectionS3Test'),\n                            label_default: 'Test Connection',\n                            loading: t('admin.s3.testing'),\n                            loading_default: 'Testing...',\n                            error_message: t('admin.s3.s3Fail'),\n                            error_message_default: 'Connection unsuccessful: {error}',\n                            success_message: t('admin.s3.s3Success'),\n                            success_message_default: 'Connection was successful',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableFileAttachments',\n                            label: t('admin.file.enableFileAttachments'),\n                            label_default: 'Allow File Sharing:',\n                            help_text: t('admin.file.enableFileAttachmentsDesc'),\n                            help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileUpload',\n                            label: t('admin.file.enableMobileUploadTitle'),\n                            label_default: 'Allow File Uploads on Mobile:',\n                            help_text: t('admin.file.enableMobileUploadDesc'),\n                            help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileDownload',\n                            label: t('admin.file.enableMobileDownloadTitle'),\n                            label_default: 'Allow File Downloads on Mobile:',\n                            help_text: t('admin.file.enableMobileDownloadDesc'),\n                            help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'FileSettings.MaxFileSize',\n                            label: t('admin.image.maxFileSizeTitle'),\n                            label_default: 'Maximum File Size:',\n                            help_text: t('admin.image.maxFileSizeDescription'),\n                            help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',\n                            placeholder: t('admin.image.maxFileSizeExample'),\n                            placeholder_default: '50',\n                            onConfigLoad: (configVal) => configVal / MEBIBYTE,\n                            onConfigSave: (displayVal) => displayVal * MEBIBYTE,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ImageProxyType',\n                            label: t('admin.image.proxyType'),\n                            label_default: 'Image Proxy Type:',\n                            help_text: t('admin.image.proxyTypeDescription'),\n                            help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',\n                            help_text_markdown: true,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.image.proxyTypeNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'atmos/camo',\n                                    display_name: t('atmos/camo'),\n                                    display_name_default: 'atmos/camo',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyURL',\n                            label: t('admin.image.proxyURL'),\n                            label_default: 'Image Proxy URL:',\n                            help_text: t('admin.image.proxyURLDescription'),\n                            help_text_default: 'URL of your image proxy server.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyOptions',\n                            label: t('admin.image.proxyOptions'),\n                            label_default: 'Image Proxy Options:',\n                            help_text: t('admin.image.proxyOptionsDescription'),\n                            help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                    ],\n                },\n            },\n        },\n        customization: {\n            customBrand: {\n                schema: {\n                    id: 'CustomBrandSettings',\n                    name: t('admin.customization.customBrand'),\n                    name_default: 'Custom Branding',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.SiteName',\n                            label: t('admin.team.siteNameTitle'),\n                            label_default: 'Site Name:',\n                            help_text: t('admin.team.siteNameDescription'),\n                            help_text_default: 'Name of service shown in login screens and UI.',\n                            placeholder: t('admin.team.siteNameExample'),\n                            placeholder_default: 'E.g.: \"Mattermost\"',\n                            max_length: Constants.MAX_SITENAME_LENGTH,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.CustomDescriptionText',\n                            label: t('admin.team.brandDescriptionTitle'),\n                            label_default: 'Site Description: ',\n                            help_text: t('admin.team.brandDescriptionHelp'),\n                            help_text_default: 'Description of service shown in login screens and UI. When not specified, \"All team communication in one place, searchable and accessible anywhere\" is displayed.',\n                            placeholder: t('web.root.signup_info'),\n                            placeholder_default: 'All team communication in one place, searchable and accessible anywhere',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableCustomBrand',\n                            label: t('admin.team.brandTitle'),\n                            label_default: 'Enable Custom Branding: ',\n                            help_text: t('admin.team.brandDesc'),\n                            help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_CUSTOM,\n                            component: BrandImageSetting,\n                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),\n                            key: 'CustomBrandImage',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                            key: 'TeamSettings.CustomBrandText',\n                            label: t('admin.team.brandTextTitle'),\n                            label_default: 'Custom Brand Text:',\n                            help_text: t('admin.team.brandTextDescription'),\n                            help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',\n                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),\n                            max_length: Constants.MAX_CUSTOM_BRAND_TEXT_LENGTH,\n                        },\n                    ],\n                },\n            },\n            emoji: {\n                schema: {\n                    id: 'EmojiSettings',\n                    name: t('admin.customization.emoji'),\n                    name_default: 'Emoji',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableEmojiPicker',\n                            label: t('admin.customization.enableEmojiPickerTitle'),\n                            label_default: 'Enable Emoji Picker:',\n                            help_text: t('admin.customization.enableEmojiPickerDesc'),\n                            help_text_default: 'The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableCustomEmoji',\n                            label: t('admin.customization.enableCustomEmojiTitle'),\n                            label_default: 'Enable Custom Emoji:',\n                            help_text: t('admin.customization.enableCustomEmojiDesc'),\n                            help_text_default: 'Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting \"Custom Emoji\".',\n                        },\n                    ],\n                },\n            },\n            gif: {\n                schema: {\n                    id: 'EmojiSettings',\n                    name: t('admin.customization.gif'),\n                    name_default: 'GIF (Beta)',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableGifPicker',\n                            label: t('admin.customization.enableGifPickerTitle'),\n                            label_default: 'Enable GIF Picker:',\n                            help_text: t('admin.customization.enableGifPickerDesc'),\n                            help_text_default: 'Allow users to select GIFs from the emoji picker via a Gfycat integration.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GfycatApiKey',\n                            label: t('admin.customization.gfycatApiKey'),\n                            label_default: 'Gfycat API Key:',\n                            help_text: t('admin.customization.gfycatApiKeyDescription'),\n                            help_text_default: 'Request an API key at [https://developers.gfycat.com/signup/#](!https://developers.gfycat.com/signup/#). Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GfycatApiSecret',\n                            label: t('admin.customization.gfycatApiSecret'),\n                            label_default: 'Gfycat API Secret:',\n                            help_text: t('admin.customization.gfycatApiSecretDescription'),\n                            help_text_default: 'The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.',\n                        },\n                    ],\n                },\n            },\n            announcement: {\n                schema: {\n                    id: 'AnnouncementSettings',\n                    name: t('admin.customization.announcement'),\n                    name_default: 'Announcement Banner',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.EnableBanner',\n                            label: t('admin.customization.announcement.enableBannerTitle'),\n                            label_default: 'Enable Announcement Banner:',\n                            help_text: t('admin.customization.announcement.enableBannerDesc'),\n                            help_text_default: 'Enable an announcement banner across all teams.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'AnnouncementSettings.BannerText',\n                            label: t('admin.customization.announcement.bannerTextTitle'),\n                            label_default: 'Banner Text:',\n                            help_text: t('admin.customization.announcement.bannerTextDesc'),\n                            help_text_default: 'Text that will appear in the announcement banner.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerColor',\n                            label: t('admin.customization.announcement.bannerColorTitle'),\n                            label_default: 'Banner Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerTextColor',\n                            label: t('admin.customization.announcement.bannerTextColorTitle'),\n                            label_default: 'Banner Text Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.AllowBannerDismissal',\n                            label: t('admin.customization.announcement.allowBannerDismissalTitle'),\n                            label_default: 'Allow Banner Dismissal:',\n                            help_text: t('admin.customization.announcement.allowBannerDismissalDesc'),\n                            help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                    ],\n                },\n            },\n            posts: {\n                schema: {\n                    id: 'PostSettings',\n                    name: t('admin.customization.posts'),\n                    name_default: 'Posts',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableLinkPreviews',\n                            label: t('admin.customization.enableLinkPreviewsTitle'),\n                            label_default: 'Enable Link Previews:',\n                            help_text: t('admin.customization.enableLinkPreviewsDesc'),\n                            help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews. This setting only applies to websites with OpenGraph metadata and not for image links or YouTube previews.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_CUSTOM,\n                            component: CustomUrlSchemesSetting,\n                            key: 'DisplaySettings.CustomUrlSchemes',\n                        },\n                    ],\n                },\n            },\n            legal_and_support: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: t('admin.customization.support'),\n                    name_default: 'Legal and Support',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.TermsOfServiceLink',\n                            label: t('admin.support.termsTitle'),\n                            label_default: 'Terms of Service link:',\n                            help_text: t('admin.support.termsDesc'),\n                            help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the \"Mattermost Conditions of Use (End Users)\" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.PrivacyPolicyLink',\n                            label: t('admin.support.privacyTitle'),\n                            label_default: 'Privacy Policy link:',\n                            help_text: t('admin.support.privacyDesc'),\n                            help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.AboutLink',\n                            label: t('admin.support.aboutTitle'),\n                            label_default: 'About link:',\n                            help_text: t('admin.support.aboutDesc'),\n                            help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.HelpLink',\n                            label: t('admin.support.helpTitle'),\n                            label_default: 'Help link:',\n                            help_text: t('admin.support.helpDesc'),\n                            help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.ReportAProblemLink',\n                            label: t('admin.support.problemTitle'),\n                            label_default: 'Report a Problem link:',\n                            help_text: t('admin.support.problemDesc'),\n                            help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.SupportEmail',\n                            label: t('admin.support.emailTitle'),\n                            label_default: 'Support Email:',\n                            help_text: t('admin.support.emailHelp'),\n                            help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SupportSettings.CustomTermsOfServiceEnabled',\n                            label: 'admin.support.enableTermsOfServiceTitle',\n                            label_default: 'Enable Custom Terms of Service (Beta)',\n                            help_text: 'admin.support.termsOfServiceHelp',\n                            help_text_default: 'When true, new users must accept the terms of service before accessing any Mattermost teams on desktop, web or mobile. Existing users must accept them after login or a page refresh.\\n \\nUsers on mobile do not have to accept the terms of service with mobile support scheduled for an upcoming release.',\n                            help_text_markdown: true,\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('CustomTermsOfService')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                            key: 'SupportSettings.CustomTermsOfServiceText',\n                            label: 'admin.support.termsOfServiceTextTitle',\n                            label_default: 'Custom Terms of Service Text (Beta)',\n                            isDisabled: needsUtils.stateValueFalse('SupportSettings.CustomTermsOfServiceEnabled'),\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('CustomTermsOfService')),\n                            help_text: 'admin.support.termsOfServiceTextHelp',\n                            help_text_default: 'Text that will appear in your custom Terms of Service. Supports Markdown-formatted text.',\n                        },\n                    ],\n                },\n            },\n            native_app_links: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: t('admin.customization.nativeAppLinks'),\n                    name_default: 'Mattermost App Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AppDownloadLink',\n                            label: t('admin.customization.appDownloadLinkTitle'),\n                            label_default: 'Mattermost Apps Download Page Link:',\n                            help_text: t('admin.customization.appDownloadLinkDesc'),\n                            help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to \"Download Mattermost Apps\" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AndroidAppDownloadLink',\n                            label: t('admin.customization.androidAppDownloadLinkTitle'),\n                            label_default: 'Android App Download Link:',\n                            help_text: t('admin.customization.androidAppDownloadLinkDesc'),\n                            help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.IosAppDownloadLink',\n                            label: t('admin.customization.iosAppDownloadLinkTitle'),\n                            label_default: 'iOS App Download Link:',\n                            help_text: t('admin.customization.iosAppDownloadLinkDesc'),\n                            help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                    ],\n                },\n            },\n        },\n        compliance: {\n        },\n        advanced: {\n            rate: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.rate.title'),\n                    name_default: 'Rate Limit Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.rate.noteDescription'),\n                            label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.Enable',\n                            label: t('admin.rate.enableLimiterTitle'),\n                            label_default: 'Enable Rate Limiting:',\n                            help_text: t('admin.rate.enableLimiterDescription'),\n                            help_text_default: 'When true, APIs are throttled at rates specified below.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.PerSec',\n                            label: t('admin.rate.queriesTitle'),\n                            label_default: 'Maximum Queries per Second:',\n                            placeholder: t('admin.rate.queriesExample'),\n                            placeholder_default: 'E.g.: \"10\"',\n                            help_text: t('admin.rate.queriesDescription'),\n                            help_text_default: 'Throttles API at this number of requests per second.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MaxBurst',\n                            label: t('admin.rate.maxBurst'),\n                            label_default: 'Maximum Burst Size:',\n                            placeholder: t('admin.rate.maxBurstExample'),\n                            placeholder_default: 'E.g.: \"100\"',\n                            help_text: t('admin.rate.maxBurstDescription'),\n                            help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MemoryStoreSize',\n                            label: t('admin.rate.memoryTitle'),\n                            label_default: 'Memory Store Size:',\n                            placeholder: t('admin.rate.memoryExample'),\n                            placeholder_default: 'E.g.: \"10000\"',\n                            help_text: t('admin.rate.memoryDescription'),\n                            help_text_default: 'Maximum number of users sessions connected to the system as determined by \"Vary rate limit by remote address\" and \"Vary rate limit by HTTP header\".',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByRemoteAddr',\n                            label: t('admin.rate.remoteTitle'),\n                            label_default: 'Vary rate limit by remote address:',\n                            help_text: t('admin.rate.remoteDescription'),\n                            help_text_default: 'When true, rate limit API access by IP address.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByUser',\n                            label: t('admin.rate.varyByUser'),\n                            label_default: 'Vary rate limit by user:',\n                            help_text: t('admin.rate.varyByUserDescription'),\n                            help_text_default: 'When true, rate limit API access by user athentication token.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'RateLimitSettings.VaryByHeader',\n                            label: t('admin.rate.httpHeaderTitle'),\n                            label_default: 'Vary rate limit by HTTP header:',\n                            placeholder: t('admin.rate.httpHeaderExample'),\n                            placeholder_default: 'E.g.: \"X-Real-IP\", \"X-Forwarded-For\"',\n                            help_text: t('admin.rate.httpHeaderDescription'),\n                            help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                                needsUtils.stateValueEqual('RateLimitSettings.VaryByRemoteAddr', true),\n                            ),\n                        },\n                    ],\n                },\n            },\n            developer: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.developer.title'),\n                    name_default: 'Developer Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableTesting',\n                            label: t('admin.service.testingTitle'),\n                            label_default: 'Enable Testing Commands:',\n                            help_text: t('admin.service.testingDescription'),\n                            help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableDeveloper',\n                            label: t('admin.service.developerTitle'),\n                            label_default: 'Enable Developer Mode: ',\n                            help_text: t('admin.service.developerDesc'),\n                            help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowedUntrustedInternalConnections',\n                            label: t('admin.service.internalConnectionsTitle'),\n                            label_default: 'Allow untrusted internal connections to: ',\n                            placeholder: t('admin.service.internalConnectionsEx'),\n                            placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',\n                            help_text: t('admin.service.internalConnectionsDesc'),\n                            help_text_default: 'In testing environments, such as when developing integrations locally on a development machine, use this setting to specify domains, IP addresses, or CIDR notations to allow internal connections. Separate two or more domains with spaces. **Not recommended for use in production**, since this can allow a user to extract confidential data from your server or internal network.\\n \\nBy default, user-supplied URLs such as those used for Open Graph metadata, webhooks, or slash commands will not be allowed to connect to reserved IP addresses including loopback or link-local addresses used for internal networks. Push notification and OAuth 2.0 server URLs are trusted and not affected by this setting.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            metrics: {\n                schema: {\n                    id: 'MetricsSettings',\n                    name: t('admin.advance.metrics'),\n                    name_default: 'Performance Monitoring',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'MetricsSettings.Enable',\n                            label: t('admin.metrics.enableTitle'),\n                            label_default: 'Enable Performance Monitoring:',\n                            help_text: t('admin.metrics.enableDescription'),\n                            help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for Mattermost.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'MetricsSettings.ListenAddress',\n                            label: t('admin.metrics.listenAddressTitle'),\n                            label_default: 'Listen Address:',\n                            placeholder: t('admin.metrics.listenAddressEx'),\n                            placeholder_default: 'E.g.: \":8067\"',\n                            help_text: t('admin.metrics.listenAddressDesc'),\n                            help_text_default: 'The address the server will listen on to expose performance metrics.',\n                        },\n                    ],\n                },\n            },\n        },\n    },\n    other: {\n        license: {\n            schema: {\n                id: 'LicenseSettings',\n                component: LicenseSettings,\n            },\n        },\n        audits: {\n            schema: {\n                id: 'Audits',\n                component: Audits,\n            },\n        },\n    },\n};\n\nt('admin.field_names.allowBannerDismissal');\nt('admin.field_names.bannerColor');\nt('admin.field_names.bannerText');\nt('admin.field_names.bannerTextColor');\nt('admin.field_names.enableBanner');\nt('admin.field_names.enableCommands');\nt('admin.field_names.enableConfirmNotificationsToChannel');\nt('admin.field_names.enableIncomingWebhooks');\nt('admin.field_names.enableOAuthServiceProvider');\nt('admin.field_names.enableOutgoingWebhooks');\nt('admin.field_names.enablePostIconOverride');\nt('admin.field_names.enablePostUsernameOverride');\nt('admin.field_names.enableUserAccessTokens');\nt('admin.field_names.enableUserCreation');\nt('admin.field_names.maxChannelsPerTeam');\nt('admin.field_names.maxNotificationsPerChannel');\nt('admin.field_names.maxUsersPerTeam');\nt('admin.field_names.postEditTimeLimit');\nt('admin.field_names.restrictCreationToDomains');\nt('admin.field_names.restrictDirectMessage');\nt('admin.field_names.teammateNameDisplay');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport 'bootstrap';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport ClusterSettings from 'components/admin_console/cluster_settings.jsx';\nimport DataRetentionSettings from 'components/admin_console/data_retention_settings.jsx';\nimport DatabaseSettings from 'components/admin_console/database_settings.jsx';\nimport ElasticsearchSettings from 'components/admin_console/elasticsearch_settings.jsx';\nimport EmailSettings from 'components/admin_console/email_settings.jsx';\nimport MessageExportSettings from 'components/admin_console/message_export_settings';\nimport PasswordSettings from 'components/admin_console/password_settings.jsx';\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings';\nimport PushSettings from 'components/admin_console/push_settings.jsx';\nimport DiscardChangesModal from 'components/discard_changes_modal.jsx';\n\nimport AdminSidebar from './admin_sidebar';\nimport AdminDefinition from './admin_definition';\n\nconst SCRoute = ({component: Component, extraProps, ...rest}) => ( //eslint-disable-line react/prop-types\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\nexport default class AdminConsole extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        environmentConfig: PropTypes.object,\n        license: PropTypes.object.isRequired,\n        roles: PropTypes.object.isRequired,\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n        showNavigationPrompt: PropTypes.bool.isRequired,\n        isCurrentUserSystemAdmin: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getConfig: PropTypes.func.isRequired,\n            getEnvironmentConfig: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n            confirmNavigation: PropTypes.func.isRequired,\n            cancelNavigation: PropTypes.func.isRequired,\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n        this.props.actions.getEnvironmentConfig();\n        this.props.actions.loadRolesIfNeeded(['channel_user', 'team_user', 'system_user', 'channel_admin', 'team_admin', 'system_admin']);\n        reloadIfServerVersionChanged();\n    }\n\n    mainRolesLoaded(roles) {\n        return (\n            roles &&\n            roles.channel_admin &&\n            roles.channel_user &&\n            roles.team_admin &&\n            roles.team_user &&\n            roles.system_admin &&\n            roles.system_user\n        );\n    }\n\n    render() {\n        const {\n            license,\n            config,\n            environmentConfig,\n            showNavigationPrompt,\n        } = this.props;\n        const {setNavigationBlocked, cancelNavigation, confirmNavigation} = this.props.actions;\n\n        if (!this.props.isCurrentUserSystemAdmin) {\n            return (\n                <Redirect to='/'/>\n            );\n        }\n\n        if (!this.mainRolesLoaded(this.props.roles)) {\n            return null;\n        }\n\n        if (Object.keys(config).length === 0) {\n            return <div/>;\n        }\n        if (config && Object.keys(config).length === 0 && config.constructor === 'Object') {\n            return (\n                <div className='admin-console__wrapper'>\n                    <AnnouncementBar/>\n                    <div className='admin-console'/>\n                </div>\n            );\n        }\n\n        const discardChangesModal = (\n            <DiscardChangesModal\n                show={showNavigationPrompt}\n                onConfirm={confirmNavigation}\n                onCancel={cancelNavigation}\n            />\n        );\n\n        // not every page in the system console will need the license and config, but the vast majority will\n        const extraProps = {\n            license,\n            config,\n            environmentConfig,\n            setNavigationBlocked,\n        };\n\n        return (\n            <div className='admin-console__wrapper'>\n                <AnnouncementBar/>\n                <SystemNotice/>\n                <AdminSidebar/>\n                <div className='admin-console'>\n                    <Switch>\n                        <SCRoute\n                            path={`${this.props.match.url}/system_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_analytics.schema,\n                            }}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/general`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/localization`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.localization.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/users_and_teams`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            roles: this.props.roles,\n                                            editRole: this.props.actions.editRole,\n                                            schema: AdminDefinition.settings.general.users_and_teams.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/privacy`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.privacy.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/compliance`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.compliance.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/logging`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.logging.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/permissions`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/schemes`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.schemes.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/system-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.systemScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme/:scheme_id`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/authentication`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/authentication_email`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.email.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gitlab`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.gitlab.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/oauth`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.oauth.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/ldap`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.ldap.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/saml`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.saml.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/mfa`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.mfa.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/authentication_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/security`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/sign_up`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.signup.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/password`}\n                                        component={PasswordSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/public_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.public_links.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/sessions`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.sessions.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/connections`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.connections.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/client_versions`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.clientVersions.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/sign_up`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/notifications`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/notifications_email`}\n                                        component={EmailSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/push`}\n                                        component={PushSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/notifications_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/integrations`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            roles: this.props.roles,\n                                            editRole: this.props.actions.editRole,\n                                            schema: AdminDefinition.settings.integrations.custom_integrations.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/external`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.integrations.external.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/plugins`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/management`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.management.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/custom/:plugin_id`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.custom.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/files`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/storage`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.files.storage.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/storage`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/customization`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom_brand`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.customBrand.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/announcement`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.announcement.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/emoji`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.emoji.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gif`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.gif.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/posts`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.posts.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/legal_and_support`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.legal_and_support.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/native_app_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.native_app_links.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom_brand`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/compliance`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/data_retention`}\n                                        component={DataRetentionSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/message_export`}\n                                        component={MessageExportSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/data_retention`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/advanced`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/rate`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.rate.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/database`}\n                                        component={DatabaseSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/elasticsearch`}\n                                        component={ElasticsearchSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/developer`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.developer.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/cluster`}\n                                        component={ClusterSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/metrics`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.metrics.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/rate`}/>\n                                </Switch>\n                            )}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/users`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_users.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/team_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.team_analytics.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/license`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.license.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/audits`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.audits.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/logs`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.server_logs.schema,\n                            }}\n                        />\n                        <Redirect to={`${this.props.match.url}/system_analytics`}/>\n                    </Switch>\n                </div>\n                {discardChangesModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig, getEnvironmentConfig} from 'mattermost-redux/actions/admin';\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {withRouter} from 'react-router-dom';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\n\nimport AdminConsole from './admin_console.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n        environmentConfig: Selectors.getEnvironmentConfig(state),\n        license: getLicense(state),\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n        isCurrentUserSystemAdmin: isCurrentUserSystemAdmin(state),\n        roles: getRoles(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getConfig,\n            getEnvironmentConfig,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n            loadRolesIfNeeded,\n            editRole,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminConsole));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Permissions} from 'mattermost-redux/constants/index';\n\nconst MAPPING = {\n    enableTeamCreation: {\n        true: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: true}],\n        false: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: false}],\n    },\n\n    editOthersPosts: {\n        true: [\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n        false: [\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n        ],\n    },\n\n    enableOnlyAdminIntegrations: {\n        true: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: false},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: false},\n        ],\n        false: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: true},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: true},\n        ],\n    },\n};\n\n/**\n * Get the roles that were changed (but unsaved) for given mapping key/values.\n *\n * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {object} the updated roles (only) in the same structure as returned by mattermost-redux `getRoles`.\n */\nexport function rolesFromMapping(mappingValues, roles) {\n    const rolesClone = JSON.parse(JSON.stringify(roles));\n\n    // Purge roles that aren't present in MAPPING, we don't care about them.\n    purgeNonPertinentRoles(rolesClone);\n\n    Object.keys(MAPPING).forEach((mappingKey) => {\n        const value = mappingValues[mappingKey];\n        if (value) {\n            mutateRolesBasedOnMapping(mappingKey, value, rolesClone);\n        }\n    });\n\n    // Purge roles that didn't have permissions changes, we don't care about them.\n    Object.entries(rolesClone).forEach(([roleName, roleClone]) => {\n        const originalPermissionSet = new Set(roles[roleName].permissions);\n        const newPermissionSet = new Set(roleClone.permissions);\n        const difference = [...newPermissionSet].filter((x) => !originalPermissionSet.has(x));\n\n        if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {\n            delete rolesClone[roleName];\n        }\n    });\n\n    return rolesClone;\n}\n\n/**\n * Get the mapping value that matches for a given set of roles.\n *\n * @param {string} key to match under in the mapping.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {string} the value that the roles/permissions assignment match in the mapping.\n */\nexport function mappingValueFromRoles(key, roles) {\n    for (const o of mappingPartIterator(MAPPING[key], roles)) {\n        if (o.allConditionsAreMet) {\n            return o.value;\n        }\n    }\n    throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);\n}\n\nfunction purgeNonPertinentRoles(roles) {\n    const pertinentRoleNames = roleNamesInMapping();\n\n    Object.keys(roles).forEach((key) => {\n        if (!pertinentRoleNames.includes(key)) {\n            delete roles[key];\n        }\n    });\n}\n\nfunction mutateRolesBasedOnMapping(mappingKey, value, roles) {\n    const roleRules = MAPPING[mappingKey][value];\n\n    if (typeof roleRules === 'undefined') {\n        throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);\n    }\n\n    roleRules.forEach((item) => {\n        const role = roles[item.roleName];\n        if (item.shouldHave) {\n            addPermissionToRole(item.permission, role);\n        } else {\n            removePermissionFromRole(item.permission, role);\n        }\n    });\n}\n\n// Returns a set of the role names present in MAPPING.\nfunction roleNamesInMapping() {\n    let roleNames = [];\n\n    Object.values(MAPPING).forEach((v1) => {\n        Object.values(v1).forEach((v2) => {\n            const names = v2.map((item) => item.roleName); // eslint-disable-line max-nested-callbacks\n            roleNames = roleNames.concat(names);\n        });\n    });\n\n    return [...new Set(roleNames.map((item) => item))];\n}\n\nfunction* mappingPartIterator(mappingPart, roles) {\n    for (const value in mappingPart) {\n        if (mappingPart.hasOwnProperty(value)) {\n            const roleRules = mappingPart[value];\n\n            const hasUnmetCondition = roleRules.some((item) => {\n                const role = roles[item.roleName];\n                return (item.shouldHave && !role.permissions.includes(item.permission)) || (!item.shouldHave && role.permissions.includes(item.permission));\n            });\n\n            yield {value, allConditionsAreMet: !hasUnmetCondition};\n        }\n    }\n}\n\nfunction addPermissionToRole(permission, role) {\n    if (!role.permissions.includes(permission)) {\n        role.permissions.push(permission);\n    }\n}\n\nfunction removePermissionFromRole(permission, role) {\n    const permissionIndex = role.permissions.indexOf(permission);\n    if (permissionIndex !== -1) {\n        role.permissions.splice(permissionIndex, 1);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage, props.currentUser, props.getByName, props.getUser);\n\n        let uContent;\n        if (props.showUserId) {\n            const profile = props.getUser(auditInfo.userId);\n            const data = profile ? profile.email : auditInfo.userId;\n            uContent = <td className='word-break--all'>{data}</td>;\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n    currentUser: PropTypes.object.isRequired,\n    getUser: PropTypes.func.isRequired,\n    getByName: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage, currentUser, getByName, getUser) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = getUser(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = getUser(actingUserInfo[1]);\n                    const user = currentUser;\n                    if (user && actingUser && isSystemAdmin(user.roles)) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nexport default connect(mapStateToProps)(AuditTable);\n"],"sourceRoot":""}