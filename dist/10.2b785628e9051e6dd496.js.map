{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["PDFPreview","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","updateStateFromProps","bind","_assertThisInitialized","onDocumentLoad","onDocumentLoadError","onPageLoad","renderPDFPage","pdfPagesRendered","state","pdf","pdfPages","pdfPagesLoaded","numPages","loading","success","React","PureComponent","nextProps","fileUrl","i","pageIndex","canvas","refs","context","getContext","viewport","getViewport","height","width","renderContext","canvasContext","render","setState","PDFJS","getDocument","then","getPage","reason","console","log","page","Object","assign","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","className","src","loadingGif","components_file_info_preview__WEBPACK_IMPORTED_MODULE_8__","fileInfo","pdfCanvases","push","ref","key","href","react_intl__WEBPACK_IMPORTED_MODULE_5__","id","defaultMessage","PropTypes","object","isRequired","string"],"mappings":"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","file":"10.2b785628e9051e6dd496.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\n\nimport loadingGif from 'images/load.gif';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.updateStateFromProps = this.updateStateFromProps.bind(this);\n        this.onDocumentLoad = this.onDocumentLoad.bind(this);\n        this.onDocumentLoadError = this.onDocumentLoadError.bind(this);\n        this.onPageLoad = this.onPageLoad.bind(this);\n        this.renderPDFPage = this.renderPDFPage.bind(this);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n            this.pdfPagesRendered = {};\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    renderPDFPage(pageIndex) {\n        if (this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) {\n            return;\n        }\n\n        const canvas = this.refs['pdfCanvas' + pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(1);\n\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    updateStateFromProps(props) {\n        this.setState({\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        });\n\n        PDFJS.getDocument(props.fileUrl).then(this.onDocumentLoad, this.onDocumentLoadError);\n    }\n\n    onDocumentLoad(pdf) {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError(reason) {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad(page) {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <img\n                        className='loader-image'\n                        src={loadingGif}\n                    />\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={'pdfCanvas' + i}\n                    key={'previewpdfcanvas' + i}\n                />\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            pdfCanvases.push(\n                <a\n                    key='previewpdfmorepages'\n                    href={this.props.fileUrl}\n                    className='pdf-max-pages'\n                >\n                    <FormattedMessage\n                        id='pdf_preview.max_pages'\n                        defaultMessage='Download to read more pages'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}