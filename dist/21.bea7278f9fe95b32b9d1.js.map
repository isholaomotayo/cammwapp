{"version":3,"sources":["webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/login/login_mfa.jsx"],"names":["OAuthToEmail","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","submit","bind","_assertThisInitialized","state","React","Component","e","_this2","preventDefault","password","ReactDOM","findDOMNode","refs","value","error","Utils","setState","_Utils$isValidPasswor","passwordConfig","valid","confirmPassword","passwordconfirm","oauthToEmail","currentType","email","emitUserLoggedOutEvent","err","message","react_default","a","createElement","className","formClass","uiType","concat","Constants","SAML_SERVICE","toUpperCase","index_es","id","defaultMessage","values","type","onSubmit","site","siteName","name","ref","placeholder","spellCheck","propTypes","PropTypes","string","object","EmailToOAuth","email_to_oauth_classCallCheck","email_to_oauth_possibleConstructorReturn","email_to_oauth_getPrototypeOf","email_to_oauth_assertThisInitialized","preSubmit","showMfa","checkMfa","requiresMfa","loginId","token","_this3","emailToOAuth","newType","data","window","location","href","follow_link","content","login_mfa","LDAPToEmail","ldap_to_email_classCallCheck","ldap_to_email_possibleConstructorReturn","ldap_to_email_getPrototypeOf","ldap_to_email_assertThisInitialized","passwordError","confirmError","ldapPasswordError","serverError","ldapPassword","ldappassword","switchFromLdapToEmail","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","email_to_ldap_classCallCheck","email_to_ldap_possibleConstructorReturn","email_to_ldap_getPrototypeOf","email_to_ldap_assertThisInitialized","ldapError","emailpassword","ldapId","ldapid","trim","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","autoComplete","display","ClaimController","URLSearchParams","search","get","back_button","src","logoImage","Switch","Route","path","match","url","render","oauth_to_email_OAuthToEmail","Object","assign","email_to_oauth_EmailToOAuth","ldap_to_email_LDAPToEmail","email_to_ldap_EmailToLDAP","isRequired","shape","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","BackButton","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","to","title","localizeMessage","react_intl__WEBPACK_IMPORTED_MODULE_4__","func","module","exports","__webpack_require__","p","LoginMfa","_defineProperty","target","replace","saving","errorClass","react__WEBPACK_IMPORTED_MODULE_4___default","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_5__","autoFocus","onChange","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_7__","disabled","savingMessage"],"mappings":"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","file":"21.bea7278f9fe95b32b9d1.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            () => {\n                emitUserLoggedOutEvent('/', false, true);\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.propTypes = {\n    currentType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\n\nexport default class EmailToOAuth extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '');\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                // Stay logged in and just redirect to the OAuth provider.\n                window.location.href = data.follow_link;\n            },\n            (err) => {\n                this.setState({error: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.email_to_oauth.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToOAuth.propTypes = {\n    newType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {checkMfa, switchFromLdapToEmail} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class LDAPToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        switchFromLdapToEmail(\n            this.props.email,\n            password,\n            token,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                emitUserLoggedOutEvent(data.follow_link, false, true);\n            },\n            (err) => {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nLDAPToEmail.propTypes = {\n    email: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                emitUserLoggedOutEvent(data.follow_link, false, true);\n            },\n            (err) => {\n                switch (err.id) {\n                case 'ent.ldap.do_login.user_not_registered.app_error':\n                case 'ent.ldap.do_login.user_filtered.app_error':\n                case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                    this.setState({ldapError: err.message, showMfa: false});\n                    break;\n                case 'ent.ldap.do_login.invalid_password.app_error':\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                    break;\n                case 'api.user.check_user_password.invalid.app_error':\n                    this.setState({passwordError: err.message, showMfa: false});\n                    break;\n                default:\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.propTypes = {\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n};\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.Component {\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={(props) => (\n                                        <OAuthToEmail\n                                            {...props}\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={(props) => (\n                                        <EmailToOAuth\n                                            {...props}\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={(props) => (\n                                        <LDAPToEmail\n                                            {...props}\n                                            siteName={this.props.siteName}\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={(props) => (\n                                        <EmailToLDAP\n                                            {...props}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nClaimController.propTypes = {\n    location: PropTypes.object.isRequired,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n\n    /*\n     * Object from react-router\n     */\n    match: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/b4b638e8c6672039f00a5f07cfed24d4.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n"],"sourceRoot":""}